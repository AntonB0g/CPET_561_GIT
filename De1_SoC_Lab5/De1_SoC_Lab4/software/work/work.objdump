
work.elf:     file format elf32-littlenios2
work.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000497c memsz 0x0000497c flags r-x
    LOAD off    0x0000599c vaddr 0x0000c99c paddr 0x0000e030 align 2**12
         filesz 0x00001694 memsz 0x00001694 flags rw-
    LOAD off    0x000076c4 vaddr 0x0000f6c4 paddr 0x0000f6c4 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004634  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0000c864  0000c864  00005864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001694  0000c99c  0000e030  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000f6c4  0000f6c4  000076c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000f7ec  0000f7ec  00007030  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000710  00000000  00000000  00007058  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000928a  00000000  00000000  00007768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000349d  00000000  00000000  000109f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000037c9  00000000  00000000  00013e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d70  00000000  00000000  00017658  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021c5  00000000  00000000  000183c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005036  00000000  00000000  0001a58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001f5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000958  00000000  00000000  0001f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021e4e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00021e51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021e5d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021e5e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021e5f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021e63  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021e67  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00021e6b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00021e76  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00021e81  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00021e8c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  00021ea0  2**0
                  CONTENTS, READONLY
 29 .jdi          00006fa5  00000000  00000000  00021ec5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062977  00000000  00000000  00028e6a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000c864 l    d  .rodata	00000000 .rodata
0000c99c l    d  .rwdata	00000000 .rwdata
0000f6c4 l    d  .bss	00000000 .bss
0000f7ec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../work_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 program.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000a8f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000aa5c l     F .text	00000034 alt_dev_reg
0000c9a8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ad38 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000af44 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b6a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b7dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b808 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ba64 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bbc4 l     F .text	0000003c alt_get_errno
0000bc00 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000dbb0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000f6dc g     O .bss	00000004 alt_instruction_exception_handler
0000a9e0 g     F .text	0000007c alt_main
0000f6ec g     O .bss	00000100 alt_irq
0000e030 g       *ABS*	00000000 __flash_rwdata_start
00008464 g     F .text	00000118 ISR
0000826c g     F .text	00000098 angle_convert_tics
0000857c g     F .text	0000003c Servo_ISR
000091a8 g     F .text	000000dc .hidden __gtdf2
0000c070 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000f6c9 g     O .bss	00000001 displayFlagMIN
0000f6c8 g     O .bss	00000001 displayFlagMAX
0000f6e8 g     O .bss	00000004 errno
0000f6d4 g     O .bss	00000004 alt_argv
00015fd4 g       *ABS*	00000000 _gp
0000da30 g     O .rwdata	00000180 alt_fd_list
0000dfec g     O .rwdata	00000004 KeyPtr
0000c094 g     F .text	00000090 alt_find_dev
0000c3b8 g     F .text	00000148 memcpy
0000dfe8 g     O .rwdata	00000004 Hex5Ptr
0000a46c g     F .text	000000dc .hidden __floatsidf
0000bb48 g     F .text	0000007c alt_io_redirect
0000e000 g     O .rwdata	00000004 lowwer_limit_deg
0000c864 g       *ABS*	00000000 __DTOR_END__
0000b9c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000b13c g     F .text	0000021c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008818 g     F .text	00000064 .hidden __udivsi3
000086ac g     F .text	00000074 .hidden __fixunsdfsi
0000f6c4 g     O .bss	00000004 input
0000e018 g     O .rwdata	00000004 alt_max_fd
000088fc g     F .text	000008ac .hidden __adddf3
0000e028 g     O .rwdata	00000004 _global_impure_ptr
0000f7ec g       *ABS*	00000000 __bss_end
0000a804 g     F .text	000000f0 alt_iic_isr_register
0000bf68 g     F .text	00000108 alt_tick
0000a548 g     F .text	000000a8 .hidden __floatunsidf
0000dff8 g     O .rwdata	00000004 max_ang
0000a7b8 g     F .text	0000004c alt_ic_irq_enabled
0000becc g     F .text	0000009c alt_alarm_stop
0000dff4 g     O .rwdata	00000004 min_ang
0000f6cc g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000da08 g     O .rwdata	00000028 alt_dev_null
0000b7bc g     F .text	00000020 alt_dcache_flush_all
0000a3ec g     F .text	00000080 .hidden __fixdfsi
0000e030 g       *ABS*	00000000 __ram_rwdata_end
0000e010 g     O .rwdata	00000008 alt_dev_list
0000dfd8 g     O .rwdata	00000004 Hex0Ptr
0000c99c g       *ABS*	00000000 __ram_rodata_end
0000dfe0 g     O .rwdata	00000004 Hex2Ptr
0000887c g     F .text	00000058 .hidden __umodsi3
0000f7ec g       *ABS*	00000000 end
0000ac78 g     F .text	000000c0 altera_avalon_jtag_uart_init
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000c864 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000a5f0 g     F .text	00000064 .hidden __clzsi2
0000dfd4 g     O .rwdata	00000004 ServoPtr
0000b358 g     F .text	00000224 altera_avalon_jtag_uart_write
0000c6b0 g     F .text	00000180 __call_exitprocs
00008230 g     F .text	0000003c _start
0000f6e0 g     O .bss	00000004 _alt_tick_rate
0000f6e4 g     O .bss	00000004 _alt_nticks
0000aac8 g     F .text	0000004c alt_sys_init
0000c598 g     F .text	00000118 __register_exitproc
0000afe4 g     F .text	00000068 altera_avalon_jtag_uart_close
000088d4 g     F .text	00000028 .hidden __mulsi3
0000c99c g       *ABS*	00000000 __ram_rwdata_start
0000c864 g       *ABS*	00000000 __ram_rodata_start
00008304 g     F .text	00000160 update_display
0000ab14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c22c g     F .text	000000c4 alt_get_fd
0000c33c g     F .text	0000007c memcmp
0000abd4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000f7ec g       *ABS*	00000000 __alt_stack_base
0000ac24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009284 g     F .text	0000086c .hidden __muldf3
0000c124 g     F .text	00000108 alt_find_file
0000b844 g     F .text	000000a4 alt_dev_llist_insert
0000f6c4 g       *ABS*	00000000 __bss_start
000085b8 g     F .text	000000f4 main
0000f6d8 g     O .bss	00000004 alt_envp
0000ab74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e01c g     O .rwdata	00000004 alt_errno
00008720 g     F .text	00000084 .hidden __divsi3
0000c864 g       *ABS*	00000000 __CTOR_END__
0000c864 g       *ABS*	00000000 __flash_rodata_start
0000c864 g       *ABS*	00000000 __DTOR_LIST__
0000aa90 g     F .text	00000038 alt_irq_init
0000be48 g     F .text	00000084 alt_release_fd
0000c864 g     O .rodata	00000100 .hidden __clz_tab
0000c2f0 g     F .text	00000014 atexit
0000dfe4 g     O .rwdata	00000004 Hex4Ptr
0000e02c g     O .rwdata	00000004 _impure_ptr
0000f6d0 g     O .bss	00000004 alt_argc
0000b948 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000dfdc g     O .rwdata	00000004 Hex1Ptr
0000e008 g     O .rwdata	00000008 alt_fs_list
0000dffc g     O .rwdata	00000004 upper_limit_deg
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a654 g     F .text	00000050 alt_ic_isr_register
0000e030 g       *ABS*	00000000 _edata
0000f7ec g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000b04c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000a72c g     F .text	0000008c alt_ic_irq_disable
0000dff0 g     O .rwdata	00000004 SWPtr
0000c304 g     F .text	00000038 exit
000087a4 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000c830 g     F .text	00000034 _exit
0000b57c g     F .text	0000012c alt_alarm_start
0000c500 g     F .text	00000098 strlen
0000bcec g     F .text	0000015c open
000091a8 g     F .text	000000dc .hidden __gedf2
0000b9a8 g     F .text	00000020 alt_icache_flush_all
0000e004 g     O .rwdata	00000004 alt_priority_mask
0000a6a4 g     F .text	00000088 alt_ic_irq_enable
00009af0 g     F .text	000008fc .hidden __subdf3
0000e020 g     O .rwdata	00000008 alt_alarm_list
0000b8e8 g     F .text	00000060 _do_ctors
0000b6e4 g     F .text	000000d8 close
0000a95c g     F .text	00000084 alt_load
0000c99c g     O .rwdata	0000000a Numbers



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10bdbb04 	addi	r2,r2,-2324
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10bdbb04 	addi	r2,r2,-2324
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff2158>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff214c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a5c217 	ldw	r2,-26872(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a5c217 	ldw	r2,-26872(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d697f514 	ori	gp,gp,24532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10bdb114 	ori	r2,r2,63172

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18fdfb14 	ori	r3,r3,63468

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff2280>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	000a95c0 	call	a95c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000a9e00 	call	a9e0 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff2294>

0000826c <angle_convert_tics>:
bool displayFlagMIN = false;

uint8 Numbers[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x0, 0x10};

int angle_convert_tics(int x)
{
    826c:	defffd04 	addi	sp,sp,-12
    8270:	dfc00215 	stw	ra,8(sp)
    8274:	df000115 	stw	fp,4(sp)
    8278:	df000104 	addi	fp,sp,4
    827c:	e13fff15 	stw	r4,-4(fp)
    return(555.56*x+25000);// equation is based on 45 deg - 50K tics; 90 deg - 75k  tics; 135 - 100k tics
    8280:	e13fff17 	ldw	r4,-4(fp)
    8284:	000a46c0 	call	a46c <__floatsidf>
    8288:	1011883a 	mov	r8,r2
    828c:	1813883a 	mov	r9,r3
    8290:	01b85234 	movhi	r6,57672
    8294:	31ab8504 	addi	r6,r6,-20972
    8298:	01d02074 	movhi	r7,16513
    829c:	39d71e84 	addi	r7,r7,23674
    82a0:	4009883a 	mov	r4,r8
    82a4:	480b883a 	mov	r5,r9
    82a8:	00092840 	call	9284 <__muldf3>
    82ac:	1009883a 	mov	r4,r2
    82b0:	180b883a 	mov	r5,r3
    82b4:	2005883a 	mov	r2,r4
    82b8:	2807883a 	mov	r3,r5
    82bc:	000d883a 	mov	r6,zero
    82c0:	01d03634 	movhi	r7,16600
    82c4:	39da8004 	addi	r7,r7,27136
    82c8:	1009883a 	mov	r4,r2
    82cc:	180b883a 	mov	r5,r3
    82d0:	00088fc0 	call	88fc <__adddf3>
    82d4:	1009883a 	mov	r4,r2
    82d8:	180b883a 	mov	r5,r3
    82dc:	2005883a 	mov	r2,r4
    82e0:	2807883a 	mov	r3,r5
    82e4:	1009883a 	mov	r4,r2
    82e8:	180b883a 	mov	r5,r3
    82ec:	000a3ec0 	call	a3ec <__fixdfsi>
}
    82f0:	e037883a 	mov	sp,fp
    82f4:	dfc00117 	ldw	ra,4(sp)
    82f8:	df000017 	ldw	fp,0(sp)
    82fc:	dec00204 	addi	sp,sp,8
    8300:	f800283a 	ret

00008304 <update_display>:

void update_display()
{
    8304:	defff804 	addi	sp,sp,-32
    8308:	dfc00715 	stw	ra,28(sp)
    830c:	df000615 	stw	fp,24(sp)
    8310:	df000604 	addi	fp,sp,24
    int min_tenth = input/10;
    8314:	d0a5bc17 	ldw	r2,-26896(gp)
    8318:	01400284 	movi	r5,10
    831c:	1009883a 	mov	r4,r2
    8320:	00088180 	call	8818 <__udivsi3>
    8324:	e0bffa15 	stw	r2,-24(fp)
    int min_dig   = input % 10;
    8328:	d0a5bc17 	ldw	r2,-26896(gp)
    832c:	01400284 	movi	r5,10
    8330:	1009883a 	mov	r4,r2
    8334:	000887c0 	call	887c <__umodsi3>
    8338:	e0bffb15 	stw	r2,-20(fp)

    int max_hund  = input/100;
    833c:	d0a5bc17 	ldw	r2,-26896(gp)
    8340:	01401904 	movi	r5,100
    8344:	1009883a 	mov	r4,r2
    8348:	00088180 	call	8818 <__udivsi3>
    834c:	e0bffc15 	stw	r2,-16(fp)
    int temp = input/10;
    8350:	d0a5bc17 	ldw	r2,-26896(gp)
    8354:	01400284 	movi	r5,10
    8358:	1009883a 	mov	r4,r2
    835c:	00088180 	call	8818 <__udivsi3>
    8360:	e0bffd15 	stw	r2,-12(fp)
    int max_tenth = temp % 10;
    8364:	e0bffd17 	ldw	r2,-12(fp)
    8368:	01400284 	movi	r5,10
    836c:	1009883a 	mov	r4,r2
    8370:	00087a40 	call	87a4 <__modsi3>
    8374:	e0bffe15 	stw	r2,-8(fp)

    int max_dig   = input % 10;
    8378:	d0a5bc17 	ldw	r2,-26896(gp)
    837c:	01400284 	movi	r5,10
    8380:	1009883a 	mov	r4,r2
    8384:	000887c0 	call	887c <__umodsi3>
    8388:	e0bfff15 	stw	r2,-4(fp)

    if(displayFlagMAX == true)
    838c:	d0a5bd03 	ldbu	r2,-26892(gp)
    8390:	10803fcc 	andi	r2,r2,255
    8394:	10001826 	beq	r2,zero,83f8 <update_display+0xf4>
    {
        *Hex0Ptr = Numbers[max_dig];   /* set HEX0 to display digits of the max value */
    8398:	d0e00117 	ldw	r3,-32764(gp)
    839c:	00800074 	movhi	r2,1
    83a0:	10b26704 	addi	r2,r2,-13924
    83a4:	e13fff17 	ldw	r4,-4(fp)
    83a8:	1105883a 	add	r2,r2,r4
    83ac:	10800003 	ldbu	r2,0(r2)
    83b0:	10803fcc 	andi	r2,r2,255
    83b4:	18800015 	stw	r2,0(r3)
        *Hex1Ptr = Numbers[max_tenth]; /* set HEX1 to display tenth of the max value */
    83b8:	d0e00217 	ldw	r3,-32760(gp)
    83bc:	00800074 	movhi	r2,1
    83c0:	10b26704 	addi	r2,r2,-13924
    83c4:	e13ffe17 	ldw	r4,-8(fp)
    83c8:	1105883a 	add	r2,r2,r4
    83cc:	10800003 	ldbu	r2,0(r2)
    83d0:	10803fcc 	andi	r2,r2,255
    83d4:	18800015 	stw	r2,0(r3)
        *Hex2Ptr = Numbers[max_hund];  /* set HEX2 to display hundreds of the max value */
    83d8:	d0e00317 	ldw	r3,-32756(gp)
    83dc:	00800074 	movhi	r2,1
    83e0:	10b26704 	addi	r2,r2,-13924
    83e4:	e13ffc17 	ldw	r4,-16(fp)
    83e8:	1105883a 	add	r2,r2,r4
    83ec:	10800003 	ldbu	r2,0(r2)
    83f0:	10803fcc 	andi	r2,r2,255
    83f4:	18800015 	stw	r2,0(r3)
    }

    if(displayFlagMIN == true)
    83f8:	d0a5bd43 	ldbu	r2,-26891(gp)
    83fc:	10803fcc 	andi	r2,r2,255
    8400:	10001026 	beq	r2,zero,8444 <update_display+0x140>
    {
    	*Hex4Ptr = Numbers[min_dig];   /* set HEX4 to display digits of the min value */
    8404:	d0e00417 	ldw	r3,-32752(gp)
    8408:	00800074 	movhi	r2,1
    840c:	10b26704 	addi	r2,r2,-13924
    8410:	e13ffb17 	ldw	r4,-20(fp)
    8414:	1105883a 	add	r2,r2,r4
    8418:	10800003 	ldbu	r2,0(r2)
    841c:	10803fcc 	andi	r2,r2,255
    8420:	18800015 	stw	r2,0(r3)
    	*Hex5Ptr = Numbers[min_tenth]; /* set HEX5 to display tenth of min value */
    8424:	d0e00517 	ldw	r3,-32748(gp)
    8428:	00800074 	movhi	r2,1
    842c:	10b26704 	addi	r2,r2,-13924
    8430:	e13ffa17 	ldw	r4,-24(fp)
    8434:	1105883a 	add	r2,r2,r4
    8438:	10800003 	ldbu	r2,0(r2)
    843c:	10803fcc 	andi	r2,r2,255
    8440:	18800015 	stw	r2,0(r3)
    }

    displayFlagMAX = false;//disables Update display function for the MAX value
    8444:	d025bd05 	stb	zero,-26892(gp)
	displayFlagMIN = false;//disables Update display function for the MIN value
    8448:	d025bd45 	stb	zero,-26891(gp)
}
    844c:	0001883a 	nop
    8450:	e037883a 	mov	sp,fp
    8454:	dfc00117 	ldw	ra,4(sp)
    8458:	df000017 	ldw	fp,0(sp)
    845c:	dec00204 	addi	sp,sp,8
    8460:	f800283a 	ret

00008464 <ISR>:

void ISR()
{
    8464:	defffe04 	addi	sp,sp,-8
    8468:	dfc00115 	stw	ra,4(sp)
    846c:	df000015 	stw	fp,0(sp)
    8470:	d839883a 	mov	fp,sp
    input = *SWPtr;
    8474:	d0a00717 	ldw	r2,-32740(gp)
    8478:	10800017 	ldw	r2,0(r2)
    847c:	d0a5bc15 	stw	r2,-26896(gp)

    //This function checks what key is pressed (two or three) by masking KeyPtr
    if (*(KeyPtr + 3) & 0x4) // KEY2 is pressed 0b0100 = 0x4
    8480:	d0a00617 	ldw	r2,-32744(gp)
    8484:	10800304 	addi	r2,r2,12
    8488:	10800017 	ldw	r2,0(r2)
    848c:	1080010c 	andi	r2,r2,4
    8490:	10000d26 	beq	r2,zero,84c8 <ISR+0x64>
    {
        if (input >= lowwer_limit_deg) // check for the input, if input is bigger or equal than minimum allowed value => do nothing
    8494:	d0a5bc17 	ldw	r2,-26896(gp)
    8498:	d0e00b17 	ldw	r3,-32724(gp)
    849c:	10c02e36 	bltu	r2,r3,8558 <ISR+0xf4>
        {
            min_ang = 555*input+25000;
    84a0:	d0a5bc17 	ldw	r2,-26896(gp)
    84a4:	01408ac4 	movi	r5,555
    84a8:	1009883a 	mov	r4,r2
    84ac:	00088d40 	call	88d4 <__mulsi3>
    84b0:	10986a04 	addi	r2,r2,25000
    84b4:	d0a00815 	stw	r2,-32736(gp)
            displayFlagMIN = true;
    84b8:	00800044 	movi	r2,1
    84bc:	d0a5bd45 	stb	r2,-26891(gp)
            update_display();
    84c0:	00083040 	call	8304 <update_display>
    84c4:	00002406 	br	8558 <ISR+0xf4>
        }
    }
    else // KEY3 is pressed 0b1000 = 0x8
    {
        if (input <= upper_limit_deg) // check for the input, if input is smaller or equal than maximum allowed value => do nothing
    84c8:	d0a5bc17 	ldw	r2,-26896(gp)
    84cc:	d0e00a17 	ldw	r3,-32728(gp)
    84d0:	18802136 	bltu	r3,r2,8558 <ISR+0xf4>
        {
            max_ang = 555.56*input+25000;
    84d4:	d0a5bc17 	ldw	r2,-26896(gp)
    84d8:	1009883a 	mov	r4,r2
    84dc:	000a5480 	call	a548 <__floatunsidf>
    84e0:	1011883a 	mov	r8,r2
    84e4:	1813883a 	mov	r9,r3
    84e8:	01b85234 	movhi	r6,57672
    84ec:	31ab8504 	addi	r6,r6,-20972
    84f0:	01d02074 	movhi	r7,16513
    84f4:	39d71e84 	addi	r7,r7,23674
    84f8:	4009883a 	mov	r4,r8
    84fc:	480b883a 	mov	r5,r9
    8500:	00092840 	call	9284 <__muldf3>
    8504:	1009883a 	mov	r4,r2
    8508:	180b883a 	mov	r5,r3
    850c:	2005883a 	mov	r2,r4
    8510:	2807883a 	mov	r3,r5
    8514:	000d883a 	mov	r6,zero
    8518:	01d03634 	movhi	r7,16600
    851c:	39da8004 	addi	r7,r7,27136
    8520:	1009883a 	mov	r4,r2
    8524:	180b883a 	mov	r5,r3
    8528:	00088fc0 	call	88fc <__adddf3>
    852c:	1009883a 	mov	r4,r2
    8530:	180b883a 	mov	r5,r3
    8534:	2005883a 	mov	r2,r4
    8538:	2807883a 	mov	r3,r5
    853c:	1009883a 	mov	r4,r2
    8540:	180b883a 	mov	r5,r3
    8544:	00086ac0 	call	86ac <__fixunsdfsi>
    8548:	d0a00915 	stw	r2,-32732(gp)
            displayFlagMAX = true;
    854c:	00800044 	movi	r2,1
    8550:	d0a5bd05 	stb	r2,-26892(gp)
            update_display();
    8554:	00083040 	call	8304 <update_display>
        }
    }
    *(KeyPtr + 3) = 0; // EdgeCapture reset
    8558:	d0a00617 	ldw	r2,-32744(gp)
    855c:	10800304 	addi	r2,r2,12
    8560:	10000015 	stw	zero,0(r2)
}
    8564:	0001883a 	nop
    8568:	e037883a 	mov	sp,fp
    856c:	dfc00117 	ldw	ra,4(sp)
    8570:	df000017 	ldw	fp,0(sp)
    8574:	dec00204 	addi	sp,sp,8
    8578:	f800283a 	ret

0000857c <Servo_ISR>:

void Servo_ISR()
{
    857c:	deffff04 	addi	sp,sp,-4
    8580:	df000015 	stw	fp,0(sp)
    8584:	d839883a 	mov	fp,sp
    //write to the min and max register of the ServoController_ip
    *(ServoPtr + 0) = min_ang; // updating minimum angle and writting it to the MIN register
    8588:	d0a00017 	ldw	r2,-32768(gp)
    858c:	d0e00817 	ldw	r3,-32736(gp)
    8590:	10c00015 	stw	r3,0(r2)
    *(ServoPtr + 1) = max_ang; // updating maximum angle and writting it to the MAX register
    8594:	d0a00017 	ldw	r2,-32768(gp)
    8598:	10800104 	addi	r2,r2,4
    859c:	d0e00917 	ldw	r3,-32732(gp)
    85a0:	10c00015 	stw	r3,0(r2)
}
    85a4:	0001883a 	nop
    85a8:	e037883a 	mov	sp,fp
    85ac:	df000017 	ldw	fp,0(sp)
    85b0:	dec00104 	addi	sp,sp,4
    85b4:	f800283a 	ret

000085b8 <main>:

int main()
{
    85b8:	defffd04 	addi	sp,sp,-12
    85bc:	dfc00215 	stw	ra,8(sp)
    85c0:	df000115 	stw	fp,4(sp)
    85c4:	df000104 	addi	fp,sp,4

    *(ServoPtr + 0) = 50000; // updating minimum angle and writting it to the MIN register
    85c8:	d0a00017 	ldw	r2,-32768(gp)
    85cc:	00f0d414 	movui	r3,50000
    85d0:	10c00015 	stw	r3,0(r2)
    *(ServoPtr + 1) = 100000; // updating maximum angle and writting it to the MAX register
    85d4:	d0a00017 	ldw	r2,-32768(gp)
    85d8:	10c00104 	addi	r3,r2,4
    85dc:	008000b4 	movhi	r2,2
    85e0:	10a1a804 	addi	r2,r2,-31072
    85e4:	18800015 	stw	r2,0(r3)
    alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSHBUTTONS_IRQ,ISR,0,0); //setup Pushbutton Interrupt
    85e8:	d8000015 	stw	zero,0(sp)
    85ec:	000f883a 	mov	r7,zero
    85f0:	01800074 	movhi	r6,1
    85f4:	31a11904 	addi	r6,r6,-31644
    85f8:	01400044 	movi	r5,1
    85fc:	0009883a 	mov	r4,zero
    8600:	000a6540 	call	a654 <alt_ic_isr_register>
    alt_ic_isr_register(SERVO_CONTROLLER_IP_0_IRQ_INTERRUPT_CONTROLLER_ID, SERVO_CONTROLLER_IP_0_IRQ,Servo_ISR,0,0); // setup Servo Interrupt
    8604:	d8000015 	stw	zero,0(sp)
    8608:	000f883a 	mov	r7,zero
    860c:	01800074 	movhi	r6,1
    8610:	31a15f04 	addi	r6,r6,-31364
    8614:	000b883a 	mov	r5,zero
    8618:	0009883a 	mov	r4,zero
    861c:	000a6540 	call	a654 <alt_ic_isr_register>
    
    *Hex0Ptr = Numbers[0]; /* set HEX0 to display 0 */
    8620:	d0e00117 	ldw	r3,-32764(gp)
    8624:	00800074 	movhi	r2,1
    8628:	10b26704 	addi	r2,r2,-13924
    862c:	10800003 	ldbu	r2,0(r2)
    8630:	10803fcc 	andi	r2,r2,255
    8634:	18800015 	stw	r2,0(r3)
    *Hex1Ptr = Numbers[0]; /* set HEX1 to display 0 */
    8638:	d0e00217 	ldw	r3,-32760(gp)
    863c:	00800074 	movhi	r2,1
    8640:	10b26704 	addi	r2,r2,-13924
    8644:	10800003 	ldbu	r2,0(r2)
    8648:	10803fcc 	andi	r2,r2,255
    864c:	18800015 	stw	r2,0(r3)
    *Hex2Ptr = Numbers[0]; /* set HEX2 to display 0 */
    8650:	d0e00317 	ldw	r3,-32756(gp)
    8654:	00800074 	movhi	r2,1
    8658:	10b26704 	addi	r2,r2,-13924
    865c:	10800003 	ldbu	r2,0(r2)
    8660:	10803fcc 	andi	r2,r2,255
    8664:	18800015 	stw	r2,0(r3)
    *Hex4Ptr = Numbers[0]; /* set HEX4 to display 0 */
    8668:	d0e00417 	ldw	r3,-32752(gp)
    866c:	00800074 	movhi	r2,1
    8670:	10b26704 	addi	r2,r2,-13924
    8674:	10800003 	ldbu	r2,0(r2)
    8678:	10803fcc 	andi	r2,r2,255
    867c:	18800015 	stw	r2,0(r3)
    *Hex5Ptr = Numbers[0]; /* set HEX5 to display 0 */
    8680:	d0e00517 	ldw	r3,-32748(gp)
    8684:	00800074 	movhi	r2,1
    8688:	10b26704 	addi	r2,r2,-13924
    868c:	10800003 	ldbu	r2,0(r2)
    8690:	10803fcc 	andi	r2,r2,255
    8694:	18800015 	stw	r2,0(r3)

    *(KeyPtr + 2) = 0xC;// set the interrupt mask for KEY2 and KEY3 (1100)
    8698:	d0a00617 	ldw	r2,-32744(gp)
    869c:	10800204 	addi	r2,r2,8
    86a0:	00c00304 	movi	r3,12
    86a4:	10c00015 	stw	r3,0(r2)
    
     while(1)
    {
    };
    86a8:	003fff06 	br	86a8 <_gp+0xffff26d4>

000086ac <__fixunsdfsi>:
    86ac:	defffd04 	addi	sp,sp,-12
    86b0:	000d883a 	mov	r6,zero
    86b4:	01d07834 	movhi	r7,16864
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	dc000015 	stw	r16,0(sp)
    86c0:	dfc00215 	stw	ra,8(sp)
    86c4:	2023883a 	mov	r17,r4
    86c8:	2821883a 	mov	r16,r5
    86cc:	00091a80 	call	91a8 <__gedf2>
    86d0:	1000080e 	bge	r2,zero,86f4 <__fixunsdfsi+0x48>
    86d4:	8809883a 	mov	r4,r17
    86d8:	800b883a 	mov	r5,r16
    86dc:	000a3ec0 	call	a3ec <__fixdfsi>
    86e0:	dfc00217 	ldw	ra,8(sp)
    86e4:	dc400117 	ldw	r17,4(sp)
    86e8:	dc000017 	ldw	r16,0(sp)
    86ec:	dec00304 	addi	sp,sp,12
    86f0:	f800283a 	ret
    86f4:	000d883a 	mov	r6,zero
    86f8:	01d07834 	movhi	r7,16864
    86fc:	8809883a 	mov	r4,r17
    8700:	800b883a 	mov	r5,r16
    8704:	0009af00 	call	9af0 <__subdf3>
    8708:	180b883a 	mov	r5,r3
    870c:	1009883a 	mov	r4,r2
    8710:	000a3ec0 	call	a3ec <__fixdfsi>
    8714:	00e00034 	movhi	r3,32768
    8718:	10c5883a 	add	r2,r2,r3
    871c:	003ff006 	br	86e0 <_gp+0xffff270c>

00008720 <__divsi3>:
    8720:	20001b16 	blt	r4,zero,8790 <__divsi3+0x70>
    8724:	000f883a 	mov	r7,zero
    8728:	28001616 	blt	r5,zero,8784 <__divsi3+0x64>
    872c:	200d883a 	mov	r6,r4
    8730:	29001a2e 	bgeu	r5,r4,879c <__divsi3+0x7c>
    8734:	00800804 	movi	r2,32
    8738:	00c00044 	movi	r3,1
    873c:	00000106 	br	8744 <__divsi3+0x24>
    8740:	10000d26 	beq	r2,zero,8778 <__divsi3+0x58>
    8744:	294b883a 	add	r5,r5,r5
    8748:	10bfffc4 	addi	r2,r2,-1
    874c:	18c7883a 	add	r3,r3,r3
    8750:	293ffb36 	bltu	r5,r4,8740 <_gp+0xffff276c>
    8754:	0005883a 	mov	r2,zero
    8758:	18000726 	beq	r3,zero,8778 <__divsi3+0x58>
    875c:	0005883a 	mov	r2,zero
    8760:	31400236 	bltu	r6,r5,876c <__divsi3+0x4c>
    8764:	314dc83a 	sub	r6,r6,r5
    8768:	10c4b03a 	or	r2,r2,r3
    876c:	1806d07a 	srli	r3,r3,1
    8770:	280ad07a 	srli	r5,r5,1
    8774:	183ffa1e 	bne	r3,zero,8760 <_gp+0xffff278c>
    8778:	38000126 	beq	r7,zero,8780 <__divsi3+0x60>
    877c:	0085c83a 	sub	r2,zero,r2
    8780:	f800283a 	ret
    8784:	014bc83a 	sub	r5,zero,r5
    8788:	39c0005c 	xori	r7,r7,1
    878c:	003fe706 	br	872c <_gp+0xffff2758>
    8790:	0109c83a 	sub	r4,zero,r4
    8794:	01c00044 	movi	r7,1
    8798:	003fe306 	br	8728 <_gp+0xffff2754>
    879c:	00c00044 	movi	r3,1
    87a0:	003fee06 	br	875c <_gp+0xffff2788>

000087a4 <__modsi3>:
    87a4:	20001716 	blt	r4,zero,8804 <__modsi3+0x60>
    87a8:	000f883a 	mov	r7,zero
    87ac:	2005883a 	mov	r2,r4
    87b0:	28001216 	blt	r5,zero,87fc <__modsi3+0x58>
    87b4:	2900162e 	bgeu	r5,r4,8810 <__modsi3+0x6c>
    87b8:	01800804 	movi	r6,32
    87bc:	00c00044 	movi	r3,1
    87c0:	00000106 	br	87c8 <__modsi3+0x24>
    87c4:	30000a26 	beq	r6,zero,87f0 <__modsi3+0x4c>
    87c8:	294b883a 	add	r5,r5,r5
    87cc:	31bfffc4 	addi	r6,r6,-1
    87d0:	18c7883a 	add	r3,r3,r3
    87d4:	293ffb36 	bltu	r5,r4,87c4 <_gp+0xffff27f0>
    87d8:	18000526 	beq	r3,zero,87f0 <__modsi3+0x4c>
    87dc:	1806d07a 	srli	r3,r3,1
    87e0:	11400136 	bltu	r2,r5,87e8 <__modsi3+0x44>
    87e4:	1145c83a 	sub	r2,r2,r5
    87e8:	280ad07a 	srli	r5,r5,1
    87ec:	183ffb1e 	bne	r3,zero,87dc <_gp+0xffff2808>
    87f0:	38000126 	beq	r7,zero,87f8 <__modsi3+0x54>
    87f4:	0085c83a 	sub	r2,zero,r2
    87f8:	f800283a 	ret
    87fc:	014bc83a 	sub	r5,zero,r5
    8800:	003fec06 	br	87b4 <_gp+0xffff27e0>
    8804:	0109c83a 	sub	r4,zero,r4
    8808:	01c00044 	movi	r7,1
    880c:	003fe706 	br	87ac <_gp+0xffff27d8>
    8810:	00c00044 	movi	r3,1
    8814:	003ff106 	br	87dc <_gp+0xffff2808>

00008818 <__udivsi3>:
    8818:	200d883a 	mov	r6,r4
    881c:	2900152e 	bgeu	r5,r4,8874 <__udivsi3+0x5c>
    8820:	28001416 	blt	r5,zero,8874 <__udivsi3+0x5c>
    8824:	00800804 	movi	r2,32
    8828:	00c00044 	movi	r3,1
    882c:	00000206 	br	8838 <__udivsi3+0x20>
    8830:	10000e26 	beq	r2,zero,886c <__udivsi3+0x54>
    8834:	28000516 	blt	r5,zero,884c <__udivsi3+0x34>
    8838:	294b883a 	add	r5,r5,r5
    883c:	10bfffc4 	addi	r2,r2,-1
    8840:	18c7883a 	add	r3,r3,r3
    8844:	293ffa36 	bltu	r5,r4,8830 <_gp+0xffff285c>
    8848:	18000826 	beq	r3,zero,886c <__udivsi3+0x54>
    884c:	0005883a 	mov	r2,zero
    8850:	31400236 	bltu	r6,r5,885c <__udivsi3+0x44>
    8854:	314dc83a 	sub	r6,r6,r5
    8858:	10c4b03a 	or	r2,r2,r3
    885c:	1806d07a 	srli	r3,r3,1
    8860:	280ad07a 	srli	r5,r5,1
    8864:	183ffa1e 	bne	r3,zero,8850 <_gp+0xffff287c>
    8868:	f800283a 	ret
    886c:	0005883a 	mov	r2,zero
    8870:	f800283a 	ret
    8874:	00c00044 	movi	r3,1
    8878:	003ff406 	br	884c <_gp+0xffff2878>

0000887c <__umodsi3>:
    887c:	2005883a 	mov	r2,r4
    8880:	2900122e 	bgeu	r5,r4,88cc <__umodsi3+0x50>
    8884:	28001116 	blt	r5,zero,88cc <__umodsi3+0x50>
    8888:	01800804 	movi	r6,32
    888c:	00c00044 	movi	r3,1
    8890:	00000206 	br	889c <__umodsi3+0x20>
    8894:	30000c26 	beq	r6,zero,88c8 <__umodsi3+0x4c>
    8898:	28000516 	blt	r5,zero,88b0 <__umodsi3+0x34>
    889c:	294b883a 	add	r5,r5,r5
    88a0:	31bfffc4 	addi	r6,r6,-1
    88a4:	18c7883a 	add	r3,r3,r3
    88a8:	293ffa36 	bltu	r5,r4,8894 <_gp+0xffff28c0>
    88ac:	18000626 	beq	r3,zero,88c8 <__umodsi3+0x4c>
    88b0:	1806d07a 	srli	r3,r3,1
    88b4:	11400136 	bltu	r2,r5,88bc <__umodsi3+0x40>
    88b8:	1145c83a 	sub	r2,r2,r5
    88bc:	280ad07a 	srli	r5,r5,1
    88c0:	183ffb1e 	bne	r3,zero,88b0 <_gp+0xffff28dc>
    88c4:	f800283a 	ret
    88c8:	f800283a 	ret
    88cc:	00c00044 	movi	r3,1
    88d0:	003ff706 	br	88b0 <_gp+0xffff28dc>

000088d4 <__mulsi3>:
    88d4:	0005883a 	mov	r2,zero
    88d8:	20000726 	beq	r4,zero,88f8 <__mulsi3+0x24>
    88dc:	20c0004c 	andi	r3,r4,1
    88e0:	2008d07a 	srli	r4,r4,1
    88e4:	18000126 	beq	r3,zero,88ec <__mulsi3+0x18>
    88e8:	1145883a 	add	r2,r2,r5
    88ec:	294b883a 	add	r5,r5,r5
    88f0:	203ffa1e 	bne	r4,zero,88dc <_gp+0xffff2908>
    88f4:	f800283a 	ret
    88f8:	f800283a 	ret

000088fc <__adddf3>:
    88fc:	02c00434 	movhi	r11,16
    8900:	5affffc4 	addi	r11,r11,-1
    8904:	2806d7fa 	srli	r3,r5,31
    8908:	2ad4703a 	and	r10,r5,r11
    890c:	3ad2703a 	and	r9,r7,r11
    8910:	3804d53a 	srli	r2,r7,20
    8914:	3018d77a 	srli	r12,r6,29
    8918:	280ad53a 	srli	r5,r5,20
    891c:	501490fa 	slli	r10,r10,3
    8920:	2010d77a 	srli	r8,r4,29
    8924:	481290fa 	slli	r9,r9,3
    8928:	380ed7fa 	srli	r7,r7,31
    892c:	defffb04 	addi	sp,sp,-20
    8930:	dc800215 	stw	r18,8(sp)
    8934:	dc400115 	stw	r17,4(sp)
    8938:	dc000015 	stw	r16,0(sp)
    893c:	dfc00415 	stw	ra,16(sp)
    8940:	dcc00315 	stw	r19,12(sp)
    8944:	1c803fcc 	andi	r18,r3,255
    8948:	2c01ffcc 	andi	r16,r5,2047
    894c:	5210b03a 	or	r8,r10,r8
    8950:	202290fa 	slli	r17,r4,3
    8954:	1081ffcc 	andi	r2,r2,2047
    8958:	4b12b03a 	or	r9,r9,r12
    895c:	300c90fa 	slli	r6,r6,3
    8960:	91c07526 	beq	r18,r7,8b38 <__adddf3+0x23c>
    8964:	8087c83a 	sub	r3,r16,r2
    8968:	00c0ab0e 	bge	zero,r3,8c18 <__adddf3+0x31c>
    896c:	10002a1e 	bne	r2,zero,8a18 <__adddf3+0x11c>
    8970:	4984b03a 	or	r2,r9,r6
    8974:	1000961e 	bne	r2,zero,8bd0 <__adddf3+0x2d4>
    8978:	888001cc 	andi	r2,r17,7
    897c:	10000726 	beq	r2,zero,899c <__adddf3+0xa0>
    8980:	888003cc 	andi	r2,r17,15
    8984:	00c00104 	movi	r3,4
    8988:	10c00426 	beq	r2,r3,899c <__adddf3+0xa0>
    898c:	88c7883a 	add	r3,r17,r3
    8990:	1c63803a 	cmpltu	r17,r3,r17
    8994:	4451883a 	add	r8,r8,r17
    8998:	1823883a 	mov	r17,r3
    899c:	4080202c 	andhi	r2,r8,128
    89a0:	10005926 	beq	r2,zero,8b08 <__adddf3+0x20c>
    89a4:	84000044 	addi	r16,r16,1
    89a8:	0081ffc4 	movi	r2,2047
    89ac:	8080ba26 	beq	r16,r2,8c98 <__adddf3+0x39c>
    89b0:	00bfe034 	movhi	r2,65408
    89b4:	10bfffc4 	addi	r2,r2,-1
    89b8:	4090703a 	and	r8,r8,r2
    89bc:	4004977a 	slli	r2,r8,29
    89c0:	4010927a 	slli	r8,r8,9
    89c4:	8822d0fa 	srli	r17,r17,3
    89c8:	8401ffcc 	andi	r16,r16,2047
    89cc:	4010d33a 	srli	r8,r8,12
    89d0:	9007883a 	mov	r3,r18
    89d4:	1444b03a 	or	r2,r2,r17
    89d8:	8401ffcc 	andi	r16,r16,2047
    89dc:	8020953a 	slli	r16,r16,20
    89e0:	18c03fcc 	andi	r3,r3,255
    89e4:	01000434 	movhi	r4,16
    89e8:	213fffc4 	addi	r4,r4,-1
    89ec:	180697fa 	slli	r3,r3,31
    89f0:	4110703a 	and	r8,r8,r4
    89f4:	4410b03a 	or	r8,r8,r16
    89f8:	40c6b03a 	or	r3,r8,r3
    89fc:	dfc00417 	ldw	ra,16(sp)
    8a00:	dcc00317 	ldw	r19,12(sp)
    8a04:	dc800217 	ldw	r18,8(sp)
    8a08:	dc400117 	ldw	r17,4(sp)
    8a0c:	dc000017 	ldw	r16,0(sp)
    8a10:	dec00504 	addi	sp,sp,20
    8a14:	f800283a 	ret
    8a18:	0081ffc4 	movi	r2,2047
    8a1c:	80bfd626 	beq	r16,r2,8978 <_gp+0xffff29a4>
    8a20:	4a402034 	orhi	r9,r9,128
    8a24:	00800e04 	movi	r2,56
    8a28:	10c09f16 	blt	r2,r3,8ca8 <__adddf3+0x3ac>
    8a2c:	008007c4 	movi	r2,31
    8a30:	10c0c216 	blt	r2,r3,8d3c <__adddf3+0x440>
    8a34:	00800804 	movi	r2,32
    8a38:	10c5c83a 	sub	r2,r2,r3
    8a3c:	488a983a 	sll	r5,r9,r2
    8a40:	30c8d83a 	srl	r4,r6,r3
    8a44:	3084983a 	sll	r2,r6,r2
    8a48:	48c6d83a 	srl	r3,r9,r3
    8a4c:	290cb03a 	or	r6,r5,r4
    8a50:	1004c03a 	cmpne	r2,r2,zero
    8a54:	308cb03a 	or	r6,r6,r2
    8a58:	898dc83a 	sub	r6,r17,r6
    8a5c:	89a3803a 	cmpltu	r17,r17,r6
    8a60:	40d1c83a 	sub	r8,r8,r3
    8a64:	4451c83a 	sub	r8,r8,r17
    8a68:	3023883a 	mov	r17,r6
    8a6c:	4080202c 	andhi	r2,r8,128
    8a70:	10002326 	beq	r2,zero,8b00 <__adddf3+0x204>
    8a74:	04c02034 	movhi	r19,128
    8a78:	9cffffc4 	addi	r19,r19,-1
    8a7c:	44e6703a 	and	r19,r8,r19
    8a80:	98007626 	beq	r19,zero,8c5c <__adddf3+0x360>
    8a84:	9809883a 	mov	r4,r19
    8a88:	000a5f00 	call	a5f0 <__clzsi2>
    8a8c:	10fffe04 	addi	r3,r2,-8
    8a90:	010007c4 	movi	r4,31
    8a94:	20c07716 	blt	r4,r3,8c74 <__adddf3+0x378>
    8a98:	00800804 	movi	r2,32
    8a9c:	10c5c83a 	sub	r2,r2,r3
    8aa0:	8884d83a 	srl	r2,r17,r2
    8aa4:	98d0983a 	sll	r8,r19,r3
    8aa8:	88e2983a 	sll	r17,r17,r3
    8aac:	1204b03a 	or	r2,r2,r8
    8ab0:	1c007416 	blt	r3,r16,8c84 <__adddf3+0x388>
    8ab4:	1c21c83a 	sub	r16,r3,r16
    8ab8:	82000044 	addi	r8,r16,1
    8abc:	00c007c4 	movi	r3,31
    8ac0:	1a009116 	blt	r3,r8,8d08 <__adddf3+0x40c>
    8ac4:	00c00804 	movi	r3,32
    8ac8:	1a07c83a 	sub	r3,r3,r8
    8acc:	8a08d83a 	srl	r4,r17,r8
    8ad0:	88e2983a 	sll	r17,r17,r3
    8ad4:	10c6983a 	sll	r3,r2,r3
    8ad8:	1210d83a 	srl	r8,r2,r8
    8adc:	8804c03a 	cmpne	r2,r17,zero
    8ae0:	1906b03a 	or	r3,r3,r4
    8ae4:	18a2b03a 	or	r17,r3,r2
    8ae8:	0021883a 	mov	r16,zero
    8aec:	003fa206 	br	8978 <_gp+0xffff29a4>
    8af0:	1890b03a 	or	r8,r3,r2
    8af4:	40017d26 	beq	r8,zero,90ec <__adddf3+0x7f0>
    8af8:	1011883a 	mov	r8,r2
    8afc:	1823883a 	mov	r17,r3
    8b00:	888001cc 	andi	r2,r17,7
    8b04:	103f9e1e 	bne	r2,zero,8980 <_gp+0xffff29ac>
    8b08:	4004977a 	slli	r2,r8,29
    8b0c:	8822d0fa 	srli	r17,r17,3
    8b10:	4010d0fa 	srli	r8,r8,3
    8b14:	9007883a 	mov	r3,r18
    8b18:	1444b03a 	or	r2,r2,r17
    8b1c:	0101ffc4 	movi	r4,2047
    8b20:	81002426 	beq	r16,r4,8bb4 <__adddf3+0x2b8>
    8b24:	8120703a 	and	r16,r16,r4
    8b28:	01000434 	movhi	r4,16
    8b2c:	213fffc4 	addi	r4,r4,-1
    8b30:	4110703a 	and	r8,r8,r4
    8b34:	003fa806 	br	89d8 <_gp+0xffff2a04>
    8b38:	8089c83a 	sub	r4,r16,r2
    8b3c:	01005e0e 	bge	zero,r4,8cb8 <__adddf3+0x3bc>
    8b40:	10002b26 	beq	r2,zero,8bf0 <__adddf3+0x2f4>
    8b44:	0081ffc4 	movi	r2,2047
    8b48:	80bf8b26 	beq	r16,r2,8978 <_gp+0xffff29a4>
    8b4c:	4a402034 	orhi	r9,r9,128
    8b50:	00800e04 	movi	r2,56
    8b54:	1100a40e 	bge	r2,r4,8de8 <__adddf3+0x4ec>
    8b58:	498cb03a 	or	r6,r9,r6
    8b5c:	300ac03a 	cmpne	r5,r6,zero
    8b60:	0013883a 	mov	r9,zero
    8b64:	2c4b883a 	add	r5,r5,r17
    8b68:	2c63803a 	cmpltu	r17,r5,r17
    8b6c:	4a11883a 	add	r8,r9,r8
    8b70:	8a11883a 	add	r8,r17,r8
    8b74:	2823883a 	mov	r17,r5
    8b78:	4080202c 	andhi	r2,r8,128
    8b7c:	103fe026 	beq	r2,zero,8b00 <_gp+0xffff2b2c>
    8b80:	84000044 	addi	r16,r16,1
    8b84:	0081ffc4 	movi	r2,2047
    8b88:	8080d226 	beq	r16,r2,8ed4 <__adddf3+0x5d8>
    8b8c:	00bfe034 	movhi	r2,65408
    8b90:	10bfffc4 	addi	r2,r2,-1
    8b94:	4090703a 	and	r8,r8,r2
    8b98:	880ad07a 	srli	r5,r17,1
    8b9c:	400897fa 	slli	r4,r8,31
    8ba0:	88c0004c 	andi	r3,r17,1
    8ba4:	28e2b03a 	or	r17,r5,r3
    8ba8:	4010d07a 	srli	r8,r8,1
    8bac:	2462b03a 	or	r17,r4,r17
    8bb0:	003f7106 	br	8978 <_gp+0xffff29a4>
    8bb4:	4088b03a 	or	r4,r8,r2
    8bb8:	20014526 	beq	r4,zero,90d0 <__adddf3+0x7d4>
    8bbc:	01000434 	movhi	r4,16
    8bc0:	42000234 	orhi	r8,r8,8
    8bc4:	213fffc4 	addi	r4,r4,-1
    8bc8:	4110703a 	and	r8,r8,r4
    8bcc:	003f8206 	br	89d8 <_gp+0xffff2a04>
    8bd0:	18ffffc4 	addi	r3,r3,-1
    8bd4:	1800491e 	bne	r3,zero,8cfc <__adddf3+0x400>
    8bd8:	898bc83a 	sub	r5,r17,r6
    8bdc:	8963803a 	cmpltu	r17,r17,r5
    8be0:	4251c83a 	sub	r8,r8,r9
    8be4:	4451c83a 	sub	r8,r8,r17
    8be8:	2823883a 	mov	r17,r5
    8bec:	003f9f06 	br	8a6c <_gp+0xffff2a98>
    8bf0:	4984b03a 	or	r2,r9,r6
    8bf4:	103f6026 	beq	r2,zero,8978 <_gp+0xffff29a4>
    8bf8:	213fffc4 	addi	r4,r4,-1
    8bfc:	2000931e 	bne	r4,zero,8e4c <__adddf3+0x550>
    8c00:	898d883a 	add	r6,r17,r6
    8c04:	3463803a 	cmpltu	r17,r6,r17
    8c08:	4251883a 	add	r8,r8,r9
    8c0c:	8a11883a 	add	r8,r17,r8
    8c10:	3023883a 	mov	r17,r6
    8c14:	003fd806 	br	8b78 <_gp+0xffff2ba4>
    8c18:	1800541e 	bne	r3,zero,8d6c <__adddf3+0x470>
    8c1c:	80800044 	addi	r2,r16,1
    8c20:	1081ffcc 	andi	r2,r2,2047
    8c24:	00c00044 	movi	r3,1
    8c28:	1880a00e 	bge	r3,r2,8eac <__adddf3+0x5b0>
    8c2c:	8989c83a 	sub	r4,r17,r6
    8c30:	8905803a 	cmpltu	r2,r17,r4
    8c34:	4267c83a 	sub	r19,r8,r9
    8c38:	98a7c83a 	sub	r19,r19,r2
    8c3c:	9880202c 	andhi	r2,r19,128
    8c40:	10006326 	beq	r2,zero,8dd0 <__adddf3+0x4d4>
    8c44:	3463c83a 	sub	r17,r6,r17
    8c48:	4a07c83a 	sub	r3,r9,r8
    8c4c:	344d803a 	cmpltu	r6,r6,r17
    8c50:	19a7c83a 	sub	r19,r3,r6
    8c54:	3825883a 	mov	r18,r7
    8c58:	983f8a1e 	bne	r19,zero,8a84 <_gp+0xffff2ab0>
    8c5c:	8809883a 	mov	r4,r17
    8c60:	000a5f00 	call	a5f0 <__clzsi2>
    8c64:	10800804 	addi	r2,r2,32
    8c68:	10fffe04 	addi	r3,r2,-8
    8c6c:	010007c4 	movi	r4,31
    8c70:	20ff890e 	bge	r4,r3,8a98 <_gp+0xffff2ac4>
    8c74:	10bff604 	addi	r2,r2,-40
    8c78:	8884983a 	sll	r2,r17,r2
    8c7c:	0023883a 	mov	r17,zero
    8c80:	1c3f8c0e 	bge	r3,r16,8ab4 <_gp+0xffff2ae0>
    8c84:	023fe034 	movhi	r8,65408
    8c88:	423fffc4 	addi	r8,r8,-1
    8c8c:	80e1c83a 	sub	r16,r16,r3
    8c90:	1210703a 	and	r8,r2,r8
    8c94:	003f3806 	br	8978 <_gp+0xffff29a4>
    8c98:	9007883a 	mov	r3,r18
    8c9c:	0011883a 	mov	r8,zero
    8ca0:	0005883a 	mov	r2,zero
    8ca4:	003f4c06 	br	89d8 <_gp+0xffff2a04>
    8ca8:	498cb03a 	or	r6,r9,r6
    8cac:	300cc03a 	cmpne	r6,r6,zero
    8cb0:	0007883a 	mov	r3,zero
    8cb4:	003f6806 	br	8a58 <_gp+0xffff2a84>
    8cb8:	20009c1e 	bne	r4,zero,8f2c <__adddf3+0x630>
    8cbc:	80800044 	addi	r2,r16,1
    8cc0:	1141ffcc 	andi	r5,r2,2047
    8cc4:	01000044 	movi	r4,1
    8cc8:	2140670e 	bge	r4,r5,8e68 <__adddf3+0x56c>
    8ccc:	0101ffc4 	movi	r4,2047
    8cd0:	11007f26 	beq	r2,r4,8ed0 <__adddf3+0x5d4>
    8cd4:	898d883a 	add	r6,r17,r6
    8cd8:	4247883a 	add	r3,r8,r9
    8cdc:	3451803a 	cmpltu	r8,r6,r17
    8ce0:	40d1883a 	add	r8,r8,r3
    8ce4:	402297fa 	slli	r17,r8,31
    8ce8:	300cd07a 	srli	r6,r6,1
    8cec:	4010d07a 	srli	r8,r8,1
    8cf0:	1021883a 	mov	r16,r2
    8cf4:	89a2b03a 	or	r17,r17,r6
    8cf8:	003f1f06 	br	8978 <_gp+0xffff29a4>
    8cfc:	0081ffc4 	movi	r2,2047
    8d00:	80bf481e 	bne	r16,r2,8a24 <_gp+0xffff2a50>
    8d04:	003f1c06 	br	8978 <_gp+0xffff29a4>
    8d08:	843ff844 	addi	r16,r16,-31
    8d0c:	01000804 	movi	r4,32
    8d10:	1406d83a 	srl	r3,r2,r16
    8d14:	41005026 	beq	r8,r4,8e58 <__adddf3+0x55c>
    8d18:	01001004 	movi	r4,64
    8d1c:	2211c83a 	sub	r8,r4,r8
    8d20:	1204983a 	sll	r2,r2,r8
    8d24:	88a2b03a 	or	r17,r17,r2
    8d28:	8822c03a 	cmpne	r17,r17,zero
    8d2c:	1c62b03a 	or	r17,r3,r17
    8d30:	0011883a 	mov	r8,zero
    8d34:	0021883a 	mov	r16,zero
    8d38:	003f7106 	br	8b00 <_gp+0xffff2b2c>
    8d3c:	193ff804 	addi	r4,r3,-32
    8d40:	00800804 	movi	r2,32
    8d44:	4908d83a 	srl	r4,r9,r4
    8d48:	18804526 	beq	r3,r2,8e60 <__adddf3+0x564>
    8d4c:	00801004 	movi	r2,64
    8d50:	10c5c83a 	sub	r2,r2,r3
    8d54:	4886983a 	sll	r3,r9,r2
    8d58:	198cb03a 	or	r6,r3,r6
    8d5c:	300cc03a 	cmpne	r6,r6,zero
    8d60:	218cb03a 	or	r6,r4,r6
    8d64:	0007883a 	mov	r3,zero
    8d68:	003f3b06 	br	8a58 <_gp+0xffff2a84>
    8d6c:	80002a26 	beq	r16,zero,8e18 <__adddf3+0x51c>
    8d70:	0101ffc4 	movi	r4,2047
    8d74:	11006826 	beq	r2,r4,8f18 <__adddf3+0x61c>
    8d78:	00c7c83a 	sub	r3,zero,r3
    8d7c:	42002034 	orhi	r8,r8,128
    8d80:	01000e04 	movi	r4,56
    8d84:	20c07c16 	blt	r4,r3,8f78 <__adddf3+0x67c>
    8d88:	010007c4 	movi	r4,31
    8d8c:	20c0da16 	blt	r4,r3,90f8 <__adddf3+0x7fc>
    8d90:	01000804 	movi	r4,32
    8d94:	20c9c83a 	sub	r4,r4,r3
    8d98:	4114983a 	sll	r10,r8,r4
    8d9c:	88cad83a 	srl	r5,r17,r3
    8da0:	8908983a 	sll	r4,r17,r4
    8da4:	40c6d83a 	srl	r3,r8,r3
    8da8:	5162b03a 	or	r17,r10,r5
    8dac:	2008c03a 	cmpne	r4,r4,zero
    8db0:	8922b03a 	or	r17,r17,r4
    8db4:	3463c83a 	sub	r17,r6,r17
    8db8:	48c7c83a 	sub	r3,r9,r3
    8dbc:	344d803a 	cmpltu	r6,r6,r17
    8dc0:	1991c83a 	sub	r8,r3,r6
    8dc4:	1021883a 	mov	r16,r2
    8dc8:	3825883a 	mov	r18,r7
    8dcc:	003f2706 	br	8a6c <_gp+0xffff2a98>
    8dd0:	24d0b03a 	or	r8,r4,r19
    8dd4:	40001b1e 	bne	r8,zero,8e44 <__adddf3+0x548>
    8dd8:	0005883a 	mov	r2,zero
    8ddc:	0007883a 	mov	r3,zero
    8de0:	0021883a 	mov	r16,zero
    8de4:	003f4d06 	br	8b1c <_gp+0xffff2b48>
    8de8:	008007c4 	movi	r2,31
    8dec:	11003c16 	blt	r2,r4,8ee0 <__adddf3+0x5e4>
    8df0:	00800804 	movi	r2,32
    8df4:	1105c83a 	sub	r2,r2,r4
    8df8:	488e983a 	sll	r7,r9,r2
    8dfc:	310ad83a 	srl	r5,r6,r4
    8e00:	3084983a 	sll	r2,r6,r2
    8e04:	4912d83a 	srl	r9,r9,r4
    8e08:	394ab03a 	or	r5,r7,r5
    8e0c:	1004c03a 	cmpne	r2,r2,zero
    8e10:	288ab03a 	or	r5,r5,r2
    8e14:	003f5306 	br	8b64 <_gp+0xffff2b90>
    8e18:	4448b03a 	or	r4,r8,r17
    8e1c:	20003e26 	beq	r4,zero,8f18 <__adddf3+0x61c>
    8e20:	00c6303a 	nor	r3,zero,r3
    8e24:	18003a1e 	bne	r3,zero,8f10 <__adddf3+0x614>
    8e28:	3463c83a 	sub	r17,r6,r17
    8e2c:	4a07c83a 	sub	r3,r9,r8
    8e30:	344d803a 	cmpltu	r6,r6,r17
    8e34:	1991c83a 	sub	r8,r3,r6
    8e38:	1021883a 	mov	r16,r2
    8e3c:	3825883a 	mov	r18,r7
    8e40:	003f0a06 	br	8a6c <_gp+0xffff2a98>
    8e44:	2023883a 	mov	r17,r4
    8e48:	003f0d06 	br	8a80 <_gp+0xffff2aac>
    8e4c:	0081ffc4 	movi	r2,2047
    8e50:	80bf3f1e 	bne	r16,r2,8b50 <_gp+0xffff2b7c>
    8e54:	003ec806 	br	8978 <_gp+0xffff29a4>
    8e58:	0005883a 	mov	r2,zero
    8e5c:	003fb106 	br	8d24 <_gp+0xffff2d50>
    8e60:	0007883a 	mov	r3,zero
    8e64:	003fbc06 	br	8d58 <_gp+0xffff2d84>
    8e68:	4444b03a 	or	r2,r8,r17
    8e6c:	8000871e 	bne	r16,zero,908c <__adddf3+0x790>
    8e70:	1000ba26 	beq	r2,zero,915c <__adddf3+0x860>
    8e74:	4984b03a 	or	r2,r9,r6
    8e78:	103ebf26 	beq	r2,zero,8978 <_gp+0xffff29a4>
    8e7c:	8985883a 	add	r2,r17,r6
    8e80:	4247883a 	add	r3,r8,r9
    8e84:	1451803a 	cmpltu	r8,r2,r17
    8e88:	40d1883a 	add	r8,r8,r3
    8e8c:	40c0202c 	andhi	r3,r8,128
    8e90:	1023883a 	mov	r17,r2
    8e94:	183f1a26 	beq	r3,zero,8b00 <_gp+0xffff2b2c>
    8e98:	00bfe034 	movhi	r2,65408
    8e9c:	10bfffc4 	addi	r2,r2,-1
    8ea0:	2021883a 	mov	r16,r4
    8ea4:	4090703a 	and	r8,r8,r2
    8ea8:	003eb306 	br	8978 <_gp+0xffff29a4>
    8eac:	4444b03a 	or	r2,r8,r17
    8eb0:	8000291e 	bne	r16,zero,8f58 <__adddf3+0x65c>
    8eb4:	10004b1e 	bne	r2,zero,8fe4 <__adddf3+0x6e8>
    8eb8:	4990b03a 	or	r8,r9,r6
    8ebc:	40008b26 	beq	r8,zero,90ec <__adddf3+0x7f0>
    8ec0:	4811883a 	mov	r8,r9
    8ec4:	3023883a 	mov	r17,r6
    8ec8:	3825883a 	mov	r18,r7
    8ecc:	003eaa06 	br	8978 <_gp+0xffff29a4>
    8ed0:	1021883a 	mov	r16,r2
    8ed4:	0011883a 	mov	r8,zero
    8ed8:	0005883a 	mov	r2,zero
    8edc:	003f0f06 	br	8b1c <_gp+0xffff2b48>
    8ee0:	217ff804 	addi	r5,r4,-32
    8ee4:	00800804 	movi	r2,32
    8ee8:	494ad83a 	srl	r5,r9,r5
    8eec:	20807d26 	beq	r4,r2,90e4 <__adddf3+0x7e8>
    8ef0:	00801004 	movi	r2,64
    8ef4:	1109c83a 	sub	r4,r2,r4
    8ef8:	4912983a 	sll	r9,r9,r4
    8efc:	498cb03a 	or	r6,r9,r6
    8f00:	300cc03a 	cmpne	r6,r6,zero
    8f04:	298ab03a 	or	r5,r5,r6
    8f08:	0013883a 	mov	r9,zero
    8f0c:	003f1506 	br	8b64 <_gp+0xffff2b90>
    8f10:	0101ffc4 	movi	r4,2047
    8f14:	113f9a1e 	bne	r2,r4,8d80 <_gp+0xffff2dac>
    8f18:	4811883a 	mov	r8,r9
    8f1c:	3023883a 	mov	r17,r6
    8f20:	1021883a 	mov	r16,r2
    8f24:	3825883a 	mov	r18,r7
    8f28:	003e9306 	br	8978 <_gp+0xffff29a4>
    8f2c:	8000161e 	bne	r16,zero,8f88 <__adddf3+0x68c>
    8f30:	444ab03a 	or	r5,r8,r17
    8f34:	28005126 	beq	r5,zero,907c <__adddf3+0x780>
    8f38:	0108303a 	nor	r4,zero,r4
    8f3c:	20004d1e 	bne	r4,zero,9074 <__adddf3+0x778>
    8f40:	89a3883a 	add	r17,r17,r6
    8f44:	4253883a 	add	r9,r8,r9
    8f48:	898d803a 	cmpltu	r6,r17,r6
    8f4c:	3251883a 	add	r8,r6,r9
    8f50:	1021883a 	mov	r16,r2
    8f54:	003f0806 	br	8b78 <_gp+0xffff2ba4>
    8f58:	1000301e 	bne	r2,zero,901c <__adddf3+0x720>
    8f5c:	4984b03a 	or	r2,r9,r6
    8f60:	10007126 	beq	r2,zero,9128 <__adddf3+0x82c>
    8f64:	4811883a 	mov	r8,r9
    8f68:	3023883a 	mov	r17,r6
    8f6c:	3825883a 	mov	r18,r7
    8f70:	0401ffc4 	movi	r16,2047
    8f74:	003e8006 	br	8978 <_gp+0xffff29a4>
    8f78:	4462b03a 	or	r17,r8,r17
    8f7c:	8822c03a 	cmpne	r17,r17,zero
    8f80:	0007883a 	mov	r3,zero
    8f84:	003f8b06 	br	8db4 <_gp+0xffff2de0>
    8f88:	0141ffc4 	movi	r5,2047
    8f8c:	11403b26 	beq	r2,r5,907c <__adddf3+0x780>
    8f90:	0109c83a 	sub	r4,zero,r4
    8f94:	42002034 	orhi	r8,r8,128
    8f98:	01400e04 	movi	r5,56
    8f9c:	29006716 	blt	r5,r4,913c <__adddf3+0x840>
    8fa0:	014007c4 	movi	r5,31
    8fa4:	29007016 	blt	r5,r4,9168 <__adddf3+0x86c>
    8fa8:	01400804 	movi	r5,32
    8fac:	290bc83a 	sub	r5,r5,r4
    8fb0:	4154983a 	sll	r10,r8,r5
    8fb4:	890ed83a 	srl	r7,r17,r4
    8fb8:	894a983a 	sll	r5,r17,r5
    8fbc:	4108d83a 	srl	r4,r8,r4
    8fc0:	51e2b03a 	or	r17,r10,r7
    8fc4:	280ac03a 	cmpne	r5,r5,zero
    8fc8:	8962b03a 	or	r17,r17,r5
    8fcc:	89a3883a 	add	r17,r17,r6
    8fd0:	2253883a 	add	r9,r4,r9
    8fd4:	898d803a 	cmpltu	r6,r17,r6
    8fd8:	3251883a 	add	r8,r6,r9
    8fdc:	1021883a 	mov	r16,r2
    8fe0:	003ee506 	br	8b78 <_gp+0xffff2ba4>
    8fe4:	4984b03a 	or	r2,r9,r6
    8fe8:	103e6326 	beq	r2,zero,8978 <_gp+0xffff29a4>
    8fec:	8987c83a 	sub	r3,r17,r6
    8ff0:	88c9803a 	cmpltu	r4,r17,r3
    8ff4:	4245c83a 	sub	r2,r8,r9
    8ff8:	1105c83a 	sub	r2,r2,r4
    8ffc:	1100202c 	andhi	r4,r2,128
    9000:	203ebb26 	beq	r4,zero,8af0 <_gp+0xffff2b1c>
    9004:	3463c83a 	sub	r17,r6,r17
    9008:	4a07c83a 	sub	r3,r9,r8
    900c:	344d803a 	cmpltu	r6,r6,r17
    9010:	1991c83a 	sub	r8,r3,r6
    9014:	3825883a 	mov	r18,r7
    9018:	003e5706 	br	8978 <_gp+0xffff29a4>
    901c:	4984b03a 	or	r2,r9,r6
    9020:	10002e26 	beq	r2,zero,90dc <__adddf3+0x7e0>
    9024:	4004d0fa 	srli	r2,r8,3
    9028:	8822d0fa 	srli	r17,r17,3
    902c:	4010977a 	slli	r8,r8,29
    9030:	10c0022c 	andhi	r3,r2,8
    9034:	4462b03a 	or	r17,r8,r17
    9038:	18000826 	beq	r3,zero,905c <__adddf3+0x760>
    903c:	4808d0fa 	srli	r4,r9,3
    9040:	20c0022c 	andhi	r3,r4,8
    9044:	1800051e 	bne	r3,zero,905c <__adddf3+0x760>
    9048:	300cd0fa 	srli	r6,r6,3
    904c:	4806977a 	slli	r3,r9,29
    9050:	2005883a 	mov	r2,r4
    9054:	3825883a 	mov	r18,r7
    9058:	19a2b03a 	or	r17,r3,r6
    905c:	8810d77a 	srli	r8,r17,29
    9060:	100490fa 	slli	r2,r2,3
    9064:	882290fa 	slli	r17,r17,3
    9068:	0401ffc4 	movi	r16,2047
    906c:	4090b03a 	or	r8,r8,r2
    9070:	003e4106 	br	8978 <_gp+0xffff29a4>
    9074:	0141ffc4 	movi	r5,2047
    9078:	117fc71e 	bne	r2,r5,8f98 <_gp+0xffff2fc4>
    907c:	4811883a 	mov	r8,r9
    9080:	3023883a 	mov	r17,r6
    9084:	1021883a 	mov	r16,r2
    9088:	003e3b06 	br	8978 <_gp+0xffff29a4>
    908c:	10002f26 	beq	r2,zero,914c <__adddf3+0x850>
    9090:	4984b03a 	or	r2,r9,r6
    9094:	10001126 	beq	r2,zero,90dc <__adddf3+0x7e0>
    9098:	4004d0fa 	srli	r2,r8,3
    909c:	8822d0fa 	srli	r17,r17,3
    90a0:	4010977a 	slli	r8,r8,29
    90a4:	10c0022c 	andhi	r3,r2,8
    90a8:	4462b03a 	or	r17,r8,r17
    90ac:	183feb26 	beq	r3,zero,905c <_gp+0xffff3088>
    90b0:	4808d0fa 	srli	r4,r9,3
    90b4:	20c0022c 	andhi	r3,r4,8
    90b8:	183fe81e 	bne	r3,zero,905c <_gp+0xffff3088>
    90bc:	300cd0fa 	srli	r6,r6,3
    90c0:	4806977a 	slli	r3,r9,29
    90c4:	2005883a 	mov	r2,r4
    90c8:	19a2b03a 	or	r17,r3,r6
    90cc:	003fe306 	br	905c <_gp+0xffff3088>
    90d0:	0011883a 	mov	r8,zero
    90d4:	0005883a 	mov	r2,zero
    90d8:	003e3f06 	br	89d8 <_gp+0xffff2a04>
    90dc:	0401ffc4 	movi	r16,2047
    90e0:	003e2506 	br	8978 <_gp+0xffff29a4>
    90e4:	0013883a 	mov	r9,zero
    90e8:	003f8406 	br	8efc <_gp+0xffff2f28>
    90ec:	0005883a 	mov	r2,zero
    90f0:	0007883a 	mov	r3,zero
    90f4:	003e8906 	br	8b1c <_gp+0xffff2b48>
    90f8:	197ff804 	addi	r5,r3,-32
    90fc:	01000804 	movi	r4,32
    9100:	414ad83a 	srl	r5,r8,r5
    9104:	19002426 	beq	r3,r4,9198 <__adddf3+0x89c>
    9108:	01001004 	movi	r4,64
    910c:	20c7c83a 	sub	r3,r4,r3
    9110:	40c6983a 	sll	r3,r8,r3
    9114:	1c46b03a 	or	r3,r3,r17
    9118:	1806c03a 	cmpne	r3,r3,zero
    911c:	28e2b03a 	or	r17,r5,r3
    9120:	0007883a 	mov	r3,zero
    9124:	003f2306 	br	8db4 <_gp+0xffff2de0>
    9128:	0007883a 	mov	r3,zero
    912c:	5811883a 	mov	r8,r11
    9130:	00bfffc4 	movi	r2,-1
    9134:	0401ffc4 	movi	r16,2047
    9138:	003e7806 	br	8b1c <_gp+0xffff2b48>
    913c:	4462b03a 	or	r17,r8,r17
    9140:	8822c03a 	cmpne	r17,r17,zero
    9144:	0009883a 	mov	r4,zero
    9148:	003fa006 	br	8fcc <_gp+0xffff2ff8>
    914c:	4811883a 	mov	r8,r9
    9150:	3023883a 	mov	r17,r6
    9154:	0401ffc4 	movi	r16,2047
    9158:	003e0706 	br	8978 <_gp+0xffff29a4>
    915c:	4811883a 	mov	r8,r9
    9160:	3023883a 	mov	r17,r6
    9164:	003e0406 	br	8978 <_gp+0xffff29a4>
    9168:	21fff804 	addi	r7,r4,-32
    916c:	01400804 	movi	r5,32
    9170:	41ced83a 	srl	r7,r8,r7
    9174:	21400a26 	beq	r4,r5,91a0 <__adddf3+0x8a4>
    9178:	01401004 	movi	r5,64
    917c:	2909c83a 	sub	r4,r5,r4
    9180:	4108983a 	sll	r4,r8,r4
    9184:	2448b03a 	or	r4,r4,r17
    9188:	2008c03a 	cmpne	r4,r4,zero
    918c:	3922b03a 	or	r17,r7,r4
    9190:	0009883a 	mov	r4,zero
    9194:	003f8d06 	br	8fcc <_gp+0xffff2ff8>
    9198:	0007883a 	mov	r3,zero
    919c:	003fdd06 	br	9114 <_gp+0xffff3140>
    91a0:	0009883a 	mov	r4,zero
    91a4:	003ff706 	br	9184 <_gp+0xffff31b0>

000091a8 <__gedf2>:
    91a8:	2804d53a 	srli	r2,r5,20
    91ac:	3806d53a 	srli	r3,r7,20
    91b0:	02000434 	movhi	r8,16
    91b4:	423fffc4 	addi	r8,r8,-1
    91b8:	1081ffcc 	andi	r2,r2,2047
    91bc:	0241ffc4 	movi	r9,2047
    91c0:	2a14703a 	and	r10,r5,r8
    91c4:	18c1ffcc 	andi	r3,r3,2047
    91c8:	3a10703a 	and	r8,r7,r8
    91cc:	280ad7fa 	srli	r5,r5,31
    91d0:	380ed7fa 	srli	r7,r7,31
    91d4:	12401d26 	beq	r2,r9,924c <__gedf2+0xa4>
    91d8:	0241ffc4 	movi	r9,2047
    91dc:	1a401226 	beq	r3,r9,9228 <__gedf2+0x80>
    91e0:	1000081e 	bne	r2,zero,9204 <__gedf2+0x5c>
    91e4:	2296b03a 	or	r11,r4,r10
    91e8:	5813003a 	cmpeq	r9,r11,zero
    91ec:	1800091e 	bne	r3,zero,9214 <__gedf2+0x6c>
    91f0:	3218b03a 	or	r12,r6,r8
    91f4:	6000071e 	bne	r12,zero,9214 <__gedf2+0x6c>
    91f8:	0005883a 	mov	r2,zero
    91fc:	5800101e 	bne	r11,zero,9240 <__gedf2+0x98>
    9200:	f800283a 	ret
    9204:	18000c1e 	bne	r3,zero,9238 <__gedf2+0x90>
    9208:	3212b03a 	or	r9,r6,r8
    920c:	48000c26 	beq	r9,zero,9240 <__gedf2+0x98>
    9210:	0013883a 	mov	r9,zero
    9214:	39c03fcc 	andi	r7,r7,255
    9218:	48000826 	beq	r9,zero,923c <__gedf2+0x94>
    921c:	38000926 	beq	r7,zero,9244 <__gedf2+0x9c>
    9220:	00800044 	movi	r2,1
    9224:	f800283a 	ret
    9228:	3212b03a 	or	r9,r6,r8
    922c:	483fec26 	beq	r9,zero,91e0 <_gp+0xffff320c>
    9230:	00bfff84 	movi	r2,-2
    9234:	f800283a 	ret
    9238:	39c03fcc 	andi	r7,r7,255
    923c:	29c00626 	beq	r5,r7,9258 <__gedf2+0xb0>
    9240:	283ff726 	beq	r5,zero,9220 <_gp+0xffff324c>
    9244:	00bfffc4 	movi	r2,-1
    9248:	f800283a 	ret
    924c:	2292b03a 	or	r9,r4,r10
    9250:	483fe126 	beq	r9,zero,91d8 <_gp+0xffff3204>
    9254:	003ff606 	br	9230 <_gp+0xffff325c>
    9258:	18bff916 	blt	r3,r2,9240 <_gp+0xffff326c>
    925c:	10c00316 	blt	r2,r3,926c <__gedf2+0xc4>
    9260:	42bff736 	bltu	r8,r10,9240 <_gp+0xffff326c>
    9264:	52000326 	beq	r10,r8,9274 <__gedf2+0xcc>
    9268:	5200042e 	bgeu	r10,r8,927c <__gedf2+0xd4>
    926c:	283fec1e 	bne	r5,zero,9220 <_gp+0xffff324c>
    9270:	003ff406 	br	9244 <_gp+0xffff3270>
    9274:	313ff236 	bltu	r6,r4,9240 <_gp+0xffff326c>
    9278:	21bffc36 	bltu	r4,r6,926c <_gp+0xffff3298>
    927c:	0005883a 	mov	r2,zero
    9280:	f800283a 	ret

00009284 <__muldf3>:
    9284:	deffee04 	addi	sp,sp,-72
    9288:	dd000c15 	stw	r20,48(sp)
    928c:	2828d53a 	srli	r20,r5,20
    9290:	ddc00f15 	stw	r23,60(sp)
    9294:	282ed7fa 	srli	r23,r5,31
    9298:	dc000815 	stw	r16,32(sp)
    929c:	04000434 	movhi	r16,16
    92a0:	dcc00b15 	stw	r19,44(sp)
    92a4:	843fffc4 	addi	r16,r16,-1
    92a8:	dfc01115 	stw	ra,68(sp)
    92ac:	df001015 	stw	fp,64(sp)
    92b0:	dd800e15 	stw	r22,56(sp)
    92b4:	dd400d15 	stw	r21,52(sp)
    92b8:	dc800a15 	stw	r18,40(sp)
    92bc:	dc400915 	stw	r17,36(sp)
    92c0:	a501ffcc 	andi	r20,r20,2047
    92c4:	2c20703a 	and	r16,r5,r16
    92c8:	b827883a 	mov	r19,r23
    92cc:	ba403fcc 	andi	r9,r23,255
    92d0:	a0006026 	beq	r20,zero,9454 <__muldf3+0x1d0>
    92d4:	0081ffc4 	movi	r2,2047
    92d8:	202d883a 	mov	r22,r4
    92dc:	a0803626 	beq	r20,r2,93b8 <__muldf3+0x134>
    92e0:	84000434 	orhi	r16,r16,16
    92e4:	200ad77a 	srli	r5,r4,29
    92e8:	800490fa 	slli	r2,r16,3
    92ec:	202c90fa 	slli	r22,r4,3
    92f0:	a53f0044 	addi	r20,r20,-1023
    92f4:	28a0b03a 	or	r16,r5,r2
    92f8:	002b883a 	mov	r21,zero
    92fc:	000b883a 	mov	r5,zero
    9300:	3804d53a 	srli	r2,r7,20
    9304:	3838d7fa 	srli	fp,r7,31
    9308:	04400434 	movhi	r17,16
    930c:	8c7fffc4 	addi	r17,r17,-1
    9310:	1081ffcc 	andi	r2,r2,2047
    9314:	3025883a 	mov	r18,r6
    9318:	3c62703a 	and	r17,r7,r17
    931c:	e2803fcc 	andi	r10,fp,255
    9320:	10006d26 	beq	r2,zero,94d8 <__muldf3+0x254>
    9324:	00c1ffc4 	movi	r3,2047
    9328:	10c06526 	beq	r2,r3,94c0 <__muldf3+0x23c>
    932c:	8c400434 	orhi	r17,r17,16
    9330:	300ed77a 	srli	r7,r6,29
    9334:	880690fa 	slli	r3,r17,3
    9338:	302490fa 	slli	r18,r6,3
    933c:	10bf0044 	addi	r2,r2,-1023
    9340:	38e2b03a 	or	r17,r7,r3
    9344:	000f883a 	mov	r7,zero
    9348:	a087883a 	add	r3,r20,r2
    934c:	010003c4 	movi	r4,15
    9350:	3d44b03a 	or	r2,r7,r21
    9354:	e5ccf03a 	xor	r6,fp,r23
    9358:	1a000044 	addi	r8,r3,1
    935c:	20809b36 	bltu	r4,r2,95cc <__muldf3+0x348>
    9360:	100490ba 	slli	r2,r2,2
    9364:	01000074 	movhi	r4,1
    9368:	2124de04 	addi	r4,r4,-27784
    936c:	1105883a 	add	r2,r2,r4
    9370:	10800017 	ldw	r2,0(r2)
    9374:	1000683a 	jmp	r2
    9378:	000095cc 	andi	zero,zero,599
    937c:	000093d8 	cmpnei	zero,zero,591
    9380:	000093d8 	cmpnei	zero,zero,591
    9384:	000093d4 	movui	zero,591
    9388:	000095a8 	cmpgeui	zero,zero,598
    938c:	000095a8 	cmpgeui	zero,zero,598
    9390:	00009590 	cmplti	zero,zero,598
    9394:	000093d4 	movui	zero,591
    9398:	000095a8 	cmpgeui	zero,zero,598
    939c:	00009590 	cmplti	zero,zero,598
    93a0:	000095a8 	cmpgeui	zero,zero,598
    93a4:	000093d4 	movui	zero,591
    93a8:	000095b8 	rdprs	zero,zero,598
    93ac:	000095b8 	rdprs	zero,zero,598
    93b0:	000095b8 	rdprs	zero,zero,598
    93b4:	00009918 	cmpnei	zero,zero,612
    93b8:	2404b03a 	or	r2,r4,r16
    93bc:	1000711e 	bne	r2,zero,9584 <__muldf3+0x300>
    93c0:	05400204 	movi	r21,8
    93c4:	0021883a 	mov	r16,zero
    93c8:	002d883a 	mov	r22,zero
    93cc:	01400084 	movi	r5,2
    93d0:	003fcb06 	br	9300 <_gp+0xffff332c>
    93d4:	500d883a 	mov	r6,r10
    93d8:	00800084 	movi	r2,2
    93dc:	38805926 	beq	r7,r2,9544 <__muldf3+0x2c0>
    93e0:	008000c4 	movi	r2,3
    93e4:	3881bb26 	beq	r7,r2,9ad4 <__muldf3+0x850>
    93e8:	00800044 	movi	r2,1
    93ec:	3881961e 	bne	r7,r2,9a48 <__muldf3+0x7c4>
    93f0:	3027883a 	mov	r19,r6
    93f4:	0005883a 	mov	r2,zero
    93f8:	0021883a 	mov	r16,zero
    93fc:	002d883a 	mov	r22,zero
    9400:	1004953a 	slli	r2,r2,20
    9404:	98c03fcc 	andi	r3,r19,255
    9408:	04400434 	movhi	r17,16
    940c:	8c7fffc4 	addi	r17,r17,-1
    9410:	180697fa 	slli	r3,r3,31
    9414:	8460703a 	and	r16,r16,r17
    9418:	80a0b03a 	or	r16,r16,r2
    941c:	80c6b03a 	or	r3,r16,r3
    9420:	b005883a 	mov	r2,r22
    9424:	dfc01117 	ldw	ra,68(sp)
    9428:	df001017 	ldw	fp,64(sp)
    942c:	ddc00f17 	ldw	r23,60(sp)
    9430:	dd800e17 	ldw	r22,56(sp)
    9434:	dd400d17 	ldw	r21,52(sp)
    9438:	dd000c17 	ldw	r20,48(sp)
    943c:	dcc00b17 	ldw	r19,44(sp)
    9440:	dc800a17 	ldw	r18,40(sp)
    9444:	dc400917 	ldw	r17,36(sp)
    9448:	dc000817 	ldw	r16,32(sp)
    944c:	dec01204 	addi	sp,sp,72
    9450:	f800283a 	ret
    9454:	2404b03a 	or	r2,r4,r16
    9458:	202b883a 	mov	r21,r4
    945c:	10004426 	beq	r2,zero,9570 <__muldf3+0x2ec>
    9460:	80015126 	beq	r16,zero,99a8 <__muldf3+0x724>
    9464:	8009883a 	mov	r4,r16
    9468:	d9800715 	stw	r6,28(sp)
    946c:	d9c00215 	stw	r7,8(sp)
    9470:	da400415 	stw	r9,16(sp)
    9474:	000a5f00 	call	a5f0 <__clzsi2>
    9478:	d9800717 	ldw	r6,28(sp)
    947c:	d9c00217 	ldw	r7,8(sp)
    9480:	da400417 	ldw	r9,16(sp)
    9484:	113ffd44 	addi	r4,r2,-11
    9488:	00c00704 	movi	r3,28
    948c:	19014216 	blt	r3,r4,9998 <__muldf3+0x714>
    9490:	00c00744 	movi	r3,29
    9494:	15bffe04 	addi	r22,r2,-8
    9498:	1907c83a 	sub	r3,r3,r4
    949c:	85a0983a 	sll	r16,r16,r22
    94a0:	a8c6d83a 	srl	r3,r21,r3
    94a4:	adac983a 	sll	r22,r21,r22
    94a8:	1c20b03a 	or	r16,r3,r16
    94ac:	1080fcc4 	addi	r2,r2,1011
    94b0:	00a9c83a 	sub	r20,zero,r2
    94b4:	002b883a 	mov	r21,zero
    94b8:	000b883a 	mov	r5,zero
    94bc:	003f9006 	br	9300 <_gp+0xffff332c>
    94c0:	3446b03a 	or	r3,r6,r17
    94c4:	1800281e 	bne	r3,zero,9568 <__muldf3+0x2e4>
    94c8:	0023883a 	mov	r17,zero
    94cc:	0025883a 	mov	r18,zero
    94d0:	01c00084 	movi	r7,2
    94d4:	003f9c06 	br	9348 <_gp+0xffff3374>
    94d8:	3446b03a 	or	r3,r6,r17
    94dc:	18001e26 	beq	r3,zero,9558 <__muldf3+0x2d4>
    94e0:	88012126 	beq	r17,zero,9968 <__muldf3+0x6e4>
    94e4:	8809883a 	mov	r4,r17
    94e8:	d9400215 	stw	r5,8(sp)
    94ec:	d9800715 	stw	r6,28(sp)
    94f0:	da400415 	stw	r9,16(sp)
    94f4:	da800315 	stw	r10,12(sp)
    94f8:	000a5f00 	call	a5f0 <__clzsi2>
    94fc:	d9400217 	ldw	r5,8(sp)
    9500:	d9800717 	ldw	r6,28(sp)
    9504:	da400417 	ldw	r9,16(sp)
    9508:	da800317 	ldw	r10,12(sp)
    950c:	113ffd44 	addi	r4,r2,-11
    9510:	00c00704 	movi	r3,28
    9514:	19011016 	blt	r3,r4,9958 <__muldf3+0x6d4>
    9518:	00c00744 	movi	r3,29
    951c:	14bffe04 	addi	r18,r2,-8
    9520:	1907c83a 	sub	r3,r3,r4
    9524:	8ca2983a 	sll	r17,r17,r18
    9528:	30c6d83a 	srl	r3,r6,r3
    952c:	34a4983a 	sll	r18,r6,r18
    9530:	1c62b03a 	or	r17,r3,r17
    9534:	1080fcc4 	addi	r2,r2,1011
    9538:	0085c83a 	sub	r2,zero,r2
    953c:	000f883a 	mov	r7,zero
    9540:	003f8106 	br	9348 <_gp+0xffff3374>
    9544:	3027883a 	mov	r19,r6
    9548:	0081ffc4 	movi	r2,2047
    954c:	0021883a 	mov	r16,zero
    9550:	002d883a 	mov	r22,zero
    9554:	003faa06 	br	9400 <_gp+0xffff342c>
    9558:	0023883a 	mov	r17,zero
    955c:	0025883a 	mov	r18,zero
    9560:	01c00044 	movi	r7,1
    9564:	003f7806 	br	9348 <_gp+0xffff3374>
    9568:	01c000c4 	movi	r7,3
    956c:	003f7606 	br	9348 <_gp+0xffff3374>
    9570:	05400104 	movi	r21,4
    9574:	0021883a 	mov	r16,zero
    9578:	002d883a 	mov	r22,zero
    957c:	01400044 	movi	r5,1
    9580:	003f5f06 	br	9300 <_gp+0xffff332c>
    9584:	05400304 	movi	r21,12
    9588:	014000c4 	movi	r5,3
    958c:	003f5c06 	br	9300 <_gp+0xffff332c>
    9590:	04000434 	movhi	r16,16
    9594:	0027883a 	mov	r19,zero
    9598:	843fffc4 	addi	r16,r16,-1
    959c:	05bfffc4 	movi	r22,-1
    95a0:	0081ffc4 	movi	r2,2047
    95a4:	003f9606 	br	9400 <_gp+0xffff342c>
    95a8:	8023883a 	mov	r17,r16
    95ac:	b025883a 	mov	r18,r22
    95b0:	280f883a 	mov	r7,r5
    95b4:	003f8806 	br	93d8 <_gp+0xffff3404>
    95b8:	8023883a 	mov	r17,r16
    95bc:	b025883a 	mov	r18,r22
    95c0:	480d883a 	mov	r6,r9
    95c4:	280f883a 	mov	r7,r5
    95c8:	003f8306 	br	93d8 <_gp+0xffff3404>
    95cc:	b026d43a 	srli	r19,r22,16
    95d0:	902ed43a 	srli	r23,r18,16
    95d4:	b5bfffcc 	andi	r22,r22,65535
    95d8:	94bfffcc 	andi	r18,r18,65535
    95dc:	b00b883a 	mov	r5,r22
    95e0:	9009883a 	mov	r4,r18
    95e4:	d8c00515 	stw	r3,20(sp)
    95e8:	d9800715 	stw	r6,28(sp)
    95ec:	da000615 	stw	r8,24(sp)
    95f0:	00088d40 	call	88d4 <__mulsi3>
    95f4:	980b883a 	mov	r5,r19
    95f8:	9009883a 	mov	r4,r18
    95fc:	1029883a 	mov	r20,r2
    9600:	00088d40 	call	88d4 <__mulsi3>
    9604:	b80b883a 	mov	r5,r23
    9608:	9809883a 	mov	r4,r19
    960c:	102b883a 	mov	r21,r2
    9610:	00088d40 	call	88d4 <__mulsi3>
    9614:	b809883a 	mov	r4,r23
    9618:	b00b883a 	mov	r5,r22
    961c:	1039883a 	mov	fp,r2
    9620:	00088d40 	call	88d4 <__mulsi3>
    9624:	a008d43a 	srli	r4,r20,16
    9628:	1545883a 	add	r2,r2,r21
    962c:	d8c00517 	ldw	r3,20(sp)
    9630:	2085883a 	add	r2,r4,r2
    9634:	d9800717 	ldw	r6,28(sp)
    9638:	da000617 	ldw	r8,24(sp)
    963c:	1540022e 	bgeu	r2,r21,9648 <__muldf3+0x3c4>
    9640:	01000074 	movhi	r4,1
    9644:	e139883a 	add	fp,fp,r4
    9648:	100e943a 	slli	r7,r2,16
    964c:	1004d43a 	srli	r2,r2,16
    9650:	882ad43a 	srli	r21,r17,16
    9654:	a53fffcc 	andi	r20,r20,65535
    9658:	8c7fffcc 	andi	r17,r17,65535
    965c:	3d29883a 	add	r20,r7,r20
    9660:	b00b883a 	mov	r5,r22
    9664:	8809883a 	mov	r4,r17
    9668:	d8c00515 	stw	r3,20(sp)
    966c:	d9800715 	stw	r6,28(sp)
    9670:	da000615 	stw	r8,24(sp)
    9674:	dd000115 	stw	r20,4(sp)
    9678:	d8800015 	stw	r2,0(sp)
    967c:	00088d40 	call	88d4 <__mulsi3>
    9680:	980b883a 	mov	r5,r19
    9684:	8809883a 	mov	r4,r17
    9688:	d8800215 	stw	r2,8(sp)
    968c:	00088d40 	call	88d4 <__mulsi3>
    9690:	9809883a 	mov	r4,r19
    9694:	a80b883a 	mov	r5,r21
    9698:	1029883a 	mov	r20,r2
    969c:	00088d40 	call	88d4 <__mulsi3>
    96a0:	b00b883a 	mov	r5,r22
    96a4:	a809883a 	mov	r4,r21
    96a8:	d8800415 	stw	r2,16(sp)
    96ac:	00088d40 	call	88d4 <__mulsi3>
    96b0:	d9c00217 	ldw	r7,8(sp)
    96b4:	1505883a 	add	r2,r2,r20
    96b8:	d8c00517 	ldw	r3,20(sp)
    96bc:	3826d43a 	srli	r19,r7,16
    96c0:	d9800717 	ldw	r6,28(sp)
    96c4:	da000617 	ldw	r8,24(sp)
    96c8:	9885883a 	add	r2,r19,r2
    96cc:	da400417 	ldw	r9,16(sp)
    96d0:	1500022e 	bgeu	r2,r20,96dc <__muldf3+0x458>
    96d4:	01000074 	movhi	r4,1
    96d8:	4913883a 	add	r9,r9,r4
    96dc:	1028d43a 	srli	r20,r2,16
    96e0:	1004943a 	slli	r2,r2,16
    96e4:	802cd43a 	srli	r22,r16,16
    96e8:	843fffcc 	andi	r16,r16,65535
    96ec:	3cffffcc 	andi	r19,r7,65535
    96f0:	9009883a 	mov	r4,r18
    96f4:	800b883a 	mov	r5,r16
    96f8:	a269883a 	add	r20,r20,r9
    96fc:	d8c00515 	stw	r3,20(sp)
    9700:	d9800715 	stw	r6,28(sp)
    9704:	da000615 	stw	r8,24(sp)
    9708:	14e7883a 	add	r19,r2,r19
    970c:	00088d40 	call	88d4 <__mulsi3>
    9710:	9009883a 	mov	r4,r18
    9714:	b00b883a 	mov	r5,r22
    9718:	d8800315 	stw	r2,12(sp)
    971c:	00088d40 	call	88d4 <__mulsi3>
    9720:	b809883a 	mov	r4,r23
    9724:	b00b883a 	mov	r5,r22
    9728:	d8800215 	stw	r2,8(sp)
    972c:	00088d40 	call	88d4 <__mulsi3>
    9730:	b80b883a 	mov	r5,r23
    9734:	8009883a 	mov	r4,r16
    9738:	d8800415 	stw	r2,16(sp)
    973c:	00088d40 	call	88d4 <__mulsi3>
    9740:	da800317 	ldw	r10,12(sp)
    9744:	d9c00217 	ldw	r7,8(sp)
    9748:	d9000017 	ldw	r4,0(sp)
    974c:	502ed43a 	srli	r23,r10,16
    9750:	11c5883a 	add	r2,r2,r7
    9754:	24e5883a 	add	r18,r4,r19
    9758:	b885883a 	add	r2,r23,r2
    975c:	d8c00517 	ldw	r3,20(sp)
    9760:	d9800717 	ldw	r6,28(sp)
    9764:	da000617 	ldw	r8,24(sp)
    9768:	da400417 	ldw	r9,16(sp)
    976c:	11c0022e 	bgeu	r2,r7,9778 <__muldf3+0x4f4>
    9770:	01000074 	movhi	r4,1
    9774:	4913883a 	add	r9,r9,r4
    9778:	100ed43a 	srli	r7,r2,16
    977c:	1004943a 	slli	r2,r2,16
    9780:	55ffffcc 	andi	r23,r10,65535
    9784:	3a53883a 	add	r9,r7,r9
    9788:	8809883a 	mov	r4,r17
    978c:	800b883a 	mov	r5,r16
    9790:	d8c00515 	stw	r3,20(sp)
    9794:	d9800715 	stw	r6,28(sp)
    9798:	da000615 	stw	r8,24(sp)
    979c:	da400415 	stw	r9,16(sp)
    97a0:	15ef883a 	add	r23,r2,r23
    97a4:	00088d40 	call	88d4 <__mulsi3>
    97a8:	8809883a 	mov	r4,r17
    97ac:	b00b883a 	mov	r5,r22
    97b0:	d8800215 	stw	r2,8(sp)
    97b4:	00088d40 	call	88d4 <__mulsi3>
    97b8:	b00b883a 	mov	r5,r22
    97bc:	a809883a 	mov	r4,r21
    97c0:	d8800315 	stw	r2,12(sp)
    97c4:	00088d40 	call	88d4 <__mulsi3>
    97c8:	8009883a 	mov	r4,r16
    97cc:	a80b883a 	mov	r5,r21
    97d0:	1023883a 	mov	r17,r2
    97d4:	00088d40 	call	88d4 <__mulsi3>
    97d8:	d9c00217 	ldw	r7,8(sp)
    97dc:	da800317 	ldw	r10,12(sp)
    97e0:	d8c00517 	ldw	r3,20(sp)
    97e4:	3808d43a 	srli	r4,r7,16
    97e8:	1285883a 	add	r2,r2,r10
    97ec:	d9800717 	ldw	r6,28(sp)
    97f0:	2085883a 	add	r2,r4,r2
    97f4:	da000617 	ldw	r8,24(sp)
    97f8:	da400417 	ldw	r9,16(sp)
    97fc:	1280022e 	bgeu	r2,r10,9808 <__muldf3+0x584>
    9800:	01000074 	movhi	r4,1
    9804:	8923883a 	add	r17,r17,r4
    9808:	1008943a 	slli	r4,r2,16
    980c:	39ffffcc 	andi	r7,r7,65535
    9810:	e4b9883a 	add	fp,fp,r18
    9814:	21cf883a 	add	r7,r4,r7
    9818:	e4e7803a 	cmpltu	r19,fp,r19
    981c:	3d0f883a 	add	r7,r7,r20
    9820:	bf39883a 	add	fp,r23,fp
    9824:	99c9883a 	add	r4,r19,r7
    9828:	e5ef803a 	cmpltu	r23,fp,r23
    982c:	490b883a 	add	r5,r9,r4
    9830:	1004d43a 	srli	r2,r2,16
    9834:	b965883a 	add	r18,r23,r5
    9838:	24c9803a 	cmpltu	r4,r4,r19
    983c:	3d29803a 	cmpltu	r20,r7,r20
    9840:	a128b03a 	or	r20,r20,r4
    9844:	95ef803a 	cmpltu	r23,r18,r23
    9848:	2a53803a 	cmpltu	r9,r5,r9
    984c:	a0a9883a 	add	r20,r20,r2
    9850:	4deeb03a 	or	r23,r9,r23
    9854:	a5ef883a 	add	r23,r20,r23
    9858:	bc63883a 	add	r17,r23,r17
    985c:	e004927a 	slli	r2,fp,9
    9860:	d9000117 	ldw	r4,4(sp)
    9864:	882e927a 	slli	r23,r17,9
    9868:	9022d5fa 	srli	r17,r18,23
    986c:	e038d5fa 	srli	fp,fp,23
    9870:	1104b03a 	or	r2,r2,r4
    9874:	9024927a 	slli	r18,r18,9
    9878:	1004c03a 	cmpne	r2,r2,zero
    987c:	bc62b03a 	or	r17,r23,r17
    9880:	1738b03a 	or	fp,r2,fp
    9884:	8880402c 	andhi	r2,r17,256
    9888:	e4a4b03a 	or	r18,fp,r18
    988c:	10000726 	beq	r2,zero,98ac <__muldf3+0x628>
    9890:	9006d07a 	srli	r3,r18,1
    9894:	880497fa 	slli	r2,r17,31
    9898:	9480004c 	andi	r18,r18,1
    989c:	8822d07a 	srli	r17,r17,1
    98a0:	1ca4b03a 	or	r18,r3,r18
    98a4:	14a4b03a 	or	r18,r2,r18
    98a8:	4007883a 	mov	r3,r8
    98ac:	1880ffc4 	addi	r2,r3,1023
    98b0:	0080460e 	bge	zero,r2,99cc <__muldf3+0x748>
    98b4:	910001cc 	andi	r4,r18,7
    98b8:	20000726 	beq	r4,zero,98d8 <__muldf3+0x654>
    98bc:	910003cc 	andi	r4,r18,15
    98c0:	01400104 	movi	r5,4
    98c4:	21400426 	beq	r4,r5,98d8 <__muldf3+0x654>
    98c8:	9149883a 	add	r4,r18,r5
    98cc:	24a5803a 	cmpltu	r18,r4,r18
    98d0:	8ca3883a 	add	r17,r17,r18
    98d4:	2025883a 	mov	r18,r4
    98d8:	8900402c 	andhi	r4,r17,256
    98dc:	20000426 	beq	r4,zero,98f0 <__muldf3+0x66c>
    98e0:	18810004 	addi	r2,r3,1024
    98e4:	00ffc034 	movhi	r3,65280
    98e8:	18ffffc4 	addi	r3,r3,-1
    98ec:	88e2703a 	and	r17,r17,r3
    98f0:	00c1ff84 	movi	r3,2046
    98f4:	18bf1316 	blt	r3,r2,9544 <_gp+0xffff3570>
    98f8:	882c977a 	slli	r22,r17,29
    98fc:	9024d0fa 	srli	r18,r18,3
    9900:	8822927a 	slli	r17,r17,9
    9904:	1081ffcc 	andi	r2,r2,2047
    9908:	b4acb03a 	or	r22,r22,r18
    990c:	8820d33a 	srli	r16,r17,12
    9910:	3027883a 	mov	r19,r6
    9914:	003eba06 	br	9400 <_gp+0xffff342c>
    9918:	8080022c 	andhi	r2,r16,8
    991c:	10000926 	beq	r2,zero,9944 <__muldf3+0x6c0>
    9920:	8880022c 	andhi	r2,r17,8
    9924:	1000071e 	bne	r2,zero,9944 <__muldf3+0x6c0>
    9928:	00800434 	movhi	r2,16
    992c:	8c000234 	orhi	r16,r17,8
    9930:	10bfffc4 	addi	r2,r2,-1
    9934:	e027883a 	mov	r19,fp
    9938:	80a0703a 	and	r16,r16,r2
    993c:	902d883a 	mov	r22,r18
    9940:	003f1706 	br	95a0 <_gp+0xffff35cc>
    9944:	00800434 	movhi	r2,16
    9948:	84000234 	orhi	r16,r16,8
    994c:	10bfffc4 	addi	r2,r2,-1
    9950:	80a0703a 	and	r16,r16,r2
    9954:	003f1206 	br	95a0 <_gp+0xffff35cc>
    9958:	147ff604 	addi	r17,r2,-40
    995c:	3462983a 	sll	r17,r6,r17
    9960:	0025883a 	mov	r18,zero
    9964:	003ef306 	br	9534 <_gp+0xffff3560>
    9968:	3009883a 	mov	r4,r6
    996c:	d9400215 	stw	r5,8(sp)
    9970:	d9800715 	stw	r6,28(sp)
    9974:	da400415 	stw	r9,16(sp)
    9978:	da800315 	stw	r10,12(sp)
    997c:	000a5f00 	call	a5f0 <__clzsi2>
    9980:	10800804 	addi	r2,r2,32
    9984:	da800317 	ldw	r10,12(sp)
    9988:	da400417 	ldw	r9,16(sp)
    998c:	d9800717 	ldw	r6,28(sp)
    9990:	d9400217 	ldw	r5,8(sp)
    9994:	003edd06 	br	950c <_gp+0xffff3538>
    9998:	143ff604 	addi	r16,r2,-40
    999c:	ac20983a 	sll	r16,r21,r16
    99a0:	002d883a 	mov	r22,zero
    99a4:	003ec106 	br	94ac <_gp+0xffff34d8>
    99a8:	d9800715 	stw	r6,28(sp)
    99ac:	d9c00215 	stw	r7,8(sp)
    99b0:	da400415 	stw	r9,16(sp)
    99b4:	000a5f00 	call	a5f0 <__clzsi2>
    99b8:	10800804 	addi	r2,r2,32
    99bc:	da400417 	ldw	r9,16(sp)
    99c0:	d9c00217 	ldw	r7,8(sp)
    99c4:	d9800717 	ldw	r6,28(sp)
    99c8:	003eae06 	br	9484 <_gp+0xffff34b0>
    99cc:	00c00044 	movi	r3,1
    99d0:	1887c83a 	sub	r3,r3,r2
    99d4:	01000e04 	movi	r4,56
    99d8:	20fe8516 	blt	r4,r3,93f0 <_gp+0xffff341c>
    99dc:	010007c4 	movi	r4,31
    99e0:	20c01b16 	blt	r4,r3,9a50 <__muldf3+0x7cc>
    99e4:	00800804 	movi	r2,32
    99e8:	10c5c83a 	sub	r2,r2,r3
    99ec:	888a983a 	sll	r5,r17,r2
    99f0:	90c8d83a 	srl	r4,r18,r3
    99f4:	9084983a 	sll	r2,r18,r2
    99f8:	88e2d83a 	srl	r17,r17,r3
    99fc:	2906b03a 	or	r3,r5,r4
    9a00:	1004c03a 	cmpne	r2,r2,zero
    9a04:	1886b03a 	or	r3,r3,r2
    9a08:	188001cc 	andi	r2,r3,7
    9a0c:	10000726 	beq	r2,zero,9a2c <__muldf3+0x7a8>
    9a10:	188003cc 	andi	r2,r3,15
    9a14:	01000104 	movi	r4,4
    9a18:	11000426 	beq	r2,r4,9a2c <__muldf3+0x7a8>
    9a1c:	1805883a 	mov	r2,r3
    9a20:	10c00104 	addi	r3,r2,4
    9a24:	1885803a 	cmpltu	r2,r3,r2
    9a28:	88a3883a 	add	r17,r17,r2
    9a2c:	8880202c 	andhi	r2,r17,128
    9a30:	10001c26 	beq	r2,zero,9aa4 <__muldf3+0x820>
    9a34:	3027883a 	mov	r19,r6
    9a38:	00800044 	movi	r2,1
    9a3c:	0021883a 	mov	r16,zero
    9a40:	002d883a 	mov	r22,zero
    9a44:	003e6e06 	br	9400 <_gp+0xffff342c>
    9a48:	4007883a 	mov	r3,r8
    9a4c:	003f9706 	br	98ac <_gp+0xffff38d8>
    9a50:	017ff844 	movi	r5,-31
    9a54:	2885c83a 	sub	r2,r5,r2
    9a58:	888ad83a 	srl	r5,r17,r2
    9a5c:	00800804 	movi	r2,32
    9a60:	18801a26 	beq	r3,r2,9acc <__muldf3+0x848>
    9a64:	01001004 	movi	r4,64
    9a68:	20c7c83a 	sub	r3,r4,r3
    9a6c:	88e2983a 	sll	r17,r17,r3
    9a70:	8ca4b03a 	or	r18,r17,r18
    9a74:	9004c03a 	cmpne	r2,r18,zero
    9a78:	2884b03a 	or	r2,r5,r2
    9a7c:	144001cc 	andi	r17,r2,7
    9a80:	88000d1e 	bne	r17,zero,9ab8 <__muldf3+0x834>
    9a84:	0021883a 	mov	r16,zero
    9a88:	102cd0fa 	srli	r22,r2,3
    9a8c:	3027883a 	mov	r19,r6
    9a90:	0005883a 	mov	r2,zero
    9a94:	b46cb03a 	or	r22,r22,r17
    9a98:	003e5906 	br	9400 <_gp+0xffff342c>
    9a9c:	1007883a 	mov	r3,r2
    9aa0:	0023883a 	mov	r17,zero
    9aa4:	8820927a 	slli	r16,r17,9
    9aa8:	1805883a 	mov	r2,r3
    9aac:	8822977a 	slli	r17,r17,29
    9ab0:	8020d33a 	srli	r16,r16,12
    9ab4:	003ff406 	br	9a88 <_gp+0xffff3ab4>
    9ab8:	10c003cc 	andi	r3,r2,15
    9abc:	01000104 	movi	r4,4
    9ac0:	193ff626 	beq	r3,r4,9a9c <_gp+0xffff3ac8>
    9ac4:	0023883a 	mov	r17,zero
    9ac8:	003fd506 	br	9a20 <_gp+0xffff3a4c>
    9acc:	0023883a 	mov	r17,zero
    9ad0:	003fe706 	br	9a70 <_gp+0xffff3a9c>
    9ad4:	00800434 	movhi	r2,16
    9ad8:	8c000234 	orhi	r16,r17,8
    9adc:	10bfffc4 	addi	r2,r2,-1
    9ae0:	3027883a 	mov	r19,r6
    9ae4:	80a0703a 	and	r16,r16,r2
    9ae8:	902d883a 	mov	r22,r18
    9aec:	003eac06 	br	95a0 <_gp+0xffff35cc>

00009af0 <__subdf3>:
    9af0:	02000434 	movhi	r8,16
    9af4:	423fffc4 	addi	r8,r8,-1
    9af8:	defffb04 	addi	sp,sp,-20
    9afc:	2a14703a 	and	r10,r5,r8
    9b00:	3812d53a 	srli	r9,r7,20
    9b04:	3a10703a 	and	r8,r7,r8
    9b08:	2006d77a 	srli	r3,r4,29
    9b0c:	3004d77a 	srli	r2,r6,29
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	501490fa 	slli	r10,r10,3
    9b18:	2820d53a 	srli	r16,r5,20
    9b1c:	401090fa 	slli	r8,r8,3
    9b20:	dc800215 	stw	r18,8(sp)
    9b24:	dc400115 	stw	r17,4(sp)
    9b28:	dfc00415 	stw	ra,16(sp)
    9b2c:	202290fa 	slli	r17,r4,3
    9b30:	dcc00315 	stw	r19,12(sp)
    9b34:	4a41ffcc 	andi	r9,r9,2047
    9b38:	0101ffc4 	movi	r4,2047
    9b3c:	2824d7fa 	srli	r18,r5,31
    9b40:	8401ffcc 	andi	r16,r16,2047
    9b44:	50c6b03a 	or	r3,r10,r3
    9b48:	380ed7fa 	srli	r7,r7,31
    9b4c:	408ab03a 	or	r5,r8,r2
    9b50:	300c90fa 	slli	r6,r6,3
    9b54:	49009626 	beq	r9,r4,9db0 <__subdf3+0x2c0>
    9b58:	39c0005c 	xori	r7,r7,1
    9b5c:	8245c83a 	sub	r2,r16,r9
    9b60:	3c807426 	beq	r7,r18,9d34 <__subdf3+0x244>
    9b64:	0080af0e 	bge	zero,r2,9e24 <__subdf3+0x334>
    9b68:	48002a1e 	bne	r9,zero,9c14 <__subdf3+0x124>
    9b6c:	2988b03a 	or	r4,r5,r6
    9b70:	20009a1e 	bne	r4,zero,9ddc <__subdf3+0x2ec>
    9b74:	888001cc 	andi	r2,r17,7
    9b78:	10000726 	beq	r2,zero,9b98 <__subdf3+0xa8>
    9b7c:	888003cc 	andi	r2,r17,15
    9b80:	01000104 	movi	r4,4
    9b84:	11000426 	beq	r2,r4,9b98 <__subdf3+0xa8>
    9b88:	890b883a 	add	r5,r17,r4
    9b8c:	2c63803a 	cmpltu	r17,r5,r17
    9b90:	1c47883a 	add	r3,r3,r17
    9b94:	2823883a 	mov	r17,r5
    9b98:	1880202c 	andhi	r2,r3,128
    9b9c:	10005926 	beq	r2,zero,9d04 <__subdf3+0x214>
    9ba0:	84000044 	addi	r16,r16,1
    9ba4:	0081ffc4 	movi	r2,2047
    9ba8:	8080be26 	beq	r16,r2,9ea4 <__subdf3+0x3b4>
    9bac:	017fe034 	movhi	r5,65408
    9bb0:	297fffc4 	addi	r5,r5,-1
    9bb4:	1946703a 	and	r3,r3,r5
    9bb8:	1804977a 	slli	r2,r3,29
    9bbc:	1806927a 	slli	r3,r3,9
    9bc0:	8822d0fa 	srli	r17,r17,3
    9bc4:	8401ffcc 	andi	r16,r16,2047
    9bc8:	180ad33a 	srli	r5,r3,12
    9bcc:	9100004c 	andi	r4,r18,1
    9bd0:	1444b03a 	or	r2,r2,r17
    9bd4:	80c1ffcc 	andi	r3,r16,2047
    9bd8:	1820953a 	slli	r16,r3,20
    9bdc:	20c03fcc 	andi	r3,r4,255
    9be0:	180897fa 	slli	r4,r3,31
    9be4:	00c00434 	movhi	r3,16
    9be8:	18ffffc4 	addi	r3,r3,-1
    9bec:	28c6703a 	and	r3,r5,r3
    9bf0:	1c06b03a 	or	r3,r3,r16
    9bf4:	1906b03a 	or	r3,r3,r4
    9bf8:	dfc00417 	ldw	ra,16(sp)
    9bfc:	dcc00317 	ldw	r19,12(sp)
    9c00:	dc800217 	ldw	r18,8(sp)
    9c04:	dc400117 	ldw	r17,4(sp)
    9c08:	dc000017 	ldw	r16,0(sp)
    9c0c:	dec00504 	addi	sp,sp,20
    9c10:	f800283a 	ret
    9c14:	0101ffc4 	movi	r4,2047
    9c18:	813fd626 	beq	r16,r4,9b74 <_gp+0xffff3ba0>
    9c1c:	29402034 	orhi	r5,r5,128
    9c20:	01000e04 	movi	r4,56
    9c24:	2080a316 	blt	r4,r2,9eb4 <__subdf3+0x3c4>
    9c28:	010007c4 	movi	r4,31
    9c2c:	2080c616 	blt	r4,r2,9f48 <__subdf3+0x458>
    9c30:	01000804 	movi	r4,32
    9c34:	2089c83a 	sub	r4,r4,r2
    9c38:	2910983a 	sll	r8,r5,r4
    9c3c:	308ed83a 	srl	r7,r6,r2
    9c40:	3108983a 	sll	r4,r6,r4
    9c44:	2884d83a 	srl	r2,r5,r2
    9c48:	41ccb03a 	or	r6,r8,r7
    9c4c:	2008c03a 	cmpne	r4,r4,zero
    9c50:	310cb03a 	or	r6,r6,r4
    9c54:	898dc83a 	sub	r6,r17,r6
    9c58:	89a3803a 	cmpltu	r17,r17,r6
    9c5c:	1887c83a 	sub	r3,r3,r2
    9c60:	1c47c83a 	sub	r3,r3,r17
    9c64:	3023883a 	mov	r17,r6
    9c68:	1880202c 	andhi	r2,r3,128
    9c6c:	10002326 	beq	r2,zero,9cfc <__subdf3+0x20c>
    9c70:	04c02034 	movhi	r19,128
    9c74:	9cffffc4 	addi	r19,r19,-1
    9c78:	1ce6703a 	and	r19,r3,r19
    9c7c:	98007a26 	beq	r19,zero,9e68 <__subdf3+0x378>
    9c80:	9809883a 	mov	r4,r19
    9c84:	000a5f00 	call	a5f0 <__clzsi2>
    9c88:	113ffe04 	addi	r4,r2,-8
    9c8c:	00c007c4 	movi	r3,31
    9c90:	19007b16 	blt	r3,r4,9e80 <__subdf3+0x390>
    9c94:	00800804 	movi	r2,32
    9c98:	1105c83a 	sub	r2,r2,r4
    9c9c:	8884d83a 	srl	r2,r17,r2
    9ca0:	9906983a 	sll	r3,r19,r4
    9ca4:	8922983a 	sll	r17,r17,r4
    9ca8:	10c4b03a 	or	r2,r2,r3
    9cac:	24007816 	blt	r4,r16,9e90 <__subdf3+0x3a0>
    9cb0:	2421c83a 	sub	r16,r4,r16
    9cb4:	80c00044 	addi	r3,r16,1
    9cb8:	010007c4 	movi	r4,31
    9cbc:	20c09516 	blt	r4,r3,9f14 <__subdf3+0x424>
    9cc0:	01400804 	movi	r5,32
    9cc4:	28cbc83a 	sub	r5,r5,r3
    9cc8:	88c8d83a 	srl	r4,r17,r3
    9ccc:	8962983a 	sll	r17,r17,r5
    9cd0:	114a983a 	sll	r5,r2,r5
    9cd4:	10c6d83a 	srl	r3,r2,r3
    9cd8:	8804c03a 	cmpne	r2,r17,zero
    9cdc:	290ab03a 	or	r5,r5,r4
    9ce0:	28a2b03a 	or	r17,r5,r2
    9ce4:	0021883a 	mov	r16,zero
    9ce8:	003fa206 	br	9b74 <_gp+0xffff3ba0>
    9cec:	2090b03a 	or	r8,r4,r2
    9cf0:	40018e26 	beq	r8,zero,a32c <__subdf3+0x83c>
    9cf4:	1007883a 	mov	r3,r2
    9cf8:	2023883a 	mov	r17,r4
    9cfc:	888001cc 	andi	r2,r17,7
    9d00:	103f9e1e 	bne	r2,zero,9b7c <_gp+0xffff3ba8>
    9d04:	1804977a 	slli	r2,r3,29
    9d08:	8822d0fa 	srli	r17,r17,3
    9d0c:	1810d0fa 	srli	r8,r3,3
    9d10:	9100004c 	andi	r4,r18,1
    9d14:	1444b03a 	or	r2,r2,r17
    9d18:	00c1ffc4 	movi	r3,2047
    9d1c:	80c02826 	beq	r16,r3,9dc0 <__subdf3+0x2d0>
    9d20:	01400434 	movhi	r5,16
    9d24:	297fffc4 	addi	r5,r5,-1
    9d28:	80e0703a 	and	r16,r16,r3
    9d2c:	414a703a 	and	r5,r8,r5
    9d30:	003fa806 	br	9bd4 <_gp+0xffff3c00>
    9d34:	0080630e 	bge	zero,r2,9ec4 <__subdf3+0x3d4>
    9d38:	48003026 	beq	r9,zero,9dfc <__subdf3+0x30c>
    9d3c:	0101ffc4 	movi	r4,2047
    9d40:	813f8c26 	beq	r16,r4,9b74 <_gp+0xffff3ba0>
    9d44:	29402034 	orhi	r5,r5,128
    9d48:	01000e04 	movi	r4,56
    9d4c:	2080a90e 	bge	r4,r2,9ff4 <__subdf3+0x504>
    9d50:	298cb03a 	or	r6,r5,r6
    9d54:	3012c03a 	cmpne	r9,r6,zero
    9d58:	0005883a 	mov	r2,zero
    9d5c:	4c53883a 	add	r9,r9,r17
    9d60:	4c63803a 	cmpltu	r17,r9,r17
    9d64:	10c7883a 	add	r3,r2,r3
    9d68:	88c7883a 	add	r3,r17,r3
    9d6c:	4823883a 	mov	r17,r9
    9d70:	1880202c 	andhi	r2,r3,128
    9d74:	1000d026 	beq	r2,zero,a0b8 <__subdf3+0x5c8>
    9d78:	84000044 	addi	r16,r16,1
    9d7c:	0081ffc4 	movi	r2,2047
    9d80:	8080fe26 	beq	r16,r2,a17c <__subdf3+0x68c>
    9d84:	00bfe034 	movhi	r2,65408
    9d88:	10bfffc4 	addi	r2,r2,-1
    9d8c:	1886703a 	and	r3,r3,r2
    9d90:	880ad07a 	srli	r5,r17,1
    9d94:	180497fa 	slli	r2,r3,31
    9d98:	8900004c 	andi	r4,r17,1
    9d9c:	2922b03a 	or	r17,r5,r4
    9da0:	1806d07a 	srli	r3,r3,1
    9da4:	1462b03a 	or	r17,r2,r17
    9da8:	3825883a 	mov	r18,r7
    9dac:	003f7106 	br	9b74 <_gp+0xffff3ba0>
    9db0:	2984b03a 	or	r2,r5,r6
    9db4:	103f6826 	beq	r2,zero,9b58 <_gp+0xffff3b84>
    9db8:	39c03fcc 	andi	r7,r7,255
    9dbc:	003f6706 	br	9b5c <_gp+0xffff3b88>
    9dc0:	4086b03a 	or	r3,r8,r2
    9dc4:	18015226 	beq	r3,zero,a310 <__subdf3+0x820>
    9dc8:	00c00434 	movhi	r3,16
    9dcc:	41400234 	orhi	r5,r8,8
    9dd0:	18ffffc4 	addi	r3,r3,-1
    9dd4:	28ca703a 	and	r5,r5,r3
    9dd8:	003f7e06 	br	9bd4 <_gp+0xffff3c00>
    9ddc:	10bfffc4 	addi	r2,r2,-1
    9de0:	1000491e 	bne	r2,zero,9f08 <__subdf3+0x418>
    9de4:	898fc83a 	sub	r7,r17,r6
    9de8:	89e3803a 	cmpltu	r17,r17,r7
    9dec:	1947c83a 	sub	r3,r3,r5
    9df0:	1c47c83a 	sub	r3,r3,r17
    9df4:	3823883a 	mov	r17,r7
    9df8:	003f9b06 	br	9c68 <_gp+0xffff3c94>
    9dfc:	2988b03a 	or	r4,r5,r6
    9e00:	203f5c26 	beq	r4,zero,9b74 <_gp+0xffff3ba0>
    9e04:	10bfffc4 	addi	r2,r2,-1
    9e08:	1000931e 	bne	r2,zero,a058 <__subdf3+0x568>
    9e0c:	898d883a 	add	r6,r17,r6
    9e10:	3463803a 	cmpltu	r17,r6,r17
    9e14:	1947883a 	add	r3,r3,r5
    9e18:	88c7883a 	add	r3,r17,r3
    9e1c:	3023883a 	mov	r17,r6
    9e20:	003fd306 	br	9d70 <_gp+0xffff3d9c>
    9e24:	1000541e 	bne	r2,zero,9f78 <__subdf3+0x488>
    9e28:	80800044 	addi	r2,r16,1
    9e2c:	1081ffcc 	andi	r2,r2,2047
    9e30:	01000044 	movi	r4,1
    9e34:	2080a20e 	bge	r4,r2,a0c0 <__subdf3+0x5d0>
    9e38:	8989c83a 	sub	r4,r17,r6
    9e3c:	8905803a 	cmpltu	r2,r17,r4
    9e40:	1967c83a 	sub	r19,r3,r5
    9e44:	98a7c83a 	sub	r19,r19,r2
    9e48:	9880202c 	andhi	r2,r19,128
    9e4c:	10006326 	beq	r2,zero,9fdc <__subdf3+0x4ec>
    9e50:	3463c83a 	sub	r17,r6,r17
    9e54:	28c7c83a 	sub	r3,r5,r3
    9e58:	344d803a 	cmpltu	r6,r6,r17
    9e5c:	19a7c83a 	sub	r19,r3,r6
    9e60:	3825883a 	mov	r18,r7
    9e64:	983f861e 	bne	r19,zero,9c80 <_gp+0xffff3cac>
    9e68:	8809883a 	mov	r4,r17
    9e6c:	000a5f00 	call	a5f0 <__clzsi2>
    9e70:	10800804 	addi	r2,r2,32
    9e74:	113ffe04 	addi	r4,r2,-8
    9e78:	00c007c4 	movi	r3,31
    9e7c:	193f850e 	bge	r3,r4,9c94 <_gp+0xffff3cc0>
    9e80:	10bff604 	addi	r2,r2,-40
    9e84:	8884983a 	sll	r2,r17,r2
    9e88:	0023883a 	mov	r17,zero
    9e8c:	243f880e 	bge	r4,r16,9cb0 <_gp+0xffff3cdc>
    9e90:	00ffe034 	movhi	r3,65408
    9e94:	18ffffc4 	addi	r3,r3,-1
    9e98:	8121c83a 	sub	r16,r16,r4
    9e9c:	10c6703a 	and	r3,r2,r3
    9ea0:	003f3406 	br	9b74 <_gp+0xffff3ba0>
    9ea4:	9100004c 	andi	r4,r18,1
    9ea8:	000b883a 	mov	r5,zero
    9eac:	0005883a 	mov	r2,zero
    9eb0:	003f4806 	br	9bd4 <_gp+0xffff3c00>
    9eb4:	298cb03a 	or	r6,r5,r6
    9eb8:	300cc03a 	cmpne	r6,r6,zero
    9ebc:	0005883a 	mov	r2,zero
    9ec0:	003f6406 	br	9c54 <_gp+0xffff3c80>
    9ec4:	10009a1e 	bne	r2,zero,a130 <__subdf3+0x640>
    9ec8:	82400044 	addi	r9,r16,1
    9ecc:	4881ffcc 	andi	r2,r9,2047
    9ed0:	02800044 	movi	r10,1
    9ed4:	5080670e 	bge	r10,r2,a074 <__subdf3+0x584>
    9ed8:	0081ffc4 	movi	r2,2047
    9edc:	4880af26 	beq	r9,r2,a19c <__subdf3+0x6ac>
    9ee0:	898d883a 	add	r6,r17,r6
    9ee4:	1945883a 	add	r2,r3,r5
    9ee8:	3447803a 	cmpltu	r3,r6,r17
    9eec:	1887883a 	add	r3,r3,r2
    9ef0:	182297fa 	slli	r17,r3,31
    9ef4:	300cd07a 	srli	r6,r6,1
    9ef8:	1806d07a 	srli	r3,r3,1
    9efc:	4821883a 	mov	r16,r9
    9f00:	89a2b03a 	or	r17,r17,r6
    9f04:	003f1b06 	br	9b74 <_gp+0xffff3ba0>
    9f08:	0101ffc4 	movi	r4,2047
    9f0c:	813f441e 	bne	r16,r4,9c20 <_gp+0xffff3c4c>
    9f10:	003f1806 	br	9b74 <_gp+0xffff3ba0>
    9f14:	843ff844 	addi	r16,r16,-31
    9f18:	01400804 	movi	r5,32
    9f1c:	1408d83a 	srl	r4,r2,r16
    9f20:	19405026 	beq	r3,r5,a064 <__subdf3+0x574>
    9f24:	01401004 	movi	r5,64
    9f28:	28c7c83a 	sub	r3,r5,r3
    9f2c:	10c4983a 	sll	r2,r2,r3
    9f30:	88a2b03a 	or	r17,r17,r2
    9f34:	8822c03a 	cmpne	r17,r17,zero
    9f38:	2462b03a 	or	r17,r4,r17
    9f3c:	0007883a 	mov	r3,zero
    9f40:	0021883a 	mov	r16,zero
    9f44:	003f6d06 	br	9cfc <_gp+0xffff3d28>
    9f48:	11fff804 	addi	r7,r2,-32
    9f4c:	01000804 	movi	r4,32
    9f50:	29ced83a 	srl	r7,r5,r7
    9f54:	11004526 	beq	r2,r4,a06c <__subdf3+0x57c>
    9f58:	01001004 	movi	r4,64
    9f5c:	2089c83a 	sub	r4,r4,r2
    9f60:	2904983a 	sll	r2,r5,r4
    9f64:	118cb03a 	or	r6,r2,r6
    9f68:	300cc03a 	cmpne	r6,r6,zero
    9f6c:	398cb03a 	or	r6,r7,r6
    9f70:	0005883a 	mov	r2,zero
    9f74:	003f3706 	br	9c54 <_gp+0xffff3c80>
    9f78:	80002a26 	beq	r16,zero,a024 <__subdf3+0x534>
    9f7c:	0101ffc4 	movi	r4,2047
    9f80:	49006626 	beq	r9,r4,a11c <__subdf3+0x62c>
    9f84:	0085c83a 	sub	r2,zero,r2
    9f88:	18c02034 	orhi	r3,r3,128
    9f8c:	01000e04 	movi	r4,56
    9f90:	20807e16 	blt	r4,r2,a18c <__subdf3+0x69c>
    9f94:	010007c4 	movi	r4,31
    9f98:	2080e716 	blt	r4,r2,a338 <__subdf3+0x848>
    9f9c:	01000804 	movi	r4,32
    9fa0:	2089c83a 	sub	r4,r4,r2
    9fa4:	1914983a 	sll	r10,r3,r4
    9fa8:	8890d83a 	srl	r8,r17,r2
    9fac:	8908983a 	sll	r4,r17,r4
    9fb0:	1884d83a 	srl	r2,r3,r2
    9fb4:	5222b03a 	or	r17,r10,r8
    9fb8:	2006c03a 	cmpne	r3,r4,zero
    9fbc:	88e2b03a 	or	r17,r17,r3
    9fc0:	3463c83a 	sub	r17,r6,r17
    9fc4:	2885c83a 	sub	r2,r5,r2
    9fc8:	344d803a 	cmpltu	r6,r6,r17
    9fcc:	1187c83a 	sub	r3,r2,r6
    9fd0:	4821883a 	mov	r16,r9
    9fd4:	3825883a 	mov	r18,r7
    9fd8:	003f2306 	br	9c68 <_gp+0xffff3c94>
    9fdc:	24d0b03a 	or	r8,r4,r19
    9fe0:	40001b1e 	bne	r8,zero,a050 <__subdf3+0x560>
    9fe4:	0005883a 	mov	r2,zero
    9fe8:	0009883a 	mov	r4,zero
    9fec:	0021883a 	mov	r16,zero
    9ff0:	003f4906 	br	9d18 <_gp+0xffff3d44>
    9ff4:	010007c4 	movi	r4,31
    9ff8:	20803a16 	blt	r4,r2,a0e4 <__subdf3+0x5f4>
    9ffc:	01000804 	movi	r4,32
    a000:	2089c83a 	sub	r4,r4,r2
    a004:	2912983a 	sll	r9,r5,r4
    a008:	3090d83a 	srl	r8,r6,r2
    a00c:	3108983a 	sll	r4,r6,r4
    a010:	2884d83a 	srl	r2,r5,r2
    a014:	4a12b03a 	or	r9,r9,r8
    a018:	2008c03a 	cmpne	r4,r4,zero
    a01c:	4912b03a 	or	r9,r9,r4
    a020:	003f4e06 	br	9d5c <_gp+0xffff3d88>
    a024:	1c48b03a 	or	r4,r3,r17
    a028:	20003c26 	beq	r4,zero,a11c <__subdf3+0x62c>
    a02c:	0084303a 	nor	r2,zero,r2
    a030:	1000381e 	bne	r2,zero,a114 <__subdf3+0x624>
    a034:	3463c83a 	sub	r17,r6,r17
    a038:	28c5c83a 	sub	r2,r5,r3
    a03c:	344d803a 	cmpltu	r6,r6,r17
    a040:	1187c83a 	sub	r3,r2,r6
    a044:	4821883a 	mov	r16,r9
    a048:	3825883a 	mov	r18,r7
    a04c:	003f0606 	br	9c68 <_gp+0xffff3c94>
    a050:	2023883a 	mov	r17,r4
    a054:	003f0906 	br	9c7c <_gp+0xffff3ca8>
    a058:	0101ffc4 	movi	r4,2047
    a05c:	813f3a1e 	bne	r16,r4,9d48 <_gp+0xffff3d74>
    a060:	003ec406 	br	9b74 <_gp+0xffff3ba0>
    a064:	0005883a 	mov	r2,zero
    a068:	003fb106 	br	9f30 <_gp+0xffff3f5c>
    a06c:	0005883a 	mov	r2,zero
    a070:	003fbc06 	br	9f64 <_gp+0xffff3f90>
    a074:	1c44b03a 	or	r2,r3,r17
    a078:	80008e1e 	bne	r16,zero,a2b4 <__subdf3+0x7c4>
    a07c:	1000c826 	beq	r2,zero,a3a0 <__subdf3+0x8b0>
    a080:	2984b03a 	or	r2,r5,r6
    a084:	103ebb26 	beq	r2,zero,9b74 <_gp+0xffff3ba0>
    a088:	8989883a 	add	r4,r17,r6
    a08c:	1945883a 	add	r2,r3,r5
    a090:	2447803a 	cmpltu	r3,r4,r17
    a094:	1887883a 	add	r3,r3,r2
    a098:	1880202c 	andhi	r2,r3,128
    a09c:	2023883a 	mov	r17,r4
    a0a0:	103f1626 	beq	r2,zero,9cfc <_gp+0xffff3d28>
    a0a4:	00bfe034 	movhi	r2,65408
    a0a8:	10bfffc4 	addi	r2,r2,-1
    a0ac:	5021883a 	mov	r16,r10
    a0b0:	1886703a 	and	r3,r3,r2
    a0b4:	003eaf06 	br	9b74 <_gp+0xffff3ba0>
    a0b8:	3825883a 	mov	r18,r7
    a0bc:	003f0f06 	br	9cfc <_gp+0xffff3d28>
    a0c0:	1c44b03a 	or	r2,r3,r17
    a0c4:	8000251e 	bne	r16,zero,a15c <__subdf3+0x66c>
    a0c8:	1000661e 	bne	r2,zero,a264 <__subdf3+0x774>
    a0cc:	2990b03a 	or	r8,r5,r6
    a0d0:	40009626 	beq	r8,zero,a32c <__subdf3+0x83c>
    a0d4:	2807883a 	mov	r3,r5
    a0d8:	3023883a 	mov	r17,r6
    a0dc:	3825883a 	mov	r18,r7
    a0e0:	003ea406 	br	9b74 <_gp+0xffff3ba0>
    a0e4:	127ff804 	addi	r9,r2,-32
    a0e8:	01000804 	movi	r4,32
    a0ec:	2a52d83a 	srl	r9,r5,r9
    a0f0:	11008c26 	beq	r2,r4,a324 <__subdf3+0x834>
    a0f4:	01001004 	movi	r4,64
    a0f8:	2085c83a 	sub	r2,r4,r2
    a0fc:	2884983a 	sll	r2,r5,r2
    a100:	118cb03a 	or	r6,r2,r6
    a104:	300cc03a 	cmpne	r6,r6,zero
    a108:	4992b03a 	or	r9,r9,r6
    a10c:	0005883a 	mov	r2,zero
    a110:	003f1206 	br	9d5c <_gp+0xffff3d88>
    a114:	0101ffc4 	movi	r4,2047
    a118:	493f9c1e 	bne	r9,r4,9f8c <_gp+0xffff3fb8>
    a11c:	2807883a 	mov	r3,r5
    a120:	3023883a 	mov	r17,r6
    a124:	4821883a 	mov	r16,r9
    a128:	3825883a 	mov	r18,r7
    a12c:	003e9106 	br	9b74 <_gp+0xffff3ba0>
    a130:	80001f1e 	bne	r16,zero,a1b0 <__subdf3+0x6c0>
    a134:	1c48b03a 	or	r4,r3,r17
    a138:	20005a26 	beq	r4,zero,a2a4 <__subdf3+0x7b4>
    a13c:	0084303a 	nor	r2,zero,r2
    a140:	1000561e 	bne	r2,zero,a29c <__subdf3+0x7ac>
    a144:	89a3883a 	add	r17,r17,r6
    a148:	1945883a 	add	r2,r3,r5
    a14c:	898d803a 	cmpltu	r6,r17,r6
    a150:	3087883a 	add	r3,r6,r2
    a154:	4821883a 	mov	r16,r9
    a158:	003f0506 	br	9d70 <_gp+0xffff3d9c>
    a15c:	10002b1e 	bne	r2,zero,a20c <__subdf3+0x71c>
    a160:	2984b03a 	or	r2,r5,r6
    a164:	10008026 	beq	r2,zero,a368 <__subdf3+0x878>
    a168:	2807883a 	mov	r3,r5
    a16c:	3023883a 	mov	r17,r6
    a170:	3825883a 	mov	r18,r7
    a174:	0401ffc4 	movi	r16,2047
    a178:	003e7e06 	br	9b74 <_gp+0xffff3ba0>
    a17c:	3809883a 	mov	r4,r7
    a180:	0011883a 	mov	r8,zero
    a184:	0005883a 	mov	r2,zero
    a188:	003ee306 	br	9d18 <_gp+0xffff3d44>
    a18c:	1c62b03a 	or	r17,r3,r17
    a190:	8822c03a 	cmpne	r17,r17,zero
    a194:	0005883a 	mov	r2,zero
    a198:	003f8906 	br	9fc0 <_gp+0xffff3fec>
    a19c:	3809883a 	mov	r4,r7
    a1a0:	4821883a 	mov	r16,r9
    a1a4:	0011883a 	mov	r8,zero
    a1a8:	0005883a 	mov	r2,zero
    a1ac:	003eda06 	br	9d18 <_gp+0xffff3d44>
    a1b0:	0101ffc4 	movi	r4,2047
    a1b4:	49003b26 	beq	r9,r4,a2a4 <__subdf3+0x7b4>
    a1b8:	0085c83a 	sub	r2,zero,r2
    a1bc:	18c02034 	orhi	r3,r3,128
    a1c0:	01000e04 	movi	r4,56
    a1c4:	20806e16 	blt	r4,r2,a380 <__subdf3+0x890>
    a1c8:	010007c4 	movi	r4,31
    a1cc:	20807716 	blt	r4,r2,a3ac <__subdf3+0x8bc>
    a1d0:	01000804 	movi	r4,32
    a1d4:	2089c83a 	sub	r4,r4,r2
    a1d8:	1914983a 	sll	r10,r3,r4
    a1dc:	8890d83a 	srl	r8,r17,r2
    a1e0:	8908983a 	sll	r4,r17,r4
    a1e4:	1884d83a 	srl	r2,r3,r2
    a1e8:	5222b03a 	or	r17,r10,r8
    a1ec:	2006c03a 	cmpne	r3,r4,zero
    a1f0:	88e2b03a 	or	r17,r17,r3
    a1f4:	89a3883a 	add	r17,r17,r6
    a1f8:	1145883a 	add	r2,r2,r5
    a1fc:	898d803a 	cmpltu	r6,r17,r6
    a200:	3087883a 	add	r3,r6,r2
    a204:	4821883a 	mov	r16,r9
    a208:	003ed906 	br	9d70 <_gp+0xffff3d9c>
    a20c:	2984b03a 	or	r2,r5,r6
    a210:	10004226 	beq	r2,zero,a31c <__subdf3+0x82c>
    a214:	1808d0fa 	srli	r4,r3,3
    a218:	8822d0fa 	srli	r17,r17,3
    a21c:	1806977a 	slli	r3,r3,29
    a220:	2080022c 	andhi	r2,r4,8
    a224:	1c62b03a 	or	r17,r3,r17
    a228:	10000826 	beq	r2,zero,a24c <__subdf3+0x75c>
    a22c:	2812d0fa 	srli	r9,r5,3
    a230:	4880022c 	andhi	r2,r9,8
    a234:	1000051e 	bne	r2,zero,a24c <__subdf3+0x75c>
    a238:	300cd0fa 	srli	r6,r6,3
    a23c:	2804977a 	slli	r2,r5,29
    a240:	4809883a 	mov	r4,r9
    a244:	3825883a 	mov	r18,r7
    a248:	11a2b03a 	or	r17,r2,r6
    a24c:	8806d77a 	srli	r3,r17,29
    a250:	200890fa 	slli	r4,r4,3
    a254:	882290fa 	slli	r17,r17,3
    a258:	0401ffc4 	movi	r16,2047
    a25c:	1906b03a 	or	r3,r3,r4
    a260:	003e4406 	br	9b74 <_gp+0xffff3ba0>
    a264:	2984b03a 	or	r2,r5,r6
    a268:	103e4226 	beq	r2,zero,9b74 <_gp+0xffff3ba0>
    a26c:	8989c83a 	sub	r4,r17,r6
    a270:	8911803a 	cmpltu	r8,r17,r4
    a274:	1945c83a 	sub	r2,r3,r5
    a278:	1205c83a 	sub	r2,r2,r8
    a27c:	1200202c 	andhi	r8,r2,128
    a280:	403e9a26 	beq	r8,zero,9cec <_gp+0xffff3d18>
    a284:	3463c83a 	sub	r17,r6,r17
    a288:	28c5c83a 	sub	r2,r5,r3
    a28c:	344d803a 	cmpltu	r6,r6,r17
    a290:	1187c83a 	sub	r3,r2,r6
    a294:	3825883a 	mov	r18,r7
    a298:	003e3606 	br	9b74 <_gp+0xffff3ba0>
    a29c:	0101ffc4 	movi	r4,2047
    a2a0:	493fc71e 	bne	r9,r4,a1c0 <_gp+0xffff41ec>
    a2a4:	2807883a 	mov	r3,r5
    a2a8:	3023883a 	mov	r17,r6
    a2ac:	4821883a 	mov	r16,r9
    a2b0:	003e3006 	br	9b74 <_gp+0xffff3ba0>
    a2b4:	10003626 	beq	r2,zero,a390 <__subdf3+0x8a0>
    a2b8:	2984b03a 	or	r2,r5,r6
    a2bc:	10001726 	beq	r2,zero,a31c <__subdf3+0x82c>
    a2c0:	1808d0fa 	srli	r4,r3,3
    a2c4:	8822d0fa 	srli	r17,r17,3
    a2c8:	1806977a 	slli	r3,r3,29
    a2cc:	2080022c 	andhi	r2,r4,8
    a2d0:	1c62b03a 	or	r17,r3,r17
    a2d4:	10000726 	beq	r2,zero,a2f4 <__subdf3+0x804>
    a2d8:	2812d0fa 	srli	r9,r5,3
    a2dc:	4880022c 	andhi	r2,r9,8
    a2e0:	1000041e 	bne	r2,zero,a2f4 <__subdf3+0x804>
    a2e4:	300cd0fa 	srli	r6,r6,3
    a2e8:	2804977a 	slli	r2,r5,29
    a2ec:	4809883a 	mov	r4,r9
    a2f0:	11a2b03a 	or	r17,r2,r6
    a2f4:	8806d77a 	srli	r3,r17,29
    a2f8:	200890fa 	slli	r4,r4,3
    a2fc:	882290fa 	slli	r17,r17,3
    a300:	3825883a 	mov	r18,r7
    a304:	1906b03a 	or	r3,r3,r4
    a308:	0401ffc4 	movi	r16,2047
    a30c:	003e1906 	br	9b74 <_gp+0xffff3ba0>
    a310:	000b883a 	mov	r5,zero
    a314:	0005883a 	mov	r2,zero
    a318:	003e2e06 	br	9bd4 <_gp+0xffff3c00>
    a31c:	0401ffc4 	movi	r16,2047
    a320:	003e1406 	br	9b74 <_gp+0xffff3ba0>
    a324:	0005883a 	mov	r2,zero
    a328:	003f7506 	br	a100 <_gp+0xffff412c>
    a32c:	0005883a 	mov	r2,zero
    a330:	0009883a 	mov	r4,zero
    a334:	003e7806 	br	9d18 <_gp+0xffff3d44>
    a338:	123ff804 	addi	r8,r2,-32
    a33c:	01000804 	movi	r4,32
    a340:	1a10d83a 	srl	r8,r3,r8
    a344:	11002526 	beq	r2,r4,a3dc <__subdf3+0x8ec>
    a348:	01001004 	movi	r4,64
    a34c:	2085c83a 	sub	r2,r4,r2
    a350:	1884983a 	sll	r2,r3,r2
    a354:	1444b03a 	or	r2,r2,r17
    a358:	1004c03a 	cmpne	r2,r2,zero
    a35c:	40a2b03a 	or	r17,r8,r2
    a360:	0005883a 	mov	r2,zero
    a364:	003f1606 	br	9fc0 <_gp+0xffff3fec>
    a368:	02000434 	movhi	r8,16
    a36c:	0009883a 	mov	r4,zero
    a370:	423fffc4 	addi	r8,r8,-1
    a374:	00bfffc4 	movi	r2,-1
    a378:	0401ffc4 	movi	r16,2047
    a37c:	003e6606 	br	9d18 <_gp+0xffff3d44>
    a380:	1c62b03a 	or	r17,r3,r17
    a384:	8822c03a 	cmpne	r17,r17,zero
    a388:	0005883a 	mov	r2,zero
    a38c:	003f9906 	br	a1f4 <_gp+0xffff4220>
    a390:	2807883a 	mov	r3,r5
    a394:	3023883a 	mov	r17,r6
    a398:	0401ffc4 	movi	r16,2047
    a39c:	003df506 	br	9b74 <_gp+0xffff3ba0>
    a3a0:	2807883a 	mov	r3,r5
    a3a4:	3023883a 	mov	r17,r6
    a3a8:	003df206 	br	9b74 <_gp+0xffff3ba0>
    a3ac:	123ff804 	addi	r8,r2,-32
    a3b0:	01000804 	movi	r4,32
    a3b4:	1a10d83a 	srl	r8,r3,r8
    a3b8:	11000a26 	beq	r2,r4,a3e4 <__subdf3+0x8f4>
    a3bc:	01001004 	movi	r4,64
    a3c0:	2085c83a 	sub	r2,r4,r2
    a3c4:	1884983a 	sll	r2,r3,r2
    a3c8:	1444b03a 	or	r2,r2,r17
    a3cc:	1004c03a 	cmpne	r2,r2,zero
    a3d0:	40a2b03a 	or	r17,r8,r2
    a3d4:	0005883a 	mov	r2,zero
    a3d8:	003f8606 	br	a1f4 <_gp+0xffff4220>
    a3dc:	0005883a 	mov	r2,zero
    a3e0:	003fdc06 	br	a354 <_gp+0xffff4380>
    a3e4:	0005883a 	mov	r2,zero
    a3e8:	003ff706 	br	a3c8 <_gp+0xffff43f4>

0000a3ec <__fixdfsi>:
    a3ec:	280cd53a 	srli	r6,r5,20
    a3f0:	00c00434 	movhi	r3,16
    a3f4:	18ffffc4 	addi	r3,r3,-1
    a3f8:	3181ffcc 	andi	r6,r6,2047
    a3fc:	01c0ff84 	movi	r7,1022
    a400:	28c6703a 	and	r3,r5,r3
    a404:	280ad7fa 	srli	r5,r5,31
    a408:	3980120e 	bge	r7,r6,a454 <__fixdfsi+0x68>
    a40c:	00810744 	movi	r2,1053
    a410:	11800c16 	blt	r2,r6,a444 <__fixdfsi+0x58>
    a414:	00810cc4 	movi	r2,1075
    a418:	1185c83a 	sub	r2,r2,r6
    a41c:	01c007c4 	movi	r7,31
    a420:	18c00434 	orhi	r3,r3,16
    a424:	38800d16 	blt	r7,r2,a45c <__fixdfsi+0x70>
    a428:	31befb44 	addi	r6,r6,-1043
    a42c:	2084d83a 	srl	r2,r4,r2
    a430:	1986983a 	sll	r3,r3,r6
    a434:	1884b03a 	or	r2,r3,r2
    a438:	28000726 	beq	r5,zero,a458 <__fixdfsi+0x6c>
    a43c:	0085c83a 	sub	r2,zero,r2
    a440:	f800283a 	ret
    a444:	00a00034 	movhi	r2,32768
    a448:	10bfffc4 	addi	r2,r2,-1
    a44c:	2885883a 	add	r2,r5,r2
    a450:	f800283a 	ret
    a454:	0005883a 	mov	r2,zero
    a458:	f800283a 	ret
    a45c:	008104c4 	movi	r2,1043
    a460:	1185c83a 	sub	r2,r2,r6
    a464:	1884d83a 	srl	r2,r3,r2
    a468:	003ff306 	br	a438 <_gp+0xffff4464>

0000a46c <__floatsidf>:
    a46c:	defffd04 	addi	sp,sp,-12
    a470:	dfc00215 	stw	ra,8(sp)
    a474:	dc400115 	stw	r17,4(sp)
    a478:	dc000015 	stw	r16,0(sp)
    a47c:	20002b26 	beq	r4,zero,a52c <__floatsidf+0xc0>
    a480:	2023883a 	mov	r17,r4
    a484:	2020d7fa 	srli	r16,r4,31
    a488:	20002d16 	blt	r4,zero,a540 <__floatsidf+0xd4>
    a48c:	8809883a 	mov	r4,r17
    a490:	000a5f00 	call	a5f0 <__clzsi2>
    a494:	01410784 	movi	r5,1054
    a498:	288bc83a 	sub	r5,r5,r2
    a49c:	01010cc4 	movi	r4,1075
    a4a0:	2149c83a 	sub	r4,r4,r5
    a4a4:	00c007c4 	movi	r3,31
    a4a8:	1900160e 	bge	r3,r4,a504 <__floatsidf+0x98>
    a4ac:	00c104c4 	movi	r3,1043
    a4b0:	1947c83a 	sub	r3,r3,r5
    a4b4:	88c6983a 	sll	r3,r17,r3
    a4b8:	00800434 	movhi	r2,16
    a4bc:	10bfffc4 	addi	r2,r2,-1
    a4c0:	1886703a 	and	r3,r3,r2
    a4c4:	2941ffcc 	andi	r5,r5,2047
    a4c8:	800d883a 	mov	r6,r16
    a4cc:	0005883a 	mov	r2,zero
    a4d0:	280a953a 	slli	r5,r5,20
    a4d4:	31803fcc 	andi	r6,r6,255
    a4d8:	01000434 	movhi	r4,16
    a4dc:	300c97fa 	slli	r6,r6,31
    a4e0:	213fffc4 	addi	r4,r4,-1
    a4e4:	1906703a 	and	r3,r3,r4
    a4e8:	1946b03a 	or	r3,r3,r5
    a4ec:	1986b03a 	or	r3,r3,r6
    a4f0:	dfc00217 	ldw	ra,8(sp)
    a4f4:	dc400117 	ldw	r17,4(sp)
    a4f8:	dc000017 	ldw	r16,0(sp)
    a4fc:	dec00304 	addi	sp,sp,12
    a500:	f800283a 	ret
    a504:	00c002c4 	movi	r3,11
    a508:	1887c83a 	sub	r3,r3,r2
    a50c:	88c6d83a 	srl	r3,r17,r3
    a510:	8904983a 	sll	r2,r17,r4
    a514:	01000434 	movhi	r4,16
    a518:	213fffc4 	addi	r4,r4,-1
    a51c:	2941ffcc 	andi	r5,r5,2047
    a520:	1906703a 	and	r3,r3,r4
    a524:	800d883a 	mov	r6,r16
    a528:	003fe906 	br	a4d0 <_gp+0xffff44fc>
    a52c:	000d883a 	mov	r6,zero
    a530:	000b883a 	mov	r5,zero
    a534:	0007883a 	mov	r3,zero
    a538:	0005883a 	mov	r2,zero
    a53c:	003fe406 	br	a4d0 <_gp+0xffff44fc>
    a540:	0123c83a 	sub	r17,zero,r4
    a544:	003fd106 	br	a48c <_gp+0xffff44b8>

0000a548 <__floatunsidf>:
    a548:	defffe04 	addi	sp,sp,-8
    a54c:	dc000015 	stw	r16,0(sp)
    a550:	dfc00115 	stw	ra,4(sp)
    a554:	2021883a 	mov	r16,r4
    a558:	20002226 	beq	r4,zero,a5e4 <__floatunsidf+0x9c>
    a55c:	000a5f00 	call	a5f0 <__clzsi2>
    a560:	01010784 	movi	r4,1054
    a564:	2089c83a 	sub	r4,r4,r2
    a568:	01810cc4 	movi	r6,1075
    a56c:	310dc83a 	sub	r6,r6,r4
    a570:	00c007c4 	movi	r3,31
    a574:	1980120e 	bge	r3,r6,a5c0 <__floatunsidf+0x78>
    a578:	00c104c4 	movi	r3,1043
    a57c:	1907c83a 	sub	r3,r3,r4
    a580:	80ca983a 	sll	r5,r16,r3
    a584:	00800434 	movhi	r2,16
    a588:	10bfffc4 	addi	r2,r2,-1
    a58c:	2101ffcc 	andi	r4,r4,2047
    a590:	0021883a 	mov	r16,zero
    a594:	288a703a 	and	r5,r5,r2
    a598:	2008953a 	slli	r4,r4,20
    a59c:	00c00434 	movhi	r3,16
    a5a0:	18ffffc4 	addi	r3,r3,-1
    a5a4:	28c6703a 	and	r3,r5,r3
    a5a8:	8005883a 	mov	r2,r16
    a5ac:	1906b03a 	or	r3,r3,r4
    a5b0:	dfc00117 	ldw	ra,4(sp)
    a5b4:	dc000017 	ldw	r16,0(sp)
    a5b8:	dec00204 	addi	sp,sp,8
    a5bc:	f800283a 	ret
    a5c0:	00c002c4 	movi	r3,11
    a5c4:	188bc83a 	sub	r5,r3,r2
    a5c8:	814ad83a 	srl	r5,r16,r5
    a5cc:	00c00434 	movhi	r3,16
    a5d0:	18ffffc4 	addi	r3,r3,-1
    a5d4:	81a0983a 	sll	r16,r16,r6
    a5d8:	2101ffcc 	andi	r4,r4,2047
    a5dc:	28ca703a 	and	r5,r5,r3
    a5e0:	003fed06 	br	a598 <_gp+0xffff45c4>
    a5e4:	0009883a 	mov	r4,zero
    a5e8:	000b883a 	mov	r5,zero
    a5ec:	003fea06 	br	a598 <_gp+0xffff45c4>

0000a5f0 <__clzsi2>:
    a5f0:	00bfffd4 	movui	r2,65535
    a5f4:	11000536 	bltu	r2,r4,a60c <__clzsi2+0x1c>
    a5f8:	00803fc4 	movi	r2,255
    a5fc:	11000f36 	bltu	r2,r4,a63c <__clzsi2+0x4c>
    a600:	00800804 	movi	r2,32
    a604:	0007883a 	mov	r3,zero
    a608:	00000506 	br	a620 <__clzsi2+0x30>
    a60c:	00804034 	movhi	r2,256
    a610:	10bfffc4 	addi	r2,r2,-1
    a614:	11000c2e 	bgeu	r2,r4,a648 <__clzsi2+0x58>
    a618:	00800204 	movi	r2,8
    a61c:	00c00604 	movi	r3,24
    a620:	20c8d83a 	srl	r4,r4,r3
    a624:	00c00074 	movhi	r3,1
    a628:	18f21904 	addi	r3,r3,-14236
    a62c:	1909883a 	add	r4,r3,r4
    a630:	20c00003 	ldbu	r3,0(r4)
    a634:	10c5c83a 	sub	r2,r2,r3
    a638:	f800283a 	ret
    a63c:	00800604 	movi	r2,24
    a640:	00c00204 	movi	r3,8
    a644:	003ff606 	br	a620 <_gp+0xffff464c>
    a648:	00800404 	movi	r2,16
    a64c:	1007883a 	mov	r3,r2
    a650:	003ff306 	br	a620 <_gp+0xffff464c>

0000a654 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a654:	defff904 	addi	sp,sp,-28
    a658:	dfc00615 	stw	ra,24(sp)
    a65c:	df000515 	stw	fp,20(sp)
    a660:	df000504 	addi	fp,sp,20
    a664:	e13ffc15 	stw	r4,-16(fp)
    a668:	e17ffd15 	stw	r5,-12(fp)
    a66c:	e1bffe15 	stw	r6,-8(fp)
    a670:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a674:	e0800217 	ldw	r2,8(fp)
    a678:	d8800015 	stw	r2,0(sp)
    a67c:	e1ffff17 	ldw	r7,-4(fp)
    a680:	e1bffe17 	ldw	r6,-8(fp)
    a684:	e17ffd17 	ldw	r5,-12(fp)
    a688:	e13ffc17 	ldw	r4,-16(fp)
    a68c:	000a8040 	call	a804 <alt_iic_isr_register>
}  
    a690:	e037883a 	mov	sp,fp
    a694:	dfc00117 	ldw	ra,4(sp)
    a698:	df000017 	ldw	fp,0(sp)
    a69c:	dec00204 	addi	sp,sp,8
    a6a0:	f800283a 	ret

0000a6a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a6a4:	defff904 	addi	sp,sp,-28
    a6a8:	df000615 	stw	fp,24(sp)
    a6ac:	df000604 	addi	fp,sp,24
    a6b0:	e13ffe15 	stw	r4,-8(fp)
    a6b4:	e17fff15 	stw	r5,-4(fp)
    a6b8:	e0bfff17 	ldw	r2,-4(fp)
    a6bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6c0:	0005303a 	rdctl	r2,status
    a6c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6c8:	e0fffb17 	ldw	r3,-20(fp)
    a6cc:	00bfff84 	movi	r2,-2
    a6d0:	1884703a 	and	r2,r3,r2
    a6d4:	1001703a 	wrctl	status,r2
  
  return context;
    a6d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a6dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    a6e0:	00c00044 	movi	r3,1
    a6e4:	e0bffa17 	ldw	r2,-24(fp)
    a6e8:	1884983a 	sll	r2,r3,r2
    a6ec:	1007883a 	mov	r3,r2
    a6f0:	d0a5be17 	ldw	r2,-26888(gp)
    a6f4:	1884b03a 	or	r2,r3,r2
    a6f8:	d0a5be15 	stw	r2,-26888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a6fc:	d0a5be17 	ldw	r2,-26888(gp)
    a700:	100170fa 	wrctl	ienable,r2
    a704:	e0bffc17 	ldw	r2,-16(fp)
    a708:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a70c:	e0bffd17 	ldw	r2,-12(fp)
    a710:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a714:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    a718:	0001883a 	nop
}
    a71c:	e037883a 	mov	sp,fp
    a720:	df000017 	ldw	fp,0(sp)
    a724:	dec00104 	addi	sp,sp,4
    a728:	f800283a 	ret

0000a72c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a72c:	defff904 	addi	sp,sp,-28
    a730:	df000615 	stw	fp,24(sp)
    a734:	df000604 	addi	fp,sp,24
    a738:	e13ffe15 	stw	r4,-8(fp)
    a73c:	e17fff15 	stw	r5,-4(fp)
    a740:	e0bfff17 	ldw	r2,-4(fp)
    a744:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a748:	0005303a 	rdctl	r2,status
    a74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a750:	e0fffb17 	ldw	r3,-20(fp)
    a754:	00bfff84 	movi	r2,-2
    a758:	1884703a 	and	r2,r3,r2
    a75c:	1001703a 	wrctl	status,r2
  
  return context;
    a760:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a764:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a768:	00c00044 	movi	r3,1
    a76c:	e0bffa17 	ldw	r2,-24(fp)
    a770:	1884983a 	sll	r2,r3,r2
    a774:	0084303a 	nor	r2,zero,r2
    a778:	1007883a 	mov	r3,r2
    a77c:	d0a5be17 	ldw	r2,-26888(gp)
    a780:	1884703a 	and	r2,r3,r2
    a784:	d0a5be15 	stw	r2,-26888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a788:	d0a5be17 	ldw	r2,-26888(gp)
    a78c:	100170fa 	wrctl	ienable,r2
    a790:	e0bffc17 	ldw	r2,-16(fp)
    a794:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a798:	e0bffd17 	ldw	r2,-12(fp)
    a79c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a7a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    a7a4:	0001883a 	nop
}
    a7a8:	e037883a 	mov	sp,fp
    a7ac:	df000017 	ldw	fp,0(sp)
    a7b0:	dec00104 	addi	sp,sp,4
    a7b4:	f800283a 	ret

0000a7b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a7b8:	defffc04 	addi	sp,sp,-16
    a7bc:	df000315 	stw	fp,12(sp)
    a7c0:	df000304 	addi	fp,sp,12
    a7c4:	e13ffe15 	stw	r4,-8(fp)
    a7c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a7cc:	000530fa 	rdctl	r2,ienable
    a7d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a7d4:	00c00044 	movi	r3,1
    a7d8:	e0bfff17 	ldw	r2,-4(fp)
    a7dc:	1884983a 	sll	r2,r3,r2
    a7e0:	1007883a 	mov	r3,r2
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	1884703a 	and	r2,r3,r2
    a7ec:	1004c03a 	cmpne	r2,r2,zero
    a7f0:	10803fcc 	andi	r2,r2,255
}
    a7f4:	e037883a 	mov	sp,fp
    a7f8:	df000017 	ldw	fp,0(sp)
    a7fc:	dec00104 	addi	sp,sp,4
    a800:	f800283a 	ret

0000a804 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a804:	defff504 	addi	sp,sp,-44
    a808:	dfc00a15 	stw	ra,40(sp)
    a80c:	df000915 	stw	fp,36(sp)
    a810:	df000904 	addi	fp,sp,36
    a814:	e13ffc15 	stw	r4,-16(fp)
    a818:	e17ffd15 	stw	r5,-12(fp)
    a81c:	e1bffe15 	stw	r6,-8(fp)
    a820:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a824:	00bffa84 	movi	r2,-22
    a828:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a82c:	e0bffd17 	ldw	r2,-12(fp)
    a830:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a834:	e0bff817 	ldw	r2,-32(fp)
    a838:	10800808 	cmpgei	r2,r2,32
    a83c:	1000271e 	bne	r2,zero,a8dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a840:	0005303a 	rdctl	r2,status
    a844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a848:	e0fffb17 	ldw	r3,-20(fp)
    a84c:	00bfff84 	movi	r2,-2
    a850:	1884703a 	and	r2,r3,r2
    a854:	1001703a 	wrctl	status,r2
  
  return context;
    a858:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a85c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    a860:	00800074 	movhi	r2,1
    a864:	10bdbb04 	addi	r2,r2,-2324
    a868:	e0fff817 	ldw	r3,-32(fp)
    a86c:	180690fa 	slli	r3,r3,3
    a870:	10c5883a 	add	r2,r2,r3
    a874:	e0fffe17 	ldw	r3,-8(fp)
    a878:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a87c:	00800074 	movhi	r2,1
    a880:	10bdbb04 	addi	r2,r2,-2324
    a884:	e0fff817 	ldw	r3,-32(fp)
    a888:	180690fa 	slli	r3,r3,3
    a88c:	10c5883a 	add	r2,r2,r3
    a890:	10800104 	addi	r2,r2,4
    a894:	e0ffff17 	ldw	r3,-4(fp)
    a898:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a89c:	e0bffe17 	ldw	r2,-8(fp)
    a8a0:	10000526 	beq	r2,zero,a8b8 <alt_iic_isr_register+0xb4>
    a8a4:	e0bff817 	ldw	r2,-32(fp)
    a8a8:	100b883a 	mov	r5,r2
    a8ac:	e13ffc17 	ldw	r4,-16(fp)
    a8b0:	000a6a40 	call	a6a4 <alt_ic_irq_enable>
    a8b4:	00000406 	br	a8c8 <alt_iic_isr_register+0xc4>
    a8b8:	e0bff817 	ldw	r2,-32(fp)
    a8bc:	100b883a 	mov	r5,r2
    a8c0:	e13ffc17 	ldw	r4,-16(fp)
    a8c4:	000a72c0 	call	a72c <alt_ic_irq_disable>
    a8c8:	e0bff715 	stw	r2,-36(fp)
    a8cc:	e0bffa17 	ldw	r2,-24(fp)
    a8d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8d4:	e0bff917 	ldw	r2,-28(fp)
    a8d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a8dc:	e0bff717 	ldw	r2,-36(fp)
}
    a8e0:	e037883a 	mov	sp,fp
    a8e4:	dfc00117 	ldw	ra,4(sp)
    a8e8:	df000017 	ldw	fp,0(sp)
    a8ec:	dec00204 	addi	sp,sp,8
    a8f0:	f800283a 	ret

0000a8f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a8f4:	defffc04 	addi	sp,sp,-16
    a8f8:	df000315 	stw	fp,12(sp)
    a8fc:	df000304 	addi	fp,sp,12
    a900:	e13ffd15 	stw	r4,-12(fp)
    a904:	e17ffe15 	stw	r5,-8(fp)
    a908:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a90c:	e0fffe17 	ldw	r3,-8(fp)
    a910:	e0bffd17 	ldw	r2,-12(fp)
    a914:	18800c26 	beq	r3,r2,a948 <alt_load_section+0x54>
  {
    while( to != end )
    a918:	00000806 	br	a93c <alt_load_section+0x48>
    {
      *to++ = *from++;
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	10c00104 	addi	r3,r2,4
    a924:	e0fffe15 	stw	r3,-8(fp)
    a928:	e0fffd17 	ldw	r3,-12(fp)
    a92c:	19000104 	addi	r4,r3,4
    a930:	e13ffd15 	stw	r4,-12(fp)
    a934:	18c00017 	ldw	r3,0(r3)
    a938:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a93c:	e0fffe17 	ldw	r3,-8(fp)
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	18bff51e 	bne	r3,r2,a91c <_gp+0xffff4948>
    {
      *to++ = *from++;
    }
  }
}
    a948:	0001883a 	nop
    a94c:	e037883a 	mov	sp,fp
    a950:	df000017 	ldw	fp,0(sp)
    a954:	dec00104 	addi	sp,sp,4
    a958:	f800283a 	ret

0000a95c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a95c:	defffe04 	addi	sp,sp,-8
    a960:	dfc00115 	stw	ra,4(sp)
    a964:	df000015 	stw	fp,0(sp)
    a968:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a96c:	01800074 	movhi	r6,1
    a970:	31b80c04 	addi	r6,r6,-8144
    a974:	01400074 	movhi	r5,1
    a978:	29726704 	addi	r5,r5,-13924
    a97c:	01000074 	movhi	r4,1
    a980:	21380c04 	addi	r4,r4,-8144
    a984:	000a8f40 	call	a8f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a988:	01800074 	movhi	r6,1
    a98c:	31a08c04 	addi	r6,r6,-32208
    a990:	01400074 	movhi	r5,1
    a994:	29600804 	addi	r5,r5,-32736
    a998:	01000074 	movhi	r4,1
    a99c:	21200804 	addi	r4,r4,-32736
    a9a0:	000a8f40 	call	a8f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a9a4:	01800074 	movhi	r6,1
    a9a8:	31b26704 	addi	r6,r6,-13924
    a9ac:	01400074 	movhi	r5,1
    a9b0:	29721904 	addi	r5,r5,-14236
    a9b4:	01000074 	movhi	r4,1
    a9b8:	21321904 	addi	r4,r4,-14236
    a9bc:	000a8f40 	call	a8f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a9c0:	000b7bc0 	call	b7bc <alt_dcache_flush_all>
  alt_icache_flush_all();
    a9c4:	000b9a80 	call	b9a8 <alt_icache_flush_all>
}
    a9c8:	0001883a 	nop
    a9cc:	e037883a 	mov	sp,fp
    a9d0:	dfc00117 	ldw	ra,4(sp)
    a9d4:	df000017 	ldw	fp,0(sp)
    a9d8:	dec00204 	addi	sp,sp,8
    a9dc:	f800283a 	ret

0000a9e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a9e0:	defffd04 	addi	sp,sp,-12
    a9e4:	dfc00215 	stw	ra,8(sp)
    a9e8:	df000115 	stw	fp,4(sp)
    a9ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a9f0:	0009883a 	mov	r4,zero
    a9f4:	000aa900 	call	aa90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    a9f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a9fc:	000aac80 	call	aac8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    aa00:	01800074 	movhi	r6,1
    aa04:	31b25904 	addi	r6,r6,-13980
    aa08:	01400074 	movhi	r5,1
    aa0c:	29725904 	addi	r5,r5,-13980
    aa10:	01000074 	movhi	r4,1
    aa14:	21325904 	addi	r4,r4,-13980
    aa18:	000bb480 	call	bb48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    aa1c:	000b8e80 	call	b8e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    aa20:	01000074 	movhi	r4,1
    aa24:	212e5204 	addi	r4,r4,-18104
    aa28:	000c2f00 	call	c2f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aa2c:	d0a5bf17 	ldw	r2,-26884(gp)
    aa30:	d0e5c017 	ldw	r3,-26880(gp)
    aa34:	d125c117 	ldw	r4,-26876(gp)
    aa38:	200d883a 	mov	r6,r4
    aa3c:	180b883a 	mov	r5,r3
    aa40:	1009883a 	mov	r4,r2
    aa44:	00085b80 	call	85b8 <main>
    aa48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    aa4c:	01000044 	movi	r4,1
    aa50:	000b6e40 	call	b6e4 <close>
  exit (result);
    aa54:	e13fff17 	ldw	r4,-4(fp)
    aa58:	000c3040 	call	c304 <exit>

0000aa5c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    aa5c:	defffd04 	addi	sp,sp,-12
    aa60:	dfc00215 	stw	ra,8(sp)
    aa64:	df000115 	stw	fp,4(sp)
    aa68:	df000104 	addi	fp,sp,4
    aa6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    aa70:	d1600f04 	addi	r5,gp,-32708
    aa74:	e13fff17 	ldw	r4,-4(fp)
    aa78:	000b8440 	call	b844 <alt_dev_llist_insert>
}
    aa7c:	e037883a 	mov	sp,fp
    aa80:	dfc00117 	ldw	ra,4(sp)
    aa84:	df000017 	ldw	fp,0(sp)
    aa88:	dec00204 	addi	sp,sp,8
    aa8c:	f800283a 	ret

0000aa90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    aa90:	defffd04 	addi	sp,sp,-12
    aa94:	dfc00215 	stw	ra,8(sp)
    aa98:	df000115 	stw	fp,4(sp)
    aa9c:	df000104 	addi	fp,sp,4
    aaa0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    aaa4:	000c0700 	call	c070 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    aaa8:	00800044 	movi	r2,1
    aaac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    aab0:	0001883a 	nop
    aab4:	e037883a 	mov	sp,fp
    aab8:	dfc00117 	ldw	ra,4(sp)
    aabc:	df000017 	ldw	fp,0(sp)
    aac0:	dec00204 	addi	sp,sp,8
    aac4:	f800283a 	ret

0000aac8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    aac8:	defffe04 	addi	sp,sp,-8
    aacc:	dfc00115 	stw	ra,4(sp)
    aad0:	df000015 	stw	fp,0(sp)
    aad4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    aad8:	01800084 	movi	r6,2
    aadc:	000b883a 	mov	r5,zero
    aae0:	01000074 	movhi	r4,1
    aae4:	21327404 	addi	r4,r4,-13872
    aae8:	000ac780 	call	ac78 <altera_avalon_jtag_uart_init>
    aaec:	01000074 	movhi	r4,1
    aaf0:	21326a04 	addi	r4,r4,-13912
    aaf4:	000aa5c0 	call	aa5c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    aaf8:	0001883a 	nop
}
    aafc:	0001883a 	nop
    ab00:	e037883a 	mov	sp,fp
    ab04:	dfc00117 	ldw	ra,4(sp)
    ab08:	df000017 	ldw	fp,0(sp)
    ab0c:	dec00204 	addi	sp,sp,8
    ab10:	f800283a 	ret

0000ab14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ab14:	defffa04 	addi	sp,sp,-24
    ab18:	dfc00515 	stw	ra,20(sp)
    ab1c:	df000415 	stw	fp,16(sp)
    ab20:	df000404 	addi	fp,sp,16
    ab24:	e13ffd15 	stw	r4,-12(fp)
    ab28:	e17ffe15 	stw	r5,-8(fp)
    ab2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ab30:	e0bffd17 	ldw	r2,-12(fp)
    ab34:	10800017 	ldw	r2,0(r2)
    ab38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ab3c:	e0bffc17 	ldw	r2,-16(fp)
    ab40:	10c00a04 	addi	r3,r2,40
    ab44:	e0bffd17 	ldw	r2,-12(fp)
    ab48:	10800217 	ldw	r2,8(r2)
    ab4c:	100f883a 	mov	r7,r2
    ab50:	e1bfff17 	ldw	r6,-4(fp)
    ab54:	e17ffe17 	ldw	r5,-8(fp)
    ab58:	1809883a 	mov	r4,r3
    ab5c:	000b13c0 	call	b13c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ab60:	e037883a 	mov	sp,fp
    ab64:	dfc00117 	ldw	ra,4(sp)
    ab68:	df000017 	ldw	fp,0(sp)
    ab6c:	dec00204 	addi	sp,sp,8
    ab70:	f800283a 	ret

0000ab74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ab74:	defffa04 	addi	sp,sp,-24
    ab78:	dfc00515 	stw	ra,20(sp)
    ab7c:	df000415 	stw	fp,16(sp)
    ab80:	df000404 	addi	fp,sp,16
    ab84:	e13ffd15 	stw	r4,-12(fp)
    ab88:	e17ffe15 	stw	r5,-8(fp)
    ab8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800017 	ldw	r2,0(r2)
    ab98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ab9c:	e0bffc17 	ldw	r2,-16(fp)
    aba0:	10c00a04 	addi	r3,r2,40
    aba4:	e0bffd17 	ldw	r2,-12(fp)
    aba8:	10800217 	ldw	r2,8(r2)
    abac:	100f883a 	mov	r7,r2
    abb0:	e1bfff17 	ldw	r6,-4(fp)
    abb4:	e17ffe17 	ldw	r5,-8(fp)
    abb8:	1809883a 	mov	r4,r3
    abbc:	000b3580 	call	b358 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    abc0:	e037883a 	mov	sp,fp
    abc4:	dfc00117 	ldw	ra,4(sp)
    abc8:	df000017 	ldw	fp,0(sp)
    abcc:	dec00204 	addi	sp,sp,8
    abd0:	f800283a 	ret

0000abd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    abd4:	defffc04 	addi	sp,sp,-16
    abd8:	dfc00315 	stw	ra,12(sp)
    abdc:	df000215 	stw	fp,8(sp)
    abe0:	df000204 	addi	fp,sp,8
    abe4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    abe8:	e0bfff17 	ldw	r2,-4(fp)
    abec:	10800017 	ldw	r2,0(r2)
    abf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    abf4:	e0bffe17 	ldw	r2,-8(fp)
    abf8:	10c00a04 	addi	r3,r2,40
    abfc:	e0bfff17 	ldw	r2,-4(fp)
    ac00:	10800217 	ldw	r2,8(r2)
    ac04:	100b883a 	mov	r5,r2
    ac08:	1809883a 	mov	r4,r3
    ac0c:	000afe40 	call	afe4 <altera_avalon_jtag_uart_close>
}
    ac10:	e037883a 	mov	sp,fp
    ac14:	dfc00117 	ldw	ra,4(sp)
    ac18:	df000017 	ldw	fp,0(sp)
    ac1c:	dec00204 	addi	sp,sp,8
    ac20:	f800283a 	ret

0000ac24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ac24:	defffa04 	addi	sp,sp,-24
    ac28:	dfc00515 	stw	ra,20(sp)
    ac2c:	df000415 	stw	fp,16(sp)
    ac30:	df000404 	addi	fp,sp,16
    ac34:	e13ffd15 	stw	r4,-12(fp)
    ac38:	e17ffe15 	stw	r5,-8(fp)
    ac3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ac40:	e0bffd17 	ldw	r2,-12(fp)
    ac44:	10800017 	ldw	r2,0(r2)
    ac48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ac4c:	e0bffc17 	ldw	r2,-16(fp)
    ac50:	10800a04 	addi	r2,r2,40
    ac54:	e1bfff17 	ldw	r6,-4(fp)
    ac58:	e17ffe17 	ldw	r5,-8(fp)
    ac5c:	1009883a 	mov	r4,r2
    ac60:	000b04c0 	call	b04c <altera_avalon_jtag_uart_ioctl>
}
    ac64:	e037883a 	mov	sp,fp
    ac68:	dfc00117 	ldw	ra,4(sp)
    ac6c:	df000017 	ldw	fp,0(sp)
    ac70:	dec00204 	addi	sp,sp,8
    ac74:	f800283a 	ret

0000ac78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ac78:	defffa04 	addi	sp,sp,-24
    ac7c:	dfc00515 	stw	ra,20(sp)
    ac80:	df000415 	stw	fp,16(sp)
    ac84:	df000404 	addi	fp,sp,16
    ac88:	e13ffd15 	stw	r4,-12(fp)
    ac8c:	e17ffe15 	stw	r5,-8(fp)
    ac90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac94:	e0bffd17 	ldw	r2,-12(fp)
    ac98:	00c00044 	movi	r3,1
    ac9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    aca0:	e0bffd17 	ldw	r2,-12(fp)
    aca4:	10800017 	ldw	r2,0(r2)
    aca8:	10800104 	addi	r2,r2,4
    acac:	1007883a 	mov	r3,r2
    acb0:	e0bffd17 	ldw	r2,-12(fp)
    acb4:	10800817 	ldw	r2,32(r2)
    acb8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    acbc:	e0bffe17 	ldw	r2,-8(fp)
    acc0:	e0ffff17 	ldw	r3,-4(fp)
    acc4:	d8000015 	stw	zero,0(sp)
    acc8:	e1fffd17 	ldw	r7,-12(fp)
    accc:	01800074 	movhi	r6,1
    acd0:	31ab4e04 	addi	r6,r6,-21192
    acd4:	180b883a 	mov	r5,r3
    acd8:	1009883a 	mov	r4,r2
    acdc:	000a6540 	call	a654 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ace0:	e0bffd17 	ldw	r2,-12(fp)
    ace4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ace8:	e0bffd17 	ldw	r2,-12(fp)
    acec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    acf0:	d0e5c317 	ldw	r3,-26868(gp)
    acf4:	e1fffd17 	ldw	r7,-12(fp)
    acf8:	01800074 	movhi	r6,1
    acfc:	31abd104 	addi	r6,r6,-20668
    ad00:	180b883a 	mov	r5,r3
    ad04:	1009883a 	mov	r4,r2
    ad08:	000b57c0 	call	b57c <alt_alarm_start>
    ad0c:	1000040e 	bge	r2,zero,ad20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ad10:	e0fffd17 	ldw	r3,-12(fp)
    ad14:	00a00034 	movhi	r2,32768
    ad18:	10bfffc4 	addi	r2,r2,-1
    ad1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ad20:	0001883a 	nop
    ad24:	e037883a 	mov	sp,fp
    ad28:	dfc00117 	ldw	ra,4(sp)
    ad2c:	df000017 	ldw	fp,0(sp)
    ad30:	dec00204 	addi	sp,sp,8
    ad34:	f800283a 	ret

0000ad38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ad38:	defff804 	addi	sp,sp,-32
    ad3c:	df000715 	stw	fp,28(sp)
    ad40:	df000704 	addi	fp,sp,28
    ad44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ad48:	e0bfff17 	ldw	r2,-4(fp)
    ad4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    ad50:	e0bffb17 	ldw	r2,-20(fp)
    ad54:	10800017 	ldw	r2,0(r2)
    ad58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad5c:	e0bffc17 	ldw	r2,-16(fp)
    ad60:	10800104 	addi	r2,r2,4
    ad64:	10800037 	ldwio	r2,0(r2)
    ad68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ad6c:	e0bffd17 	ldw	r2,-12(fp)
    ad70:	1080c00c 	andi	r2,r2,768
    ad74:	10006d26 	beq	r2,zero,af2c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ad78:	e0bffd17 	ldw	r2,-12(fp)
    ad7c:	1080400c 	andi	r2,r2,256
    ad80:	10003526 	beq	r2,zero,ae58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ad84:	00800074 	movhi	r2,1
    ad88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad8c:	e0bffb17 	ldw	r2,-20(fp)
    ad90:	10800a17 	ldw	r2,40(r2)
    ad94:	10800044 	addi	r2,r2,1
    ad98:	1081ffcc 	andi	r2,r2,2047
    ad9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ada0:	e0bffb17 	ldw	r2,-20(fp)
    ada4:	10c00b17 	ldw	r3,44(r2)
    ada8:	e0bffe17 	ldw	r2,-8(fp)
    adac:	18801526 	beq	r3,r2,ae04 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    adb0:	e0bffc17 	ldw	r2,-16(fp)
    adb4:	10800037 	ldwio	r2,0(r2)
    adb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    adbc:	e0bff917 	ldw	r2,-28(fp)
    adc0:	10a0000c 	andi	r2,r2,32768
    adc4:	10001126 	beq	r2,zero,ae0c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    adc8:	e0bffb17 	ldw	r2,-20(fp)
    adcc:	10800a17 	ldw	r2,40(r2)
    add0:	e0fff917 	ldw	r3,-28(fp)
    add4:	1809883a 	mov	r4,r3
    add8:	e0fffb17 	ldw	r3,-20(fp)
    addc:	1885883a 	add	r2,r3,r2
    ade0:	10800e04 	addi	r2,r2,56
    ade4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ade8:	e0bffb17 	ldw	r2,-20(fp)
    adec:	10800a17 	ldw	r2,40(r2)
    adf0:	10800044 	addi	r2,r2,1
    adf4:	10c1ffcc 	andi	r3,r2,2047
    adf8:	e0bffb17 	ldw	r2,-20(fp)
    adfc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ae00:	003fe206 	br	ad8c <_gp+0xffff4db8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ae04:	0001883a 	nop
    ae08:	00000106 	br	ae10 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ae0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ae10:	e0bff917 	ldw	r2,-28(fp)
    ae14:	10bfffec 	andhi	r2,r2,65535
    ae18:	10000f26 	beq	r2,zero,ae58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ae1c:	e0bffb17 	ldw	r2,-20(fp)
    ae20:	10c00817 	ldw	r3,32(r2)
    ae24:	00bfff84 	movi	r2,-2
    ae28:	1886703a 	and	r3,r3,r2
    ae2c:	e0bffb17 	ldw	r2,-20(fp)
    ae30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ae34:	e0bffc17 	ldw	r2,-16(fp)
    ae38:	10800104 	addi	r2,r2,4
    ae3c:	1007883a 	mov	r3,r2
    ae40:	e0bffb17 	ldw	r2,-20(fp)
    ae44:	10800817 	ldw	r2,32(r2)
    ae48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ae4c:	e0bffc17 	ldw	r2,-16(fp)
    ae50:	10800104 	addi	r2,r2,4
    ae54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ae58:	e0bffd17 	ldw	r2,-12(fp)
    ae5c:	1080800c 	andi	r2,r2,512
    ae60:	103fbe26 	beq	r2,zero,ad5c <_gp+0xffff4d88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ae64:	e0bffd17 	ldw	r2,-12(fp)
    ae68:	1004d43a 	srli	r2,r2,16
    ae6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ae70:	00001406 	br	aec4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ae74:	e0bffc17 	ldw	r2,-16(fp)
    ae78:	e0fffb17 	ldw	r3,-20(fp)
    ae7c:	18c00d17 	ldw	r3,52(r3)
    ae80:	e13ffb17 	ldw	r4,-20(fp)
    ae84:	20c7883a 	add	r3,r4,r3
    ae88:	18c20e04 	addi	r3,r3,2104
    ae8c:	18c00003 	ldbu	r3,0(r3)
    ae90:	18c03fcc 	andi	r3,r3,255
    ae94:	18c0201c 	xori	r3,r3,128
    ae98:	18ffe004 	addi	r3,r3,-128
    ae9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aea0:	e0bffb17 	ldw	r2,-20(fp)
    aea4:	10800d17 	ldw	r2,52(r2)
    aea8:	10800044 	addi	r2,r2,1
    aeac:	10c1ffcc 	andi	r3,r2,2047
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    aeb8:	e0bffa17 	ldw	r2,-24(fp)
    aebc:	10bfffc4 	addi	r2,r2,-1
    aec0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    aec4:	e0bffa17 	ldw	r2,-24(fp)
    aec8:	10000526 	beq	r2,zero,aee0 <altera_avalon_jtag_uart_irq+0x1a8>
    aecc:	e0bffb17 	ldw	r2,-20(fp)
    aed0:	10c00d17 	ldw	r3,52(r2)
    aed4:	e0bffb17 	ldw	r2,-20(fp)
    aed8:	10800c17 	ldw	r2,48(r2)
    aedc:	18bfe51e 	bne	r3,r2,ae74 <_gp+0xffff4ea0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aee0:	e0bffa17 	ldw	r2,-24(fp)
    aee4:	103f9d26 	beq	r2,zero,ad5c <_gp+0xffff4d88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aee8:	e0bffb17 	ldw	r2,-20(fp)
    aeec:	10c00817 	ldw	r3,32(r2)
    aef0:	00bfff44 	movi	r2,-3
    aef4:	1886703a 	and	r3,r3,r2
    aef8:	e0bffb17 	ldw	r2,-20(fp)
    aefc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    af00:	e0bffb17 	ldw	r2,-20(fp)
    af04:	10800017 	ldw	r2,0(r2)
    af08:	10800104 	addi	r2,r2,4
    af0c:	1007883a 	mov	r3,r2
    af10:	e0bffb17 	ldw	r2,-20(fp)
    af14:	10800817 	ldw	r2,32(r2)
    af18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af1c:	e0bffc17 	ldw	r2,-16(fp)
    af20:	10800104 	addi	r2,r2,4
    af24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    af28:	003f8c06 	br	ad5c <_gp+0xffff4d88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    af2c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    af30:	0001883a 	nop
    af34:	e037883a 	mov	sp,fp
    af38:	df000017 	ldw	fp,0(sp)
    af3c:	dec00104 	addi	sp,sp,4
    af40:	f800283a 	ret

0000af44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    af44:	defff804 	addi	sp,sp,-32
    af48:	df000715 	stw	fp,28(sp)
    af4c:	df000704 	addi	fp,sp,28
    af50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    af54:	e0bffb17 	ldw	r2,-20(fp)
    af58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    af5c:	e0bff917 	ldw	r2,-28(fp)
    af60:	10800017 	ldw	r2,0(r2)
    af64:	10800104 	addi	r2,r2,4
    af68:	10800037 	ldwio	r2,0(r2)
    af6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    af70:	e0bffa17 	ldw	r2,-24(fp)
    af74:	1081000c 	andi	r2,r2,1024
    af78:	10000b26 	beq	r2,zero,afa8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    af7c:	e0bff917 	ldw	r2,-28(fp)
    af80:	10800017 	ldw	r2,0(r2)
    af84:	10800104 	addi	r2,r2,4
    af88:	1007883a 	mov	r3,r2
    af8c:	e0bff917 	ldw	r2,-28(fp)
    af90:	10800817 	ldw	r2,32(r2)
    af94:	10810014 	ori	r2,r2,1024
    af98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    af9c:	e0bff917 	ldw	r2,-28(fp)
    afa0:	10000915 	stw	zero,36(r2)
    afa4:	00000a06 	br	afd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    afa8:	e0bff917 	ldw	r2,-28(fp)
    afac:	10c00917 	ldw	r3,36(r2)
    afb0:	00a00034 	movhi	r2,32768
    afb4:	10bfff04 	addi	r2,r2,-4
    afb8:	10c00536 	bltu	r2,r3,afd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    afbc:	e0bff917 	ldw	r2,-28(fp)
    afc0:	10800917 	ldw	r2,36(r2)
    afc4:	10c00044 	addi	r3,r2,1
    afc8:	e0bff917 	ldw	r2,-28(fp)
    afcc:	10c00915 	stw	r3,36(r2)
    afd0:	d0a5c317 	ldw	r2,-26868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    afd4:	e037883a 	mov	sp,fp
    afd8:	df000017 	ldw	fp,0(sp)
    afdc:	dec00104 	addi	sp,sp,4
    afe0:	f800283a 	ret

0000afe4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    afe4:	defffd04 	addi	sp,sp,-12
    afe8:	df000215 	stw	fp,8(sp)
    afec:	df000204 	addi	fp,sp,8
    aff0:	e13ffe15 	stw	r4,-8(fp)
    aff4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    aff8:	00000506 	br	b010 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    affc:	e0bfff17 	ldw	r2,-4(fp)
    b000:	1090000c 	andi	r2,r2,16384
    b004:	10000226 	beq	r2,zero,b010 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b008:	00bffd44 	movi	r2,-11
    b00c:	00000b06 	br	b03c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b010:	e0bffe17 	ldw	r2,-8(fp)
    b014:	10c00d17 	ldw	r3,52(r2)
    b018:	e0bffe17 	ldw	r2,-8(fp)
    b01c:	10800c17 	ldw	r2,48(r2)
    b020:	18800526 	beq	r3,r2,b038 <altera_avalon_jtag_uart_close+0x54>
    b024:	e0bffe17 	ldw	r2,-8(fp)
    b028:	10c00917 	ldw	r3,36(r2)
    b02c:	e0bffe17 	ldw	r2,-8(fp)
    b030:	10800117 	ldw	r2,4(r2)
    b034:	18bff136 	bltu	r3,r2,affc <_gp+0xffff5028>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b038:	0005883a 	mov	r2,zero
}
    b03c:	e037883a 	mov	sp,fp
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00104 	addi	sp,sp,4
    b048:	f800283a 	ret

0000b04c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b04c:	defffa04 	addi	sp,sp,-24
    b050:	df000515 	stw	fp,20(sp)
    b054:	df000504 	addi	fp,sp,20
    b058:	e13ffd15 	stw	r4,-12(fp)
    b05c:	e17ffe15 	stw	r5,-8(fp)
    b060:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b064:	00bff9c4 	movi	r2,-25
    b068:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b06c:	e0bffe17 	ldw	r2,-8(fp)
    b070:	10da8060 	cmpeqi	r3,r2,27137
    b074:	1800031e 	bne	r3,zero,b084 <altera_avalon_jtag_uart_ioctl+0x38>
    b078:	109a80a0 	cmpeqi	r2,r2,27138
    b07c:	1000181e 	bne	r2,zero,b0e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    b080:	00002906 	br	b128 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b084:	e0bffd17 	ldw	r2,-12(fp)
    b088:	10c00117 	ldw	r3,4(r2)
    b08c:	00a00034 	movhi	r2,32768
    b090:	10bfffc4 	addi	r2,r2,-1
    b094:	18802126 	beq	r3,r2,b11c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    b098:	e0bfff17 	ldw	r2,-4(fp)
    b09c:	10800017 	ldw	r2,0(r2)
    b0a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b0a4:	e0bffc17 	ldw	r2,-16(fp)
    b0a8:	10800090 	cmplti	r2,r2,2
    b0ac:	1000061e 	bne	r2,zero,b0c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    b0b0:	e0fffc17 	ldw	r3,-16(fp)
    b0b4:	00a00034 	movhi	r2,32768
    b0b8:	10bfffc4 	addi	r2,r2,-1
    b0bc:	18800226 	beq	r3,r2,b0c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    b0c0:	e0bffc17 	ldw	r2,-16(fp)
    b0c4:	00000206 	br	b0d0 <altera_avalon_jtag_uart_ioctl+0x84>
    b0c8:	00a00034 	movhi	r2,32768
    b0cc:	10bfff84 	addi	r2,r2,-2
    b0d0:	e0fffd17 	ldw	r3,-12(fp)
    b0d4:	18800115 	stw	r2,4(r3)
      rc = 0;
    b0d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b0dc:	00000f06 	br	b11c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b0e0:	e0bffd17 	ldw	r2,-12(fp)
    b0e4:	10c00117 	ldw	r3,4(r2)
    b0e8:	00a00034 	movhi	r2,32768
    b0ec:	10bfffc4 	addi	r2,r2,-1
    b0f0:	18800c26 	beq	r3,r2,b124 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b0f4:	e0bffd17 	ldw	r2,-12(fp)
    b0f8:	10c00917 	ldw	r3,36(r2)
    b0fc:	e0bffd17 	ldw	r2,-12(fp)
    b100:	10800117 	ldw	r2,4(r2)
    b104:	1885803a 	cmpltu	r2,r3,r2
    b108:	10c03fcc 	andi	r3,r2,255
    b10c:	e0bfff17 	ldw	r2,-4(fp)
    b110:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b114:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b118:	00000206 	br	b124 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b11c:	0001883a 	nop
    b120:	00000106 	br	b128 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b124:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b128:	e0bffb17 	ldw	r2,-20(fp)
}
    b12c:	e037883a 	mov	sp,fp
    b130:	df000017 	ldw	fp,0(sp)
    b134:	dec00104 	addi	sp,sp,4
    b138:	f800283a 	ret

0000b13c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b13c:	defff304 	addi	sp,sp,-52
    b140:	dfc00c15 	stw	ra,48(sp)
    b144:	df000b15 	stw	fp,44(sp)
    b148:	df000b04 	addi	fp,sp,44
    b14c:	e13ffc15 	stw	r4,-16(fp)
    b150:	e17ffd15 	stw	r5,-12(fp)
    b154:	e1bffe15 	stw	r6,-8(fp)
    b158:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b15c:	e0bffd17 	ldw	r2,-12(fp)
    b160:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b164:	00004706 	br	b284 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b168:	e0bffc17 	ldw	r2,-16(fp)
    b16c:	10800a17 	ldw	r2,40(r2)
    b170:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b174:	e0bffc17 	ldw	r2,-16(fp)
    b178:	10800b17 	ldw	r2,44(r2)
    b17c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    b180:	e0fff717 	ldw	r3,-36(fp)
    b184:	e0bff817 	ldw	r2,-32(fp)
    b188:	18800536 	bltu	r3,r2,b1a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b18c:	e0fff717 	ldw	r3,-36(fp)
    b190:	e0bff817 	ldw	r2,-32(fp)
    b194:	1885c83a 	sub	r2,r3,r2
    b198:	e0bff615 	stw	r2,-40(fp)
    b19c:	00000406 	br	b1b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b1a0:	00c20004 	movi	r3,2048
    b1a4:	e0bff817 	ldw	r2,-32(fp)
    b1a8:	1885c83a 	sub	r2,r3,r2
    b1ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b1b0:	e0bff617 	ldw	r2,-40(fp)
    b1b4:	10001e26 	beq	r2,zero,b230 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    b1b8:	e0fffe17 	ldw	r3,-8(fp)
    b1bc:	e0bff617 	ldw	r2,-40(fp)
    b1c0:	1880022e 	bgeu	r3,r2,b1cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
    b1c4:	e0bffe17 	ldw	r2,-8(fp)
    b1c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b1cc:	e0bffc17 	ldw	r2,-16(fp)
    b1d0:	10c00e04 	addi	r3,r2,56
    b1d4:	e0bff817 	ldw	r2,-32(fp)
    b1d8:	1885883a 	add	r2,r3,r2
    b1dc:	e1bff617 	ldw	r6,-40(fp)
    b1e0:	100b883a 	mov	r5,r2
    b1e4:	e13ff517 	ldw	r4,-44(fp)
    b1e8:	000c3b80 	call	c3b8 <memcpy>
      ptr   += n;
    b1ec:	e0fff517 	ldw	r3,-44(fp)
    b1f0:	e0bff617 	ldw	r2,-40(fp)
    b1f4:	1885883a 	add	r2,r3,r2
    b1f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    b1fc:	e0fffe17 	ldw	r3,-8(fp)
    b200:	e0bff617 	ldw	r2,-40(fp)
    b204:	1885c83a 	sub	r2,r3,r2
    b208:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b20c:	e0fff817 	ldw	r3,-32(fp)
    b210:	e0bff617 	ldw	r2,-40(fp)
    b214:	1885883a 	add	r2,r3,r2
    b218:	10c1ffcc 	andi	r3,r2,2047
    b21c:	e0bffc17 	ldw	r2,-16(fp)
    b220:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b224:	e0bffe17 	ldw	r2,-8(fp)
    b228:	00bfcf16 	blt	zero,r2,b168 <_gp+0xffff5194>
    b22c:	00000106 	br	b234 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b230:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b234:	e0fff517 	ldw	r3,-44(fp)
    b238:	e0bffd17 	ldw	r2,-12(fp)
    b23c:	1880141e 	bne	r3,r2,b290 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b240:	e0bfff17 	ldw	r2,-4(fp)
    b244:	1090000c 	andi	r2,r2,16384
    b248:	1000131e 	bne	r2,zero,b298 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b24c:	0001883a 	nop
    b250:	e0bffc17 	ldw	r2,-16(fp)
    b254:	10c00a17 	ldw	r3,40(r2)
    b258:	e0bff717 	ldw	r2,-36(fp)
    b25c:	1880051e 	bne	r3,r2,b274 <altera_avalon_jtag_uart_read+0x138>
    b260:	e0bffc17 	ldw	r2,-16(fp)
    b264:	10c00917 	ldw	r3,36(r2)
    b268:	e0bffc17 	ldw	r2,-16(fp)
    b26c:	10800117 	ldw	r2,4(r2)
    b270:	18bff736 	bltu	r3,r2,b250 <_gp+0xffff527c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b274:	e0bffc17 	ldw	r2,-16(fp)
    b278:	10c00a17 	ldw	r3,40(r2)
    b27c:	e0bff717 	ldw	r2,-36(fp)
    b280:	18800726 	beq	r3,r2,b2a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b284:	e0bffe17 	ldw	r2,-8(fp)
    b288:	00bfb716 	blt	zero,r2,b168 <_gp+0xffff5194>
    b28c:	00000506 	br	b2a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b290:	0001883a 	nop
    b294:	00000306 	br	b2a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b298:	0001883a 	nop
    b29c:	00000106 	br	b2a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b2a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b2a4:	e0fff517 	ldw	r3,-44(fp)
    b2a8:	e0bffd17 	ldw	r2,-12(fp)
    b2ac:	18801826 	beq	r3,r2,b310 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2b0:	0005303a 	rdctl	r2,status
    b2b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2b8:	e0fffb17 	ldw	r3,-20(fp)
    b2bc:	00bfff84 	movi	r2,-2
    b2c0:	1884703a 	and	r2,r3,r2
    b2c4:	1001703a 	wrctl	status,r2
  
  return context;
    b2c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b2cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b2d0:	e0bffc17 	ldw	r2,-16(fp)
    b2d4:	10800817 	ldw	r2,32(r2)
    b2d8:	10c00054 	ori	r3,r2,1
    b2dc:	e0bffc17 	ldw	r2,-16(fp)
    b2e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2e4:	e0bffc17 	ldw	r2,-16(fp)
    b2e8:	10800017 	ldw	r2,0(r2)
    b2ec:	10800104 	addi	r2,r2,4
    b2f0:	1007883a 	mov	r3,r2
    b2f4:	e0bffc17 	ldw	r2,-16(fp)
    b2f8:	10800817 	ldw	r2,32(r2)
    b2fc:	18800035 	stwio	r2,0(r3)
    b300:	e0bffa17 	ldw	r2,-24(fp)
    b304:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b308:	e0bff917 	ldw	r2,-28(fp)
    b30c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b310:	e0fff517 	ldw	r3,-44(fp)
    b314:	e0bffd17 	ldw	r2,-12(fp)
    b318:	18800426 	beq	r3,r2,b32c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    b31c:	e0fff517 	ldw	r3,-44(fp)
    b320:	e0bffd17 	ldw	r2,-12(fp)
    b324:	1885c83a 	sub	r2,r3,r2
    b328:	00000606 	br	b344 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    b32c:	e0bfff17 	ldw	r2,-4(fp)
    b330:	1090000c 	andi	r2,r2,16384
    b334:	10000226 	beq	r2,zero,b340 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b338:	00bffd44 	movi	r2,-11
    b33c:	00000106 	br	b344 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    b340:	00bffec4 	movi	r2,-5
}
    b344:	e037883a 	mov	sp,fp
    b348:	dfc00117 	ldw	ra,4(sp)
    b34c:	df000017 	ldw	fp,0(sp)
    b350:	dec00204 	addi	sp,sp,8
    b354:	f800283a 	ret

0000b358 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b358:	defff304 	addi	sp,sp,-52
    b35c:	dfc00c15 	stw	ra,48(sp)
    b360:	df000b15 	stw	fp,44(sp)
    b364:	df000b04 	addi	fp,sp,44
    b368:	e13ffc15 	stw	r4,-16(fp)
    b36c:	e17ffd15 	stw	r5,-12(fp)
    b370:	e1bffe15 	stw	r6,-8(fp)
    b374:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b378:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b37c:	e0bffd17 	ldw	r2,-12(fp)
    b380:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b384:	00003706 	br	b464 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b388:	e0bffc17 	ldw	r2,-16(fp)
    b38c:	10800c17 	ldw	r2,48(r2)
    b390:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    b394:	e0bffc17 	ldw	r2,-16(fp)
    b398:	10800d17 	ldw	r2,52(r2)
    b39c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    b3a0:	e0fff917 	ldw	r3,-28(fp)
    b3a4:	e0bff517 	ldw	r2,-44(fp)
    b3a8:	1880062e 	bgeu	r3,r2,b3c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b3ac:	e0fff517 	ldw	r3,-44(fp)
    b3b0:	e0bff917 	ldw	r2,-28(fp)
    b3b4:	1885c83a 	sub	r2,r3,r2
    b3b8:	10bfffc4 	addi	r2,r2,-1
    b3bc:	e0bff615 	stw	r2,-40(fp)
    b3c0:	00000b06 	br	b3f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    b3c4:	e0bff517 	ldw	r2,-44(fp)
    b3c8:	10000526 	beq	r2,zero,b3e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b3cc:	00c20004 	movi	r3,2048
    b3d0:	e0bff917 	ldw	r2,-28(fp)
    b3d4:	1885c83a 	sub	r2,r3,r2
    b3d8:	e0bff615 	stw	r2,-40(fp)
    b3dc:	00000406 	br	b3f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b3e0:	00c1ffc4 	movi	r3,2047
    b3e4:	e0bff917 	ldw	r2,-28(fp)
    b3e8:	1885c83a 	sub	r2,r3,r2
    b3ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b3f0:	e0bff617 	ldw	r2,-40(fp)
    b3f4:	10001e26 	beq	r2,zero,b470 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    b3f8:	e0fffe17 	ldw	r3,-8(fp)
    b3fc:	e0bff617 	ldw	r2,-40(fp)
    b400:	1880022e 	bgeu	r3,r2,b40c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    b404:	e0bffe17 	ldw	r2,-8(fp)
    b408:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b40c:	e0bffc17 	ldw	r2,-16(fp)
    b410:	10c20e04 	addi	r3,r2,2104
    b414:	e0bff917 	ldw	r2,-28(fp)
    b418:	1885883a 	add	r2,r3,r2
    b41c:	e1bff617 	ldw	r6,-40(fp)
    b420:	e17ffd17 	ldw	r5,-12(fp)
    b424:	1009883a 	mov	r4,r2
    b428:	000c3b80 	call	c3b8 <memcpy>
      ptr   += n;
    b42c:	e0fffd17 	ldw	r3,-12(fp)
    b430:	e0bff617 	ldw	r2,-40(fp)
    b434:	1885883a 	add	r2,r3,r2
    b438:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b43c:	e0fffe17 	ldw	r3,-8(fp)
    b440:	e0bff617 	ldw	r2,-40(fp)
    b444:	1885c83a 	sub	r2,r3,r2
    b448:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b44c:	e0fff917 	ldw	r3,-28(fp)
    b450:	e0bff617 	ldw	r2,-40(fp)
    b454:	1885883a 	add	r2,r3,r2
    b458:	10c1ffcc 	andi	r3,r2,2047
    b45c:	e0bffc17 	ldw	r2,-16(fp)
    b460:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b464:	e0bffe17 	ldw	r2,-8(fp)
    b468:	00bfc716 	blt	zero,r2,b388 <_gp+0xffff53b4>
    b46c:	00000106 	br	b474 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b470:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b474:	0005303a 	rdctl	r2,status
    b478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b47c:	e0fffb17 	ldw	r3,-20(fp)
    b480:	00bfff84 	movi	r2,-2
    b484:	1884703a 	and	r2,r3,r2
    b488:	1001703a 	wrctl	status,r2
  
  return context;
    b48c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b490:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b494:	e0bffc17 	ldw	r2,-16(fp)
    b498:	10800817 	ldw	r2,32(r2)
    b49c:	10c00094 	ori	r3,r2,2
    b4a0:	e0bffc17 	ldw	r2,-16(fp)
    b4a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b4a8:	e0bffc17 	ldw	r2,-16(fp)
    b4ac:	10800017 	ldw	r2,0(r2)
    b4b0:	10800104 	addi	r2,r2,4
    b4b4:	1007883a 	mov	r3,r2
    b4b8:	e0bffc17 	ldw	r2,-16(fp)
    b4bc:	10800817 	ldw	r2,32(r2)
    b4c0:	18800035 	stwio	r2,0(r3)
    b4c4:	e0bffa17 	ldw	r2,-24(fp)
    b4c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4cc:	e0bff817 	ldw	r2,-32(fp)
    b4d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b4d4:	e0bffe17 	ldw	r2,-8(fp)
    b4d8:	0080100e 	bge	zero,r2,b51c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    b4dc:	e0bfff17 	ldw	r2,-4(fp)
    b4e0:	1090000c 	andi	r2,r2,16384
    b4e4:	1000101e 	bne	r2,zero,b528 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b4e8:	0001883a 	nop
    b4ec:	e0bffc17 	ldw	r2,-16(fp)
    b4f0:	10c00d17 	ldw	r3,52(r2)
    b4f4:	e0bff517 	ldw	r2,-44(fp)
    b4f8:	1880051e 	bne	r3,r2,b510 <altera_avalon_jtag_uart_write+0x1b8>
    b4fc:	e0bffc17 	ldw	r2,-16(fp)
    b500:	10c00917 	ldw	r3,36(r2)
    b504:	e0bffc17 	ldw	r2,-16(fp)
    b508:	10800117 	ldw	r2,4(r2)
    b50c:	18bff736 	bltu	r3,r2,b4ec <_gp+0xffff5518>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b510:	e0bffc17 	ldw	r2,-16(fp)
    b514:	10800917 	ldw	r2,36(r2)
    b518:	1000051e 	bne	r2,zero,b530 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    b51c:	e0bffe17 	ldw	r2,-8(fp)
    b520:	00bfd016 	blt	zero,r2,b464 <_gp+0xffff5490>
    b524:	00000306 	br	b534 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b528:	0001883a 	nop
    b52c:	00000106 	br	b534 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    b530:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b534:	e0fffd17 	ldw	r3,-12(fp)
    b538:	e0bff717 	ldw	r2,-36(fp)
    b53c:	18800426 	beq	r3,r2,b550 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    b540:	e0fffd17 	ldw	r3,-12(fp)
    b544:	e0bff717 	ldw	r2,-36(fp)
    b548:	1885c83a 	sub	r2,r3,r2
    b54c:	00000606 	br	b568 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    b550:	e0bfff17 	ldw	r2,-4(fp)
    b554:	1090000c 	andi	r2,r2,16384
    b558:	10000226 	beq	r2,zero,b564 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    b55c:	00bffd44 	movi	r2,-11
    b560:	00000106 	br	b568 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b564:	00bffec4 	movi	r2,-5
}
    b568:	e037883a 	mov	sp,fp
    b56c:	dfc00117 	ldw	ra,4(sp)
    b570:	df000017 	ldw	fp,0(sp)
    b574:	dec00204 	addi	sp,sp,8
    b578:	f800283a 	ret

0000b57c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b57c:	defff504 	addi	sp,sp,-44
    b580:	df000a15 	stw	fp,40(sp)
    b584:	df000a04 	addi	fp,sp,40
    b588:	e13ffc15 	stw	r4,-16(fp)
    b58c:	e17ffd15 	stw	r5,-12(fp)
    b590:	e1bffe15 	stw	r6,-8(fp)
    b594:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b598:	e03ff615 	stw	zero,-40(fp)
    b59c:	d0a5c317 	ldw	r2,-26868(gp)
  
  if (alt_ticks_per_second ())
    b5a0:	10003c26 	beq	r2,zero,b694 <alt_alarm_start+0x118>
  {
    if (alarm)
    b5a4:	e0bffc17 	ldw	r2,-16(fp)
    b5a8:	10003826 	beq	r2,zero,b68c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b5ac:	e0bffc17 	ldw	r2,-16(fp)
    b5b0:	e0fffe17 	ldw	r3,-8(fp)
    b5b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b5b8:	e0bffc17 	ldw	r2,-16(fp)
    b5bc:	e0ffff17 	ldw	r3,-4(fp)
    b5c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5c4:	0005303a 	rdctl	r2,status
    b5c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5cc:	e0fff917 	ldw	r3,-28(fp)
    b5d0:	00bfff84 	movi	r2,-2
    b5d4:	1884703a 	and	r2,r3,r2
    b5d8:	1001703a 	wrctl	status,r2
  
  return context;
    b5dc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b5e0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b5e4:	d0a5c417 	ldw	r2,-26864(gp)
      
      current_nticks = alt_nticks();
    b5e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b5ec:	e0fffd17 	ldw	r3,-12(fp)
    b5f0:	e0bff617 	ldw	r2,-40(fp)
    b5f4:	1885883a 	add	r2,r3,r2
    b5f8:	10c00044 	addi	r3,r2,1
    b5fc:	e0bffc17 	ldw	r2,-16(fp)
    b600:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b604:	e0bffc17 	ldw	r2,-16(fp)
    b608:	10c00217 	ldw	r3,8(r2)
    b60c:	e0bff617 	ldw	r2,-40(fp)
    b610:	1880042e 	bgeu	r3,r2,b624 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b614:	e0bffc17 	ldw	r2,-16(fp)
    b618:	00c00044 	movi	r3,1
    b61c:	10c00405 	stb	r3,16(r2)
    b620:	00000206 	br	b62c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b624:	e0bffc17 	ldw	r2,-16(fp)
    b628:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b62c:	e0bffc17 	ldw	r2,-16(fp)
    b630:	d0e01304 	addi	r3,gp,-32692
    b634:	e0fffa15 	stw	r3,-24(fp)
    b638:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b63c:	e0bffb17 	ldw	r2,-20(fp)
    b640:	e0fffa17 	ldw	r3,-24(fp)
    b644:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b648:	e0bffa17 	ldw	r2,-24(fp)
    b64c:	10c00017 	ldw	r3,0(r2)
    b650:	e0bffb17 	ldw	r2,-20(fp)
    b654:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b658:	e0bffa17 	ldw	r2,-24(fp)
    b65c:	10800017 	ldw	r2,0(r2)
    b660:	e0fffb17 	ldw	r3,-20(fp)
    b664:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b668:	e0bffa17 	ldw	r2,-24(fp)
    b66c:	e0fffb17 	ldw	r3,-20(fp)
    b670:	10c00015 	stw	r3,0(r2)
    b674:	e0bff817 	ldw	r2,-32(fp)
    b678:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b67c:	e0bff717 	ldw	r2,-36(fp)
    b680:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b684:	0005883a 	mov	r2,zero
    b688:	00000306 	br	b698 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b68c:	00bffa84 	movi	r2,-22
    b690:	00000106 	br	b698 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b694:	00bfde84 	movi	r2,-134
  }
}
    b698:	e037883a 	mov	sp,fp
    b69c:	df000017 	ldw	fp,0(sp)
    b6a0:	dec00104 	addi	sp,sp,4
    b6a4:	f800283a 	ret

0000b6a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6a8:	defffe04 	addi	sp,sp,-8
    b6ac:	dfc00115 	stw	ra,4(sp)
    b6b0:	df000015 	stw	fp,0(sp)
    b6b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6b8:	d0a01217 	ldw	r2,-32696(gp)
    b6bc:	10000326 	beq	r2,zero,b6cc <alt_get_errno+0x24>
    b6c0:	d0a01217 	ldw	r2,-32696(gp)
    b6c4:	103ee83a 	callr	r2
    b6c8:	00000106 	br	b6d0 <alt_get_errno+0x28>
    b6cc:	d0a5c504 	addi	r2,gp,-26860
}
    b6d0:	e037883a 	mov	sp,fp
    b6d4:	dfc00117 	ldw	ra,4(sp)
    b6d8:	df000017 	ldw	fp,0(sp)
    b6dc:	dec00204 	addi	sp,sp,8
    b6e0:	f800283a 	ret

0000b6e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b6e4:	defffb04 	addi	sp,sp,-20
    b6e8:	dfc00415 	stw	ra,16(sp)
    b6ec:	df000315 	stw	fp,12(sp)
    b6f0:	df000304 	addi	fp,sp,12
    b6f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b6f8:	e0bfff17 	ldw	r2,-4(fp)
    b6fc:	10000816 	blt	r2,zero,b720 <close+0x3c>
    b700:	01400304 	movi	r5,12
    b704:	e13fff17 	ldw	r4,-4(fp)
    b708:	00088d40 	call	88d4 <__mulsi3>
    b70c:	1007883a 	mov	r3,r2
    b710:	00800074 	movhi	r2,1
    b714:	10b68c04 	addi	r2,r2,-9680
    b718:	1885883a 	add	r2,r3,r2
    b71c:	00000106 	br	b724 <close+0x40>
    b720:	0005883a 	mov	r2,zero
    b724:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b728:	e0bffd17 	ldw	r2,-12(fp)
    b72c:	10001926 	beq	r2,zero,b794 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b730:	e0bffd17 	ldw	r2,-12(fp)
    b734:	10800017 	ldw	r2,0(r2)
    b738:	10800417 	ldw	r2,16(r2)
    b73c:	10000626 	beq	r2,zero,b758 <close+0x74>
    b740:	e0bffd17 	ldw	r2,-12(fp)
    b744:	10800017 	ldw	r2,0(r2)
    b748:	10800417 	ldw	r2,16(r2)
    b74c:	e13ffd17 	ldw	r4,-12(fp)
    b750:	103ee83a 	callr	r2
    b754:	00000106 	br	b75c <close+0x78>
    b758:	0005883a 	mov	r2,zero
    b75c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b760:	e13fff17 	ldw	r4,-4(fp)
    b764:	000be480 	call	be48 <alt_release_fd>
    if (rval < 0)
    b768:	e0bffe17 	ldw	r2,-8(fp)
    b76c:	1000070e 	bge	r2,zero,b78c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b770:	000b6a80 	call	b6a8 <alt_get_errno>
    b774:	1007883a 	mov	r3,r2
    b778:	e0bffe17 	ldw	r2,-8(fp)
    b77c:	0085c83a 	sub	r2,zero,r2
    b780:	18800015 	stw	r2,0(r3)
      return -1;
    b784:	00bfffc4 	movi	r2,-1
    b788:	00000706 	br	b7a8 <close+0xc4>
    }
    return 0;
    b78c:	0005883a 	mov	r2,zero
    b790:	00000506 	br	b7a8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b794:	000b6a80 	call	b6a8 <alt_get_errno>
    b798:	1007883a 	mov	r3,r2
    b79c:	00801444 	movi	r2,81
    b7a0:	18800015 	stw	r2,0(r3)
    return -1;
    b7a4:	00bfffc4 	movi	r2,-1
  }
}
    b7a8:	e037883a 	mov	sp,fp
    b7ac:	dfc00117 	ldw	ra,4(sp)
    b7b0:	df000017 	ldw	fp,0(sp)
    b7b4:	dec00204 	addi	sp,sp,8
    b7b8:	f800283a 	ret

0000b7bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b7bc:	deffff04 	addi	sp,sp,-4
    b7c0:	df000015 	stw	fp,0(sp)
    b7c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b7c8:	0001883a 	nop
    b7cc:	e037883a 	mov	sp,fp
    b7d0:	df000017 	ldw	fp,0(sp)
    b7d4:	dec00104 	addi	sp,sp,4
    b7d8:	f800283a 	ret

0000b7dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b7dc:	defffc04 	addi	sp,sp,-16
    b7e0:	df000315 	stw	fp,12(sp)
    b7e4:	df000304 	addi	fp,sp,12
    b7e8:	e13ffd15 	stw	r4,-12(fp)
    b7ec:	e17ffe15 	stw	r5,-8(fp)
    b7f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b7f4:	e0bfff17 	ldw	r2,-4(fp)
}
    b7f8:	e037883a 	mov	sp,fp
    b7fc:	df000017 	ldw	fp,0(sp)
    b800:	dec00104 	addi	sp,sp,4
    b804:	f800283a 	ret

0000b808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b808:	defffe04 	addi	sp,sp,-8
    b80c:	dfc00115 	stw	ra,4(sp)
    b810:	df000015 	stw	fp,0(sp)
    b814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b818:	d0a01217 	ldw	r2,-32696(gp)
    b81c:	10000326 	beq	r2,zero,b82c <alt_get_errno+0x24>
    b820:	d0a01217 	ldw	r2,-32696(gp)
    b824:	103ee83a 	callr	r2
    b828:	00000106 	br	b830 <alt_get_errno+0x28>
    b82c:	d0a5c504 	addi	r2,gp,-26860
}
    b830:	e037883a 	mov	sp,fp
    b834:	dfc00117 	ldw	ra,4(sp)
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00204 	addi	sp,sp,8
    b840:	f800283a 	ret

0000b844 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b844:	defffa04 	addi	sp,sp,-24
    b848:	dfc00515 	stw	ra,20(sp)
    b84c:	df000415 	stw	fp,16(sp)
    b850:	df000404 	addi	fp,sp,16
    b854:	e13ffe15 	stw	r4,-8(fp)
    b858:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b85c:	e0bffe17 	ldw	r2,-8(fp)
    b860:	10000326 	beq	r2,zero,b870 <alt_dev_llist_insert+0x2c>
    b864:	e0bffe17 	ldw	r2,-8(fp)
    b868:	10800217 	ldw	r2,8(r2)
    b86c:	1000061e 	bne	r2,zero,b888 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    b870:	000b8080 	call	b808 <alt_get_errno>
    b874:	1007883a 	mov	r3,r2
    b878:	00800584 	movi	r2,22
    b87c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b880:	00bffa84 	movi	r2,-22
    b884:	00001306 	br	b8d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b888:	e0bffe17 	ldw	r2,-8(fp)
    b88c:	e0ffff17 	ldw	r3,-4(fp)
    b890:	e0fffc15 	stw	r3,-16(fp)
    b894:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b898:	e0bffd17 	ldw	r2,-12(fp)
    b89c:	e0fffc17 	ldw	r3,-16(fp)
    b8a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b8a4:	e0bffc17 	ldw	r2,-16(fp)
    b8a8:	10c00017 	ldw	r3,0(r2)
    b8ac:	e0bffd17 	ldw	r2,-12(fp)
    b8b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b8b4:	e0bffc17 	ldw	r2,-16(fp)
    b8b8:	10800017 	ldw	r2,0(r2)
    b8bc:	e0fffd17 	ldw	r3,-12(fp)
    b8c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b8c4:	e0bffc17 	ldw	r2,-16(fp)
    b8c8:	e0fffd17 	ldw	r3,-12(fp)
    b8cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    b8d0:	0005883a 	mov	r2,zero
}
    b8d4:	e037883a 	mov	sp,fp
    b8d8:	dfc00117 	ldw	ra,4(sp)
    b8dc:	df000017 	ldw	fp,0(sp)
    b8e0:	dec00204 	addi	sp,sp,8
    b8e4:	f800283a 	ret

0000b8e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b8e8:	defffd04 	addi	sp,sp,-12
    b8ec:	dfc00215 	stw	ra,8(sp)
    b8f0:	df000115 	stw	fp,4(sp)
    b8f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b8f8:	00800074 	movhi	r2,1
    b8fc:	10b21804 	addi	r2,r2,-14240
    b900:	e0bfff15 	stw	r2,-4(fp)
    b904:	00000606 	br	b920 <_do_ctors+0x38>
        (*ctor) (); 
    b908:	e0bfff17 	ldw	r2,-4(fp)
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b914:	e0bfff17 	ldw	r2,-4(fp)
    b918:	10bfff04 	addi	r2,r2,-4
    b91c:	e0bfff15 	stw	r2,-4(fp)
    b920:	e0ffff17 	ldw	r3,-4(fp)
    b924:	00800074 	movhi	r2,1
    b928:	10b21904 	addi	r2,r2,-14236
    b92c:	18bff62e 	bgeu	r3,r2,b908 <_gp+0xffff5934>
        (*ctor) (); 
}
    b930:	0001883a 	nop
    b934:	e037883a 	mov	sp,fp
    b938:	dfc00117 	ldw	ra,4(sp)
    b93c:	df000017 	ldw	fp,0(sp)
    b940:	dec00204 	addi	sp,sp,8
    b944:	f800283a 	ret

0000b948 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b948:	defffd04 	addi	sp,sp,-12
    b94c:	dfc00215 	stw	ra,8(sp)
    b950:	df000115 	stw	fp,4(sp)
    b954:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b958:	00800074 	movhi	r2,1
    b95c:	10b21804 	addi	r2,r2,-14240
    b960:	e0bfff15 	stw	r2,-4(fp)
    b964:	00000606 	br	b980 <_do_dtors+0x38>
        (*dtor) (); 
    b968:	e0bfff17 	ldw	r2,-4(fp)
    b96c:	10800017 	ldw	r2,0(r2)
    b970:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b974:	e0bfff17 	ldw	r2,-4(fp)
    b978:	10bfff04 	addi	r2,r2,-4
    b97c:	e0bfff15 	stw	r2,-4(fp)
    b980:	e0ffff17 	ldw	r3,-4(fp)
    b984:	00800074 	movhi	r2,1
    b988:	10b21904 	addi	r2,r2,-14236
    b98c:	18bff62e 	bgeu	r3,r2,b968 <_gp+0xffff5994>
        (*dtor) (); 
}
    b990:	0001883a 	nop
    b994:	e037883a 	mov	sp,fp
    b998:	dfc00117 	ldw	ra,4(sp)
    b99c:	df000017 	ldw	fp,0(sp)
    b9a0:	dec00204 	addi	sp,sp,8
    b9a4:	f800283a 	ret

0000b9a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b9a8:	deffff04 	addi	sp,sp,-4
    b9ac:	df000015 	stw	fp,0(sp)
    b9b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b9b4:	0001883a 	nop
    b9b8:	e037883a 	mov	sp,fp
    b9bc:	df000017 	ldw	fp,0(sp)
    b9c0:	dec00104 	addi	sp,sp,4
    b9c4:	f800283a 	ret

0000b9c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    b9c8:	defffe04 	addi	sp,sp,-8
    b9cc:	df000115 	stw	fp,4(sp)
    b9d0:	df000104 	addi	fp,sp,4
    b9d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    b9d8:	e0bfff17 	ldw	r2,-4(fp)
    b9dc:	10bffe84 	addi	r2,r2,-6
    b9e0:	10c00428 	cmpgeui	r3,r2,16
    b9e4:	18001a1e 	bne	r3,zero,ba50 <alt_exception_cause_generated_bad_addr+0x88>
    b9e8:	100690ba 	slli	r3,r2,2
    b9ec:	00800074 	movhi	r2,1
    b9f0:	10ae8004 	addi	r2,r2,-17920
    b9f4:	1885883a 	add	r2,r3,r2
    b9f8:	10800017 	ldw	r2,0(r2)
    b9fc:	1000683a 	jmp	r2
    ba00:	0000ba40 	call	ba4 <__reset-0x745c>
    ba04:	0000ba40 	call	ba4 <__reset-0x745c>
    ba08:	0000ba50 	cmplti	zero,zero,745
    ba0c:	0000ba50 	cmplti	zero,zero,745
    ba10:	0000ba50 	cmplti	zero,zero,745
    ba14:	0000ba40 	call	ba4 <__reset-0x745c>
    ba18:	0000ba48 	cmpgei	zero,zero,745
    ba1c:	0000ba50 	cmplti	zero,zero,745
    ba20:	0000ba40 	call	ba4 <__reset-0x745c>
    ba24:	0000ba40 	call	ba4 <__reset-0x745c>
    ba28:	0000ba50 	cmplti	zero,zero,745
    ba2c:	0000ba40 	call	ba4 <__reset-0x745c>
    ba30:	0000ba48 	cmpgei	zero,zero,745
    ba34:	0000ba50 	cmplti	zero,zero,745
    ba38:	0000ba50 	cmplti	zero,zero,745
    ba3c:	0000ba40 	call	ba4 <__reset-0x745c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    ba40:	00800044 	movi	r2,1
    ba44:	00000306 	br	ba54 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    ba48:	0005883a 	mov	r2,zero
    ba4c:	00000106 	br	ba54 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    ba50:	0005883a 	mov	r2,zero
  }
}
    ba54:	e037883a 	mov	sp,fp
    ba58:	df000017 	ldw	fp,0(sp)
    ba5c:	dec00104 	addi	sp,sp,4
    ba60:	f800283a 	ret

0000ba64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ba64:	defff804 	addi	sp,sp,-32
    ba68:	dfc00715 	stw	ra,28(sp)
    ba6c:	df000615 	stw	fp,24(sp)
    ba70:	dc000515 	stw	r16,20(sp)
    ba74:	df000604 	addi	fp,sp,24
    ba78:	e13ffb15 	stw	r4,-20(fp)
    ba7c:	e17ffc15 	stw	r5,-16(fp)
    ba80:	e1bffd15 	stw	r6,-12(fp)
    ba84:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    ba88:	e1bffe17 	ldw	r6,-8(fp)
    ba8c:	e17ffd17 	ldw	r5,-12(fp)
    ba90:	e13ffc17 	ldw	r4,-16(fp)
    ba94:	000bcec0 	call	bcec <open>
    ba98:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    ba9c:	e0bffa17 	ldw	r2,-24(fp)
    baa0:	10002216 	blt	r2,zero,bb2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    baa4:	04000074 	movhi	r16,1
    baa8:	84368c04 	addi	r16,r16,-9680
    baac:	e0bffa17 	ldw	r2,-24(fp)
    bab0:	01400304 	movi	r5,12
    bab4:	1009883a 	mov	r4,r2
    bab8:	00088d40 	call	88d4 <__mulsi3>
    babc:	8085883a 	add	r2,r16,r2
    bac0:	10c00017 	ldw	r3,0(r2)
    bac4:	e0bffb17 	ldw	r2,-20(fp)
    bac8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bacc:	04000074 	movhi	r16,1
    bad0:	84368c04 	addi	r16,r16,-9680
    bad4:	e0bffa17 	ldw	r2,-24(fp)
    bad8:	01400304 	movi	r5,12
    badc:	1009883a 	mov	r4,r2
    bae0:	00088d40 	call	88d4 <__mulsi3>
    bae4:	8085883a 	add	r2,r16,r2
    bae8:	10800104 	addi	r2,r2,4
    baec:	10c00017 	ldw	r3,0(r2)
    baf0:	e0bffb17 	ldw	r2,-20(fp)
    baf4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    baf8:	04000074 	movhi	r16,1
    bafc:	84368c04 	addi	r16,r16,-9680
    bb00:	e0bffa17 	ldw	r2,-24(fp)
    bb04:	01400304 	movi	r5,12
    bb08:	1009883a 	mov	r4,r2
    bb0c:	00088d40 	call	88d4 <__mulsi3>
    bb10:	8085883a 	add	r2,r16,r2
    bb14:	10800204 	addi	r2,r2,8
    bb18:	10c00017 	ldw	r3,0(r2)
    bb1c:	e0bffb17 	ldw	r2,-20(fp)
    bb20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bb24:	e13ffa17 	ldw	r4,-24(fp)
    bb28:	000be480 	call	be48 <alt_release_fd>
  }
} 
    bb2c:	0001883a 	nop
    bb30:	e6ffff04 	addi	sp,fp,-4
    bb34:	dfc00217 	ldw	ra,8(sp)
    bb38:	df000117 	ldw	fp,4(sp)
    bb3c:	dc000017 	ldw	r16,0(sp)
    bb40:	dec00304 	addi	sp,sp,12
    bb44:	f800283a 	ret

0000bb48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bb48:	defffb04 	addi	sp,sp,-20
    bb4c:	dfc00415 	stw	ra,16(sp)
    bb50:	df000315 	stw	fp,12(sp)
    bb54:	df000304 	addi	fp,sp,12
    bb58:	e13ffd15 	stw	r4,-12(fp)
    bb5c:	e17ffe15 	stw	r5,-8(fp)
    bb60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bb64:	01c07fc4 	movi	r7,511
    bb68:	01800044 	movi	r6,1
    bb6c:	e17ffd17 	ldw	r5,-12(fp)
    bb70:	01000074 	movhi	r4,1
    bb74:	21368f04 	addi	r4,r4,-9668
    bb78:	000ba640 	call	ba64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bb7c:	01c07fc4 	movi	r7,511
    bb80:	000d883a 	mov	r6,zero
    bb84:	e17ffe17 	ldw	r5,-8(fp)
    bb88:	01000074 	movhi	r4,1
    bb8c:	21368c04 	addi	r4,r4,-9680
    bb90:	000ba640 	call	ba64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bb94:	01c07fc4 	movi	r7,511
    bb98:	01800044 	movi	r6,1
    bb9c:	e17fff17 	ldw	r5,-4(fp)
    bba0:	01000074 	movhi	r4,1
    bba4:	21369204 	addi	r4,r4,-9656
    bba8:	000ba640 	call	ba64 <alt_open_fd>
}  
    bbac:	0001883a 	nop
    bbb0:	e037883a 	mov	sp,fp
    bbb4:	dfc00117 	ldw	ra,4(sp)
    bbb8:	df000017 	ldw	fp,0(sp)
    bbbc:	dec00204 	addi	sp,sp,8
    bbc0:	f800283a 	ret

0000bbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbc4:	defffe04 	addi	sp,sp,-8
    bbc8:	dfc00115 	stw	ra,4(sp)
    bbcc:	df000015 	stw	fp,0(sp)
    bbd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bbd4:	d0a01217 	ldw	r2,-32696(gp)
    bbd8:	10000326 	beq	r2,zero,bbe8 <alt_get_errno+0x24>
    bbdc:	d0a01217 	ldw	r2,-32696(gp)
    bbe0:	103ee83a 	callr	r2
    bbe4:	00000106 	br	bbec <alt_get_errno+0x28>
    bbe8:	d0a5c504 	addi	r2,gp,-26860
}
    bbec:	e037883a 	mov	sp,fp
    bbf0:	dfc00117 	ldw	ra,4(sp)
    bbf4:	df000017 	ldw	fp,0(sp)
    bbf8:	dec00204 	addi	sp,sp,8
    bbfc:	f800283a 	ret

0000bc00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bc00:	defffb04 	addi	sp,sp,-20
    bc04:	dfc00415 	stw	ra,16(sp)
    bc08:	df000315 	stw	fp,12(sp)
    bc0c:	dc000215 	stw	r16,8(sp)
    bc10:	df000304 	addi	fp,sp,12
    bc14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc18:	e0bffe17 	ldw	r2,-8(fp)
    bc1c:	10800217 	ldw	r2,8(r2)
    bc20:	10d00034 	orhi	r3,r2,16384
    bc24:	e0bffe17 	ldw	r2,-8(fp)
    bc28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc2c:	e03ffd15 	stw	zero,-12(fp)
    bc30:	00002306 	br	bcc0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc34:	04000074 	movhi	r16,1
    bc38:	84368c04 	addi	r16,r16,-9680
    bc3c:	e0bffd17 	ldw	r2,-12(fp)
    bc40:	01400304 	movi	r5,12
    bc44:	1009883a 	mov	r4,r2
    bc48:	00088d40 	call	88d4 <__mulsi3>
    bc4c:	8085883a 	add	r2,r16,r2
    bc50:	10c00017 	ldw	r3,0(r2)
    bc54:	e0bffe17 	ldw	r2,-8(fp)
    bc58:	10800017 	ldw	r2,0(r2)
    bc5c:	1880151e 	bne	r3,r2,bcb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bc60:	04000074 	movhi	r16,1
    bc64:	84368c04 	addi	r16,r16,-9680
    bc68:	e0bffd17 	ldw	r2,-12(fp)
    bc6c:	01400304 	movi	r5,12
    bc70:	1009883a 	mov	r4,r2
    bc74:	00088d40 	call	88d4 <__mulsi3>
    bc78:	8085883a 	add	r2,r16,r2
    bc7c:	10800204 	addi	r2,r2,8
    bc80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc84:	10000b0e 	bge	r2,zero,bcb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bc88:	01400304 	movi	r5,12
    bc8c:	e13ffd17 	ldw	r4,-12(fp)
    bc90:	00088d40 	call	88d4 <__mulsi3>
    bc94:	1007883a 	mov	r3,r2
    bc98:	00800074 	movhi	r2,1
    bc9c:	10b68c04 	addi	r2,r2,-9680
    bca0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bca4:	e0bffe17 	ldw	r2,-8(fp)
    bca8:	18800226 	beq	r3,r2,bcb4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bcac:	00bffcc4 	movi	r2,-13
    bcb0:	00000806 	br	bcd4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bcb4:	e0bffd17 	ldw	r2,-12(fp)
    bcb8:	10800044 	addi	r2,r2,1
    bcbc:	e0bffd15 	stw	r2,-12(fp)
    bcc0:	d0a01117 	ldw	r2,-32700(gp)
    bcc4:	1007883a 	mov	r3,r2
    bcc8:	e0bffd17 	ldw	r2,-12(fp)
    bccc:	18bfd92e 	bgeu	r3,r2,bc34 <_gp+0xffff5c60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bcd0:	0005883a 	mov	r2,zero
}
    bcd4:	e6ffff04 	addi	sp,fp,-4
    bcd8:	dfc00217 	ldw	ra,8(sp)
    bcdc:	df000117 	ldw	fp,4(sp)
    bce0:	dc000017 	ldw	r16,0(sp)
    bce4:	dec00304 	addi	sp,sp,12
    bce8:	f800283a 	ret

0000bcec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bcec:	defff604 	addi	sp,sp,-40
    bcf0:	dfc00915 	stw	ra,36(sp)
    bcf4:	df000815 	stw	fp,32(sp)
    bcf8:	df000804 	addi	fp,sp,32
    bcfc:	e13ffd15 	stw	r4,-12(fp)
    bd00:	e17ffe15 	stw	r5,-8(fp)
    bd04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bd08:	00bfffc4 	movi	r2,-1
    bd0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    bd10:	00bffb44 	movi	r2,-19
    bd14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    bd18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd1c:	d1600f04 	addi	r5,gp,-32708
    bd20:	e13ffd17 	ldw	r4,-12(fp)
    bd24:	000c0940 	call	c094 <alt_find_dev>
    bd28:	e0bff815 	stw	r2,-32(fp)
    bd2c:	e0bff817 	ldw	r2,-32(fp)
    bd30:	1000051e 	bne	r2,zero,bd48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd34:	e13ffd17 	ldw	r4,-12(fp)
    bd38:	000c1240 	call	c124 <alt_find_file>
    bd3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    bd40:	00800044 	movi	r2,1
    bd44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bd48:	e0bff817 	ldw	r2,-32(fp)
    bd4c:	10002b26 	beq	r2,zero,bdfc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bd50:	e13ff817 	ldw	r4,-32(fp)
    bd54:	000c22c0 	call	c22c <alt_get_fd>
    bd58:	e0bff915 	stw	r2,-28(fp)
    bd5c:	e0bff917 	ldw	r2,-28(fp)
    bd60:	1000030e 	bge	r2,zero,bd70 <open+0x84>
    {
      status = index;
    bd64:	e0bff917 	ldw	r2,-28(fp)
    bd68:	e0bffa15 	stw	r2,-24(fp)
    bd6c:	00002506 	br	be04 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    bd70:	01400304 	movi	r5,12
    bd74:	e13ff917 	ldw	r4,-28(fp)
    bd78:	00088d40 	call	88d4 <__mulsi3>
    bd7c:	1007883a 	mov	r3,r2
    bd80:	00800074 	movhi	r2,1
    bd84:	10b68c04 	addi	r2,r2,-9680
    bd88:	1885883a 	add	r2,r3,r2
    bd8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bd90:	e0fffe17 	ldw	r3,-8(fp)
    bd94:	00900034 	movhi	r2,16384
    bd98:	10bfffc4 	addi	r2,r2,-1
    bd9c:	1886703a 	and	r3,r3,r2
    bda0:	e0bffc17 	ldw	r2,-16(fp)
    bda4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bda8:	e0bffb17 	ldw	r2,-20(fp)
    bdac:	1000051e 	bne	r2,zero,bdc4 <open+0xd8>
    bdb0:	e13ffc17 	ldw	r4,-16(fp)
    bdb4:	000bc000 	call	bc00 <alt_file_locked>
    bdb8:	e0bffa15 	stw	r2,-24(fp)
    bdbc:	e0bffa17 	ldw	r2,-24(fp)
    bdc0:	10001016 	blt	r2,zero,be04 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bdc4:	e0bff817 	ldw	r2,-32(fp)
    bdc8:	10800317 	ldw	r2,12(r2)
    bdcc:	10000826 	beq	r2,zero,bdf0 <open+0x104>
    bdd0:	e0bff817 	ldw	r2,-32(fp)
    bdd4:	10800317 	ldw	r2,12(r2)
    bdd8:	e1ffff17 	ldw	r7,-4(fp)
    bddc:	e1bffe17 	ldw	r6,-8(fp)
    bde0:	e17ffd17 	ldw	r5,-12(fp)
    bde4:	e13ffc17 	ldw	r4,-16(fp)
    bde8:	103ee83a 	callr	r2
    bdec:	00000106 	br	bdf4 <open+0x108>
    bdf0:	0005883a 	mov	r2,zero
    bdf4:	e0bffa15 	stw	r2,-24(fp)
    bdf8:	00000206 	br	be04 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bdfc:	00bffb44 	movi	r2,-19
    be00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    be04:	e0bffa17 	ldw	r2,-24(fp)
    be08:	1000090e 	bge	r2,zero,be30 <open+0x144>
  {
    alt_release_fd (index);  
    be0c:	e13ff917 	ldw	r4,-28(fp)
    be10:	000be480 	call	be48 <alt_release_fd>
    ALT_ERRNO = -status;
    be14:	000bbc40 	call	bbc4 <alt_get_errno>
    be18:	1007883a 	mov	r3,r2
    be1c:	e0bffa17 	ldw	r2,-24(fp)
    be20:	0085c83a 	sub	r2,zero,r2
    be24:	18800015 	stw	r2,0(r3)
    return -1;
    be28:	00bfffc4 	movi	r2,-1
    be2c:	00000106 	br	be34 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    be30:	e0bff917 	ldw	r2,-28(fp)
}
    be34:	e037883a 	mov	sp,fp
    be38:	dfc00117 	ldw	ra,4(sp)
    be3c:	df000017 	ldw	fp,0(sp)
    be40:	dec00204 	addi	sp,sp,8
    be44:	f800283a 	ret

0000be48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    be48:	defffc04 	addi	sp,sp,-16
    be4c:	dfc00315 	stw	ra,12(sp)
    be50:	df000215 	stw	fp,8(sp)
    be54:	dc000115 	stw	r16,4(sp)
    be58:	df000204 	addi	fp,sp,8
    be5c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	108000d0 	cmplti	r2,r2,3
    be68:	1000111e 	bne	r2,zero,beb0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    be6c:	04000074 	movhi	r16,1
    be70:	84368c04 	addi	r16,r16,-9680
    be74:	e0bffe17 	ldw	r2,-8(fp)
    be78:	01400304 	movi	r5,12
    be7c:	1009883a 	mov	r4,r2
    be80:	00088d40 	call	88d4 <__mulsi3>
    be84:	8085883a 	add	r2,r16,r2
    be88:	10800204 	addi	r2,r2,8
    be8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    be90:	04000074 	movhi	r16,1
    be94:	84368c04 	addi	r16,r16,-9680
    be98:	e0bffe17 	ldw	r2,-8(fp)
    be9c:	01400304 	movi	r5,12
    bea0:	1009883a 	mov	r4,r2
    bea4:	00088d40 	call	88d4 <__mulsi3>
    bea8:	8085883a 	add	r2,r16,r2
    beac:	10000015 	stw	zero,0(r2)
  }
}
    beb0:	0001883a 	nop
    beb4:	e6ffff04 	addi	sp,fp,-4
    beb8:	dfc00217 	ldw	ra,8(sp)
    bebc:	df000117 	ldw	fp,4(sp)
    bec0:	dc000017 	ldw	r16,0(sp)
    bec4:	dec00304 	addi	sp,sp,12
    bec8:	f800283a 	ret

0000becc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    becc:	defffa04 	addi	sp,sp,-24
    bed0:	df000515 	stw	fp,20(sp)
    bed4:	df000504 	addi	fp,sp,20
    bed8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bedc:	0005303a 	rdctl	r2,status
    bee0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bee4:	e0fffc17 	ldw	r3,-16(fp)
    bee8:	00bfff84 	movi	r2,-2
    beec:	1884703a 	and	r2,r3,r2
    bef0:	1001703a 	wrctl	status,r2
  
  return context;
    bef4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bef8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    befc:	e0bfff17 	ldw	r2,-4(fp)
    bf00:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf04:	e0bffd17 	ldw	r2,-12(fp)
    bf08:	10800017 	ldw	r2,0(r2)
    bf0c:	e0fffd17 	ldw	r3,-12(fp)
    bf10:	18c00117 	ldw	r3,4(r3)
    bf14:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bf18:	e0bffd17 	ldw	r2,-12(fp)
    bf1c:	10800117 	ldw	r2,4(r2)
    bf20:	e0fffd17 	ldw	r3,-12(fp)
    bf24:	18c00017 	ldw	r3,0(r3)
    bf28:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf2c:	e0bffd17 	ldw	r2,-12(fp)
    bf30:	e0fffd17 	ldw	r3,-12(fp)
    bf34:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bf38:	e0bffd17 	ldw	r2,-12(fp)
    bf3c:	e0fffd17 	ldw	r3,-12(fp)
    bf40:	10c00015 	stw	r3,0(r2)
    bf44:	e0bffb17 	ldw	r2,-20(fp)
    bf48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf4c:	e0bffe17 	ldw	r2,-8(fp)
    bf50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bf54:	0001883a 	nop
    bf58:	e037883a 	mov	sp,fp
    bf5c:	df000017 	ldw	fp,0(sp)
    bf60:	dec00104 	addi	sp,sp,4
    bf64:	f800283a 	ret

0000bf68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bf68:	defffb04 	addi	sp,sp,-20
    bf6c:	dfc00415 	stw	ra,16(sp)
    bf70:	df000315 	stw	fp,12(sp)
    bf74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bf78:	d0a01317 	ldw	r2,-32692(gp)
    bf7c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bf80:	d0a5c417 	ldw	r2,-26864(gp)
    bf84:	10800044 	addi	r2,r2,1
    bf88:	d0a5c415 	stw	r2,-26864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bf8c:	00002e06 	br	c048 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    bf90:	e0bffd17 	ldw	r2,-12(fp)
    bf94:	10800017 	ldw	r2,0(r2)
    bf98:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bf9c:	e0bffd17 	ldw	r2,-12(fp)
    bfa0:	10800403 	ldbu	r2,16(r2)
    bfa4:	10803fcc 	andi	r2,r2,255
    bfa8:	10000426 	beq	r2,zero,bfbc <alt_tick+0x54>
    bfac:	d0a5c417 	ldw	r2,-26864(gp)
    bfb0:	1000021e 	bne	r2,zero,bfbc <alt_tick+0x54>
    {
      alarm->rollover = 0;
    bfb4:	e0bffd17 	ldw	r2,-12(fp)
    bfb8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bfbc:	e0bffd17 	ldw	r2,-12(fp)
    bfc0:	10800217 	ldw	r2,8(r2)
    bfc4:	d0e5c417 	ldw	r3,-26864(gp)
    bfc8:	18801d36 	bltu	r3,r2,c040 <alt_tick+0xd8>
    bfcc:	e0bffd17 	ldw	r2,-12(fp)
    bfd0:	10800403 	ldbu	r2,16(r2)
    bfd4:	10803fcc 	andi	r2,r2,255
    bfd8:	1000191e 	bne	r2,zero,c040 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    bfdc:	e0bffd17 	ldw	r2,-12(fp)
    bfe0:	10800317 	ldw	r2,12(r2)
    bfe4:	e0fffd17 	ldw	r3,-12(fp)
    bfe8:	18c00517 	ldw	r3,20(r3)
    bfec:	1809883a 	mov	r4,r3
    bff0:	103ee83a 	callr	r2
    bff4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bff8:	e0bfff17 	ldw	r2,-4(fp)
    bffc:	1000031e 	bne	r2,zero,c00c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c000:	e13ffd17 	ldw	r4,-12(fp)
    c004:	000becc0 	call	becc <alt_alarm_stop>
    c008:	00000d06 	br	c040 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c00c:	e0bffd17 	ldw	r2,-12(fp)
    c010:	10c00217 	ldw	r3,8(r2)
    c014:	e0bfff17 	ldw	r2,-4(fp)
    c018:	1887883a 	add	r3,r3,r2
    c01c:	e0bffd17 	ldw	r2,-12(fp)
    c020:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c024:	e0bffd17 	ldw	r2,-12(fp)
    c028:	10c00217 	ldw	r3,8(r2)
    c02c:	d0a5c417 	ldw	r2,-26864(gp)
    c030:	1880032e 	bgeu	r3,r2,c040 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	00c00044 	movi	r3,1
    c03c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c040:	e0bffe17 	ldw	r2,-8(fp)
    c044:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c048:	e0fffd17 	ldw	r3,-12(fp)
    c04c:	d0a01304 	addi	r2,gp,-32692
    c050:	18bfcf1e 	bne	r3,r2,bf90 <_gp+0xffff5fbc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c054:	0001883a 	nop
}
    c058:	0001883a 	nop
    c05c:	e037883a 	mov	sp,fp
    c060:	dfc00117 	ldw	ra,4(sp)
    c064:	df000017 	ldw	fp,0(sp)
    c068:	dec00204 	addi	sp,sp,8
    c06c:	f800283a 	ret

0000c070 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c070:	deffff04 	addi	sp,sp,-4
    c074:	df000015 	stw	fp,0(sp)
    c078:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c07c:	000170fa 	wrctl	ienable,zero
}
    c080:	0001883a 	nop
    c084:	e037883a 	mov	sp,fp
    c088:	df000017 	ldw	fp,0(sp)
    c08c:	dec00104 	addi	sp,sp,4
    c090:	f800283a 	ret

0000c094 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c094:	defffa04 	addi	sp,sp,-24
    c098:	dfc00515 	stw	ra,20(sp)
    c09c:	df000415 	stw	fp,16(sp)
    c0a0:	df000404 	addi	fp,sp,16
    c0a4:	e13ffe15 	stw	r4,-8(fp)
    c0a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c0ac:	e0bfff17 	ldw	r2,-4(fp)
    c0b0:	10800017 	ldw	r2,0(r2)
    c0b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c0b8:	e13ffe17 	ldw	r4,-8(fp)
    c0bc:	000c5000 	call	c500 <strlen>
    c0c0:	10800044 	addi	r2,r2,1
    c0c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c0c8:	00000d06 	br	c100 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c0cc:	e0bffc17 	ldw	r2,-16(fp)
    c0d0:	10800217 	ldw	r2,8(r2)
    c0d4:	e0fffd17 	ldw	r3,-12(fp)
    c0d8:	180d883a 	mov	r6,r3
    c0dc:	e17ffe17 	ldw	r5,-8(fp)
    c0e0:	1009883a 	mov	r4,r2
    c0e4:	000c33c0 	call	c33c <memcmp>
    c0e8:	1000021e 	bne	r2,zero,c0f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c0ec:	e0bffc17 	ldw	r2,-16(fp)
    c0f0:	00000706 	br	c110 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c0f4:	e0bffc17 	ldw	r2,-16(fp)
    c0f8:	10800017 	ldw	r2,0(r2)
    c0fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c100:	e0fffc17 	ldw	r3,-16(fp)
    c104:	e0bfff17 	ldw	r2,-4(fp)
    c108:	18bff01e 	bne	r3,r2,c0cc <_gp+0xffff60f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c10c:	0005883a 	mov	r2,zero
}
    c110:	e037883a 	mov	sp,fp
    c114:	dfc00117 	ldw	ra,4(sp)
    c118:	df000017 	ldw	fp,0(sp)
    c11c:	dec00204 	addi	sp,sp,8
    c120:	f800283a 	ret

0000c124 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c124:	defffb04 	addi	sp,sp,-20
    c128:	dfc00415 	stw	ra,16(sp)
    c12c:	df000315 	stw	fp,12(sp)
    c130:	df000304 	addi	fp,sp,12
    c134:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c138:	d0a00d17 	ldw	r2,-32716(gp)
    c13c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c140:	00003106 	br	c208 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c144:	e0bffd17 	ldw	r2,-12(fp)
    c148:	10800217 	ldw	r2,8(r2)
    c14c:	1009883a 	mov	r4,r2
    c150:	000c5000 	call	c500 <strlen>
    c154:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c158:	e0bffd17 	ldw	r2,-12(fp)
    c15c:	10c00217 	ldw	r3,8(r2)
    c160:	e0bffe17 	ldw	r2,-8(fp)
    c164:	10bfffc4 	addi	r2,r2,-1
    c168:	1885883a 	add	r2,r3,r2
    c16c:	10800003 	ldbu	r2,0(r2)
    c170:	10803fcc 	andi	r2,r2,255
    c174:	1080201c 	xori	r2,r2,128
    c178:	10bfe004 	addi	r2,r2,-128
    c17c:	10800bd8 	cmpnei	r2,r2,47
    c180:	1000031e 	bne	r2,zero,c190 <alt_find_file+0x6c>
    {
      len -= 1;
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	10bfffc4 	addi	r2,r2,-1
    c18c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c190:	e0bffe17 	ldw	r2,-8(fp)
    c194:	e0ffff17 	ldw	r3,-4(fp)
    c198:	1885883a 	add	r2,r3,r2
    c19c:	10800003 	ldbu	r2,0(r2)
    c1a0:	10803fcc 	andi	r2,r2,255
    c1a4:	1080201c 	xori	r2,r2,128
    c1a8:	10bfe004 	addi	r2,r2,-128
    c1ac:	10800be0 	cmpeqi	r2,r2,47
    c1b0:	1000081e 	bne	r2,zero,c1d4 <alt_find_file+0xb0>
    c1b4:	e0bffe17 	ldw	r2,-8(fp)
    c1b8:	e0ffff17 	ldw	r3,-4(fp)
    c1bc:	1885883a 	add	r2,r3,r2
    c1c0:	10800003 	ldbu	r2,0(r2)
    c1c4:	10803fcc 	andi	r2,r2,255
    c1c8:	1080201c 	xori	r2,r2,128
    c1cc:	10bfe004 	addi	r2,r2,-128
    c1d0:	10000a1e 	bne	r2,zero,c1fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c1d4:	e0bffd17 	ldw	r2,-12(fp)
    c1d8:	10800217 	ldw	r2,8(r2)
    c1dc:	e0fffe17 	ldw	r3,-8(fp)
    c1e0:	180d883a 	mov	r6,r3
    c1e4:	e17fff17 	ldw	r5,-4(fp)
    c1e8:	1009883a 	mov	r4,r2
    c1ec:	000c33c0 	call	c33c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1f0:	1000021e 	bne	r2,zero,c1fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c1f4:	e0bffd17 	ldw	r2,-12(fp)
    c1f8:	00000706 	br	c218 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	10800017 	ldw	r2,0(r2)
    c204:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c208:	e0fffd17 	ldw	r3,-12(fp)
    c20c:	d0a00d04 	addi	r2,gp,-32716
    c210:	18bfcc1e 	bne	r3,r2,c144 <_gp+0xffff6170>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c214:	0005883a 	mov	r2,zero
}
    c218:	e037883a 	mov	sp,fp
    c21c:	dfc00117 	ldw	ra,4(sp)
    c220:	df000017 	ldw	fp,0(sp)
    c224:	dec00204 	addi	sp,sp,8
    c228:	f800283a 	ret

0000c22c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c22c:	defffa04 	addi	sp,sp,-24
    c230:	dfc00515 	stw	ra,20(sp)
    c234:	df000415 	stw	fp,16(sp)
    c238:	dc000315 	stw	r16,12(sp)
    c23c:	df000404 	addi	fp,sp,16
    c240:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c244:	00bffa04 	movi	r2,-24
    c248:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c24c:	e03ffc15 	stw	zero,-16(fp)
    c250:	00001d06 	br	c2c8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c254:	04000074 	movhi	r16,1
    c258:	84368c04 	addi	r16,r16,-9680
    c25c:	e0bffc17 	ldw	r2,-16(fp)
    c260:	01400304 	movi	r5,12
    c264:	1009883a 	mov	r4,r2
    c268:	00088d40 	call	88d4 <__mulsi3>
    c26c:	8085883a 	add	r2,r16,r2
    c270:	10800017 	ldw	r2,0(r2)
    c274:	1000111e 	bne	r2,zero,c2bc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c278:	04000074 	movhi	r16,1
    c27c:	84368c04 	addi	r16,r16,-9680
    c280:	e0bffc17 	ldw	r2,-16(fp)
    c284:	01400304 	movi	r5,12
    c288:	1009883a 	mov	r4,r2
    c28c:	00088d40 	call	88d4 <__mulsi3>
    c290:	8085883a 	add	r2,r16,r2
    c294:	e0fffe17 	ldw	r3,-8(fp)
    c298:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c29c:	d0e01117 	ldw	r3,-32700(gp)
    c2a0:	e0bffc17 	ldw	r2,-16(fp)
    c2a4:	1880020e 	bge	r3,r2,c2b0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c2a8:	e0bffc17 	ldw	r2,-16(fp)
    c2ac:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
    c2b0:	e0bffc17 	ldw	r2,-16(fp)
    c2b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c2b8:	00000606 	br	c2d4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2bc:	e0bffc17 	ldw	r2,-16(fp)
    c2c0:	10800044 	addi	r2,r2,1
    c2c4:	e0bffc15 	stw	r2,-16(fp)
    c2c8:	e0bffc17 	ldw	r2,-16(fp)
    c2cc:	10800810 	cmplti	r2,r2,32
    c2d0:	103fe01e 	bne	r2,zero,c254 <_gp+0xffff6280>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c2d4:	e0bffd17 	ldw	r2,-12(fp)
}
    c2d8:	e6ffff04 	addi	sp,fp,-4
    c2dc:	dfc00217 	ldw	ra,8(sp)
    c2e0:	df000117 	ldw	fp,4(sp)
    c2e4:	dc000017 	ldw	r16,0(sp)
    c2e8:	dec00304 	addi	sp,sp,12
    c2ec:	f800283a 	ret

0000c2f0 <atexit>:
    c2f0:	200b883a 	mov	r5,r4
    c2f4:	000f883a 	mov	r7,zero
    c2f8:	000d883a 	mov	r6,zero
    c2fc:	0009883a 	mov	r4,zero
    c300:	000c5981 	jmpi	c598 <__register_exitproc>

0000c304 <exit>:
    c304:	defffe04 	addi	sp,sp,-8
    c308:	000b883a 	mov	r5,zero
    c30c:	dc000015 	stw	r16,0(sp)
    c310:	dfc00115 	stw	ra,4(sp)
    c314:	2021883a 	mov	r16,r4
    c318:	000c6b00 	call	c6b0 <__call_exitprocs>
    c31c:	00800074 	movhi	r2,1
    c320:	10b80a04 	addi	r2,r2,-8152
    c324:	11000017 	ldw	r4,0(r2)
    c328:	20800f17 	ldw	r2,60(r4)
    c32c:	10000126 	beq	r2,zero,c334 <exit+0x30>
    c330:	103ee83a 	callr	r2
    c334:	8009883a 	mov	r4,r16
    c338:	000c8300 	call	c830 <_exit>

0000c33c <memcmp>:
    c33c:	01c000c4 	movi	r7,3
    c340:	3980192e 	bgeu	r7,r6,c3a8 <memcmp+0x6c>
    c344:	2144b03a 	or	r2,r4,r5
    c348:	11c4703a 	and	r2,r2,r7
    c34c:	10000f26 	beq	r2,zero,c38c <memcmp+0x50>
    c350:	20800003 	ldbu	r2,0(r4)
    c354:	28c00003 	ldbu	r3,0(r5)
    c358:	10c0151e 	bne	r2,r3,c3b0 <memcmp+0x74>
    c35c:	31bfff84 	addi	r6,r6,-2
    c360:	01ffffc4 	movi	r7,-1
    c364:	00000406 	br	c378 <memcmp+0x3c>
    c368:	20800003 	ldbu	r2,0(r4)
    c36c:	28c00003 	ldbu	r3,0(r5)
    c370:	31bfffc4 	addi	r6,r6,-1
    c374:	10c00e1e 	bne	r2,r3,c3b0 <memcmp+0x74>
    c378:	21000044 	addi	r4,r4,1
    c37c:	29400044 	addi	r5,r5,1
    c380:	31fff91e 	bne	r6,r7,c368 <_gp+0xffff6394>
    c384:	0005883a 	mov	r2,zero
    c388:	f800283a 	ret
    c38c:	20c00017 	ldw	r3,0(r4)
    c390:	28800017 	ldw	r2,0(r5)
    c394:	18bfee1e 	bne	r3,r2,c350 <_gp+0xffff637c>
    c398:	31bfff04 	addi	r6,r6,-4
    c39c:	21000104 	addi	r4,r4,4
    c3a0:	29400104 	addi	r5,r5,4
    c3a4:	39bff936 	bltu	r7,r6,c38c <_gp+0xffff63b8>
    c3a8:	303fe91e 	bne	r6,zero,c350 <_gp+0xffff637c>
    c3ac:	003ff506 	br	c384 <_gp+0xffff63b0>
    c3b0:	10c5c83a 	sub	r2,r2,r3
    c3b4:	f800283a 	ret

0000c3b8 <memcpy>:
    c3b8:	defffd04 	addi	sp,sp,-12
    c3bc:	dfc00215 	stw	ra,8(sp)
    c3c0:	dc400115 	stw	r17,4(sp)
    c3c4:	dc000015 	stw	r16,0(sp)
    c3c8:	00c003c4 	movi	r3,15
    c3cc:	2005883a 	mov	r2,r4
    c3d0:	1980452e 	bgeu	r3,r6,c4e8 <memcpy+0x130>
    c3d4:	2906b03a 	or	r3,r5,r4
    c3d8:	18c000cc 	andi	r3,r3,3
    c3dc:	1800441e 	bne	r3,zero,c4f0 <memcpy+0x138>
    c3e0:	347ffc04 	addi	r17,r6,-16
    c3e4:	8822d13a 	srli	r17,r17,4
    c3e8:	28c00104 	addi	r3,r5,4
    c3ec:	23400104 	addi	r13,r4,4
    c3f0:	8820913a 	slli	r16,r17,4
    c3f4:	2b000204 	addi	r12,r5,8
    c3f8:	22c00204 	addi	r11,r4,8
    c3fc:	84000504 	addi	r16,r16,20
    c400:	2a800304 	addi	r10,r5,12
    c404:	22400304 	addi	r9,r4,12
    c408:	2c21883a 	add	r16,r5,r16
    c40c:	2811883a 	mov	r8,r5
    c410:	200f883a 	mov	r7,r4
    c414:	41000017 	ldw	r4,0(r8)
    c418:	1fc00017 	ldw	ra,0(r3)
    c41c:	63c00017 	ldw	r15,0(r12)
    c420:	39000015 	stw	r4,0(r7)
    c424:	53800017 	ldw	r14,0(r10)
    c428:	6fc00015 	stw	ra,0(r13)
    c42c:	5bc00015 	stw	r15,0(r11)
    c430:	4b800015 	stw	r14,0(r9)
    c434:	18c00404 	addi	r3,r3,16
    c438:	39c00404 	addi	r7,r7,16
    c43c:	42000404 	addi	r8,r8,16
    c440:	6b400404 	addi	r13,r13,16
    c444:	63000404 	addi	r12,r12,16
    c448:	5ac00404 	addi	r11,r11,16
    c44c:	52800404 	addi	r10,r10,16
    c450:	4a400404 	addi	r9,r9,16
    c454:	1c3fef1e 	bne	r3,r16,c414 <_gp+0xffff6440>
    c458:	89c00044 	addi	r7,r17,1
    c45c:	380e913a 	slli	r7,r7,4
    c460:	310003cc 	andi	r4,r6,15
    c464:	02c000c4 	movi	r11,3
    c468:	11c7883a 	add	r3,r2,r7
    c46c:	29cb883a 	add	r5,r5,r7
    c470:	5900212e 	bgeu	r11,r4,c4f8 <memcpy+0x140>
    c474:	1813883a 	mov	r9,r3
    c478:	2811883a 	mov	r8,r5
    c47c:	200f883a 	mov	r7,r4
    c480:	42800017 	ldw	r10,0(r8)
    c484:	4a400104 	addi	r9,r9,4
    c488:	39ffff04 	addi	r7,r7,-4
    c48c:	4abfff15 	stw	r10,-4(r9)
    c490:	42000104 	addi	r8,r8,4
    c494:	59fffa36 	bltu	r11,r7,c480 <_gp+0xffff64ac>
    c498:	213fff04 	addi	r4,r4,-4
    c49c:	2008d0ba 	srli	r4,r4,2
    c4a0:	318000cc 	andi	r6,r6,3
    c4a4:	21000044 	addi	r4,r4,1
    c4a8:	2109883a 	add	r4,r4,r4
    c4ac:	2109883a 	add	r4,r4,r4
    c4b0:	1907883a 	add	r3,r3,r4
    c4b4:	290b883a 	add	r5,r5,r4
    c4b8:	30000626 	beq	r6,zero,c4d4 <memcpy+0x11c>
    c4bc:	198d883a 	add	r6,r3,r6
    c4c0:	29c00003 	ldbu	r7,0(r5)
    c4c4:	18c00044 	addi	r3,r3,1
    c4c8:	29400044 	addi	r5,r5,1
    c4cc:	19ffffc5 	stb	r7,-1(r3)
    c4d0:	19bffb1e 	bne	r3,r6,c4c0 <_gp+0xffff64ec>
    c4d4:	dfc00217 	ldw	ra,8(sp)
    c4d8:	dc400117 	ldw	r17,4(sp)
    c4dc:	dc000017 	ldw	r16,0(sp)
    c4e0:	dec00304 	addi	sp,sp,12
    c4e4:	f800283a 	ret
    c4e8:	2007883a 	mov	r3,r4
    c4ec:	003ff206 	br	c4b8 <_gp+0xffff64e4>
    c4f0:	2007883a 	mov	r3,r4
    c4f4:	003ff106 	br	c4bc <_gp+0xffff64e8>
    c4f8:	200d883a 	mov	r6,r4
    c4fc:	003fee06 	br	c4b8 <_gp+0xffff64e4>

0000c500 <strlen>:
    c500:	208000cc 	andi	r2,r4,3
    c504:	10002026 	beq	r2,zero,c588 <strlen+0x88>
    c508:	20800007 	ldb	r2,0(r4)
    c50c:	10002026 	beq	r2,zero,c590 <strlen+0x90>
    c510:	2005883a 	mov	r2,r4
    c514:	00000206 	br	c520 <strlen+0x20>
    c518:	10c00007 	ldb	r3,0(r2)
    c51c:	18001826 	beq	r3,zero,c580 <strlen+0x80>
    c520:	10800044 	addi	r2,r2,1
    c524:	10c000cc 	andi	r3,r2,3
    c528:	183ffb1e 	bne	r3,zero,c518 <_gp+0xffff6544>
    c52c:	10c00017 	ldw	r3,0(r2)
    c530:	01ffbff4 	movhi	r7,65279
    c534:	39ffbfc4 	addi	r7,r7,-257
    c538:	00ca303a 	nor	r5,zero,r3
    c53c:	01a02074 	movhi	r6,32897
    c540:	19c7883a 	add	r3,r3,r7
    c544:	31a02004 	addi	r6,r6,-32640
    c548:	1946703a 	and	r3,r3,r5
    c54c:	1986703a 	and	r3,r3,r6
    c550:	1800091e 	bne	r3,zero,c578 <strlen+0x78>
    c554:	10800104 	addi	r2,r2,4
    c558:	10c00017 	ldw	r3,0(r2)
    c55c:	19cb883a 	add	r5,r3,r7
    c560:	00c6303a 	nor	r3,zero,r3
    c564:	28c6703a 	and	r3,r5,r3
    c568:	1986703a 	and	r3,r3,r6
    c56c:	183ff926 	beq	r3,zero,c554 <_gp+0xffff6580>
    c570:	00000106 	br	c578 <strlen+0x78>
    c574:	10800044 	addi	r2,r2,1
    c578:	10c00007 	ldb	r3,0(r2)
    c57c:	183ffd1e 	bne	r3,zero,c574 <_gp+0xffff65a0>
    c580:	1105c83a 	sub	r2,r2,r4
    c584:	f800283a 	ret
    c588:	2005883a 	mov	r2,r4
    c58c:	003fe706 	br	c52c <_gp+0xffff6558>
    c590:	0005883a 	mov	r2,zero
    c594:	f800283a 	ret

0000c598 <__register_exitproc>:
    c598:	defffa04 	addi	sp,sp,-24
    c59c:	dc000315 	stw	r16,12(sp)
    c5a0:	04000074 	movhi	r16,1
    c5a4:	84380a04 	addi	r16,r16,-8152
    c5a8:	80c00017 	ldw	r3,0(r16)
    c5ac:	dc400415 	stw	r17,16(sp)
    c5b0:	dfc00515 	stw	ra,20(sp)
    c5b4:	18805217 	ldw	r2,328(r3)
    c5b8:	2023883a 	mov	r17,r4
    c5bc:	10003726 	beq	r2,zero,c69c <__register_exitproc+0x104>
    c5c0:	10c00117 	ldw	r3,4(r2)
    c5c4:	010007c4 	movi	r4,31
    c5c8:	20c00e16 	blt	r4,r3,c604 <__register_exitproc+0x6c>
    c5cc:	1a000044 	addi	r8,r3,1
    c5d0:	8800221e 	bne	r17,zero,c65c <__register_exitproc+0xc4>
    c5d4:	18c00084 	addi	r3,r3,2
    c5d8:	18c7883a 	add	r3,r3,r3
    c5dc:	18c7883a 	add	r3,r3,r3
    c5e0:	12000115 	stw	r8,4(r2)
    c5e4:	10c7883a 	add	r3,r2,r3
    c5e8:	19400015 	stw	r5,0(r3)
    c5ec:	0005883a 	mov	r2,zero
    c5f0:	dfc00517 	ldw	ra,20(sp)
    c5f4:	dc400417 	ldw	r17,16(sp)
    c5f8:	dc000317 	ldw	r16,12(sp)
    c5fc:	dec00604 	addi	sp,sp,24
    c600:	f800283a 	ret
    c604:	00800034 	movhi	r2,0
    c608:	10800004 	addi	r2,r2,0
    c60c:	10002626 	beq	r2,zero,c6a8 <__register_exitproc+0x110>
    c610:	01006404 	movi	r4,400
    c614:	d9400015 	stw	r5,0(sp)
    c618:	d9800115 	stw	r6,4(sp)
    c61c:	d9c00215 	stw	r7,8(sp)
    c620:	00000000 	call	0 <__reset-0x8000>
    c624:	d9400017 	ldw	r5,0(sp)
    c628:	d9800117 	ldw	r6,4(sp)
    c62c:	d9c00217 	ldw	r7,8(sp)
    c630:	10001d26 	beq	r2,zero,c6a8 <__register_exitproc+0x110>
    c634:	81000017 	ldw	r4,0(r16)
    c638:	10000115 	stw	zero,4(r2)
    c63c:	02000044 	movi	r8,1
    c640:	22405217 	ldw	r9,328(r4)
    c644:	0007883a 	mov	r3,zero
    c648:	12400015 	stw	r9,0(r2)
    c64c:	20805215 	stw	r2,328(r4)
    c650:	10006215 	stw	zero,392(r2)
    c654:	10006315 	stw	zero,396(r2)
    c658:	883fde26 	beq	r17,zero,c5d4 <_gp+0xffff6600>
    c65c:	18c9883a 	add	r4,r3,r3
    c660:	2109883a 	add	r4,r4,r4
    c664:	1109883a 	add	r4,r2,r4
    c668:	21802215 	stw	r6,136(r4)
    c66c:	01800044 	movi	r6,1
    c670:	12406217 	ldw	r9,392(r2)
    c674:	30cc983a 	sll	r6,r6,r3
    c678:	4992b03a 	or	r9,r9,r6
    c67c:	12406215 	stw	r9,392(r2)
    c680:	21c04215 	stw	r7,264(r4)
    c684:	01000084 	movi	r4,2
    c688:	893fd21e 	bne	r17,r4,c5d4 <_gp+0xffff6600>
    c68c:	11006317 	ldw	r4,396(r2)
    c690:	218cb03a 	or	r6,r4,r6
    c694:	11806315 	stw	r6,396(r2)
    c698:	003fce06 	br	c5d4 <_gp+0xffff6600>
    c69c:	18805304 	addi	r2,r3,332
    c6a0:	18805215 	stw	r2,328(r3)
    c6a4:	003fc606 	br	c5c0 <_gp+0xffff65ec>
    c6a8:	00bfffc4 	movi	r2,-1
    c6ac:	003fd006 	br	c5f0 <_gp+0xffff661c>

0000c6b0 <__call_exitprocs>:
    c6b0:	defff504 	addi	sp,sp,-44
    c6b4:	df000915 	stw	fp,36(sp)
    c6b8:	dd400615 	stw	r21,24(sp)
    c6bc:	dc800315 	stw	r18,12(sp)
    c6c0:	dfc00a15 	stw	ra,40(sp)
    c6c4:	ddc00815 	stw	r23,32(sp)
    c6c8:	dd800715 	stw	r22,28(sp)
    c6cc:	dd000515 	stw	r20,20(sp)
    c6d0:	dcc00415 	stw	r19,16(sp)
    c6d4:	dc400215 	stw	r17,8(sp)
    c6d8:	dc000115 	stw	r16,4(sp)
    c6dc:	d9000015 	stw	r4,0(sp)
    c6e0:	2839883a 	mov	fp,r5
    c6e4:	04800044 	movi	r18,1
    c6e8:	057fffc4 	movi	r21,-1
    c6ec:	00800074 	movhi	r2,1
    c6f0:	10b80a04 	addi	r2,r2,-8152
    c6f4:	12000017 	ldw	r8,0(r2)
    c6f8:	45005217 	ldw	r20,328(r8)
    c6fc:	44c05204 	addi	r19,r8,328
    c700:	a0001c26 	beq	r20,zero,c774 <__call_exitprocs+0xc4>
    c704:	a0800117 	ldw	r2,4(r20)
    c708:	15ffffc4 	addi	r23,r2,-1
    c70c:	b8000d16 	blt	r23,zero,c744 <__call_exitprocs+0x94>
    c710:	14000044 	addi	r16,r2,1
    c714:	8421883a 	add	r16,r16,r16
    c718:	8421883a 	add	r16,r16,r16
    c71c:	84402004 	addi	r17,r16,128
    c720:	a463883a 	add	r17,r20,r17
    c724:	a421883a 	add	r16,r20,r16
    c728:	e0001e26 	beq	fp,zero,c7a4 <__call_exitprocs+0xf4>
    c72c:	80804017 	ldw	r2,256(r16)
    c730:	e0801c26 	beq	fp,r2,c7a4 <__call_exitprocs+0xf4>
    c734:	bdffffc4 	addi	r23,r23,-1
    c738:	843fff04 	addi	r16,r16,-4
    c73c:	8c7fff04 	addi	r17,r17,-4
    c740:	bd7ff91e 	bne	r23,r21,c728 <_gp+0xffff6754>
    c744:	00800034 	movhi	r2,0
    c748:	10800004 	addi	r2,r2,0
    c74c:	10000926 	beq	r2,zero,c774 <__call_exitprocs+0xc4>
    c750:	a0800117 	ldw	r2,4(r20)
    c754:	1000301e 	bne	r2,zero,c818 <__call_exitprocs+0x168>
    c758:	a0800017 	ldw	r2,0(r20)
    c75c:	10003226 	beq	r2,zero,c828 <__call_exitprocs+0x178>
    c760:	a009883a 	mov	r4,r20
    c764:	98800015 	stw	r2,0(r19)
    c768:	00000000 	call	0 <__reset-0x8000>
    c76c:	9d000017 	ldw	r20,0(r19)
    c770:	a03fe41e 	bne	r20,zero,c704 <_gp+0xffff6730>
    c774:	dfc00a17 	ldw	ra,40(sp)
    c778:	df000917 	ldw	fp,36(sp)
    c77c:	ddc00817 	ldw	r23,32(sp)
    c780:	dd800717 	ldw	r22,28(sp)
    c784:	dd400617 	ldw	r21,24(sp)
    c788:	dd000517 	ldw	r20,20(sp)
    c78c:	dcc00417 	ldw	r19,16(sp)
    c790:	dc800317 	ldw	r18,12(sp)
    c794:	dc400217 	ldw	r17,8(sp)
    c798:	dc000117 	ldw	r16,4(sp)
    c79c:	dec00b04 	addi	sp,sp,44
    c7a0:	f800283a 	ret
    c7a4:	a0800117 	ldw	r2,4(r20)
    c7a8:	80c00017 	ldw	r3,0(r16)
    c7ac:	10bfffc4 	addi	r2,r2,-1
    c7b0:	15c01426 	beq	r2,r23,c804 <__call_exitprocs+0x154>
    c7b4:	80000015 	stw	zero,0(r16)
    c7b8:	183fde26 	beq	r3,zero,c734 <_gp+0xffff6760>
    c7bc:	95c8983a 	sll	r4,r18,r23
    c7c0:	a0806217 	ldw	r2,392(r20)
    c7c4:	a5800117 	ldw	r22,4(r20)
    c7c8:	2084703a 	and	r2,r4,r2
    c7cc:	10000b26 	beq	r2,zero,c7fc <__call_exitprocs+0x14c>
    c7d0:	a0806317 	ldw	r2,396(r20)
    c7d4:	2088703a 	and	r4,r4,r2
    c7d8:	20000c1e 	bne	r4,zero,c80c <__call_exitprocs+0x15c>
    c7dc:	89400017 	ldw	r5,0(r17)
    c7e0:	d9000017 	ldw	r4,0(sp)
    c7e4:	183ee83a 	callr	r3
    c7e8:	a0800117 	ldw	r2,4(r20)
    c7ec:	15bfbf1e 	bne	r2,r22,c6ec <_gp+0xffff6718>
    c7f0:	98800017 	ldw	r2,0(r19)
    c7f4:	153fcf26 	beq	r2,r20,c734 <_gp+0xffff6760>
    c7f8:	003fbc06 	br	c6ec <_gp+0xffff6718>
    c7fc:	183ee83a 	callr	r3
    c800:	003ff906 	br	c7e8 <_gp+0xffff6814>
    c804:	a5c00115 	stw	r23,4(r20)
    c808:	003feb06 	br	c7b8 <_gp+0xffff67e4>
    c80c:	89000017 	ldw	r4,0(r17)
    c810:	183ee83a 	callr	r3
    c814:	003ff406 	br	c7e8 <_gp+0xffff6814>
    c818:	a0800017 	ldw	r2,0(r20)
    c81c:	a027883a 	mov	r19,r20
    c820:	1029883a 	mov	r20,r2
    c824:	003fb606 	br	c700 <_gp+0xffff672c>
    c828:	0005883a 	mov	r2,zero
    c82c:	003ffb06 	br	c81c <_gp+0xffff6848>

0000c830 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c830:	defffd04 	addi	sp,sp,-12
    c834:	df000215 	stw	fp,8(sp)
    c838:	df000204 	addi	fp,sp,8
    c83c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c840:	0001883a 	nop
    c844:	e0bfff17 	ldw	r2,-4(fp)
    c848:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c84c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c850:	10000226 	beq	r2,zero,c85c <_exit+0x2c>
    ALT_SIM_FAIL();
    c854:	002af070 	cmpltui	zero,zero,43969
    c858:	00000106 	br	c860 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c85c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c860:	003fff06 	br	c860 <_gp+0xffff688c>
