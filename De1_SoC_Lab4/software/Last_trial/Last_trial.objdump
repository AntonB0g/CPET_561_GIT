
Last_trial.elf:     file format elf32-littlenios2
Last_trial.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004968 memsz 0x00004968 flags r-x
    LOAD off    0x00005988 vaddr 0x0000c988 paddr 0x0000e01c align 2**12
         filesz 0x00001694 memsz 0x00001694 flags rw-
    LOAD off    0x000076b0 vaddr 0x0000f6b0 paddr 0x0000f6b0 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004620  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0000c850  0000c850  00005850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001694  0000c988  0000e01c  00005988  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000f6b0  0000f6b0  000076b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000f7d8  0000f7d8  0000701c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000710  00000000  00000000  00007040  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009267  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000349d  00000000  00000000  000109b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000037c7  00000000  00000000  00013e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d70  00000000  00000000  0001761c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021b2  00000000  00000000  0001838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005036  00000000  00000000  0001a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001f574  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000958  00000000  00000000  0001f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021e06  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00021e09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021e15  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021e16  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021e17  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021e1b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021e1f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00021e23  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00021e2e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00021e39  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00021e44  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000018  00000000  00000000  00021e58  2**0
                  CONTENTS, READONLY
 29 .jdi          00006ecd  00000000  00000000  00021e70  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062977  00000000  00000000  00028d3d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000c850 l    d  .rodata	00000000 .rodata
0000c988 l    d  .rwdata	00000000 .rwdata
0000f6b0 l    d  .bss	00000000 .bss
0000f7d8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Last_trial_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 program.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000a8e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000aa48 l     F .text	00000034 alt_dev_reg
0000c994 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ad24 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000af30 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b7c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b7f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ba50 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bbb0 l     F .text	0000003c alt_get_errno
0000bbec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000db9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000f6c8 g     O .bss	00000004 alt_instruction_exception_handler
0000a9cc g     F .text	0000007c alt_main
0000f6d8 g     O .bss	00000100 alt_irq
0000e01c g       *ABS*	00000000 __flash_rwdata_start
00008450 g     F .text	00000118 ISR
0000826c g     F .text	00000098 angle_convert_tics
00008568 g     F .text	0000003c Servo_ISR
00009194 g     F .text	000000dc .hidden __gtdf2
0000c05c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000f6b5 g     O .bss	00000001 displayFlagMIN
0000f6b4 g     O .bss	00000001 displayFlagMAX
0000f6d4 g     O .bss	00000004 errno
0000f6c0 g     O .bss	00000004 alt_argv
00015fc0 g       *ABS*	00000000 _gp
0000da1c g     O .rwdata	00000180 alt_fd_list
0000dfd8 g     O .rwdata	00000004 KeyPtr
0000c080 g     F .text	00000090 alt_find_dev
0000c3a4 g     F .text	00000148 memcpy
0000dfd4 g     O .rwdata	00000004 Hex5Ptr
0000a458 g     F .text	000000dc .hidden __floatsidf
0000bb34 g     F .text	0000007c alt_io_redirect
0000dfec g     O .rwdata	00000004 lowwer_limit_deg
0000c850 g       *ABS*	00000000 __DTOR_END__
0000b9b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000b128 g     F .text	0000021c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008804 g     F .text	00000064 .hidden __udivsi3
00008698 g     F .text	00000074 .hidden __fixunsdfsi
0000f6b0 g     O .bss	00000004 input
0000e004 g     O .rwdata	00000004 alt_max_fd
000088e8 g     F .text	000008ac .hidden __adddf3
0000e014 g     O .rwdata	00000004 _global_impure_ptr
0000f7d8 g       *ABS*	00000000 __bss_end
0000a7f0 g     F .text	000000f0 alt_iic_isr_register
0000bf54 g     F .text	00000108 alt_tick
0000a534 g     F .text	000000a8 .hidden __floatunsidf
0000dfe4 g     O .rwdata	00000004 max_ang
0000a7a4 g     F .text	0000004c alt_ic_irq_enabled
0000beb8 g     F .text	0000009c alt_alarm_stop
0000dfe0 g     O .rwdata	00000004 min_ang
0000f6b8 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000d9f4 g     O .rwdata	00000028 alt_dev_null
0000b7a8 g     F .text	00000020 alt_dcache_flush_all
0000a3d8 g     F .text	00000080 .hidden __fixdfsi
0000e01c g       *ABS*	00000000 __ram_rwdata_end
0000dffc g     O .rwdata	00000008 alt_dev_list
0000dfc4 g     O .rwdata	00000004 Hex0Ptr
0000c988 g       *ABS*	00000000 __ram_rodata_end
0000dfcc g     O .rwdata	00000004 Hex2Ptr
00008868 g     F .text	00000058 .hidden __umodsi3
0000f7d8 g       *ABS*	00000000 end
0000ac64 g     F .text	000000c0 altera_avalon_jtag_uart_init
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000c850 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000a5dc g     F .text	00000064 .hidden __clzsi2
0000dfc0 g     O .rwdata	00000004 ServoPtr
0000b344 g     F .text	00000224 altera_avalon_jtag_uart_write
0000c69c g     F .text	00000180 __call_exitprocs
00008230 g     F .text	0000003c _start
0000f6cc g     O .bss	00000004 _alt_tick_rate
0000f6d0 g     O .bss	00000004 _alt_nticks
0000aab4 g     F .text	0000004c alt_sys_init
0000c584 g     F .text	00000118 __register_exitproc
0000afd0 g     F .text	00000068 altera_avalon_jtag_uart_close
000088c0 g     F .text	00000028 .hidden __mulsi3
0000c988 g       *ABS*	00000000 __ram_rwdata_start
0000c850 g       *ABS*	00000000 __ram_rodata_start
00008304 g     F .text	0000014c update_display
0000ab00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c218 g     F .text	000000c4 alt_get_fd
0000c328 g     F .text	0000007c memcmp
0000abc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000f7d8 g       *ABS*	00000000 __alt_stack_base
0000ac10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009270 g     F .text	0000086c .hidden __muldf3
0000c110 g     F .text	00000108 alt_find_file
0000b830 g     F .text	000000a4 alt_dev_llist_insert
0000f6b0 g       *ABS*	00000000 __bss_start
000085a4 g     F .text	000000f4 main
0000f6c4 g     O .bss	00000004 alt_envp
0000ab60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e008 g     O .rwdata	00000004 alt_errno
0000870c g     F .text	00000084 .hidden __divsi3
0000c850 g       *ABS*	00000000 __CTOR_END__
0000c850 g       *ABS*	00000000 __flash_rodata_start
0000c850 g       *ABS*	00000000 __DTOR_LIST__
0000aa7c g     F .text	00000038 alt_irq_init
0000be34 g     F .text	00000084 alt_release_fd
0000c850 g     O .rodata	00000100 .hidden __clz_tab
0000c2dc g     F .text	00000014 atexit
0000dfd0 g     O .rwdata	00000004 Hex4Ptr
0000e018 g     O .rwdata	00000004 _impure_ptr
0000f6bc g     O .bss	00000004 alt_argc
0000b934 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000dfc8 g     O .rwdata	00000004 Hex1Ptr
0000dff4 g     O .rwdata	00000008 alt_fs_list
0000dfe8 g     O .rwdata	00000004 upper_limit_deg
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a640 g     F .text	00000050 alt_ic_isr_register
0000e01c g       *ABS*	00000000 _edata
0000f7d8 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000b038 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000a718 g     F .text	0000008c alt_ic_irq_disable
0000dfdc g     O .rwdata	00000004 SWPtr
0000c2f0 g     F .text	00000038 exit
00008790 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000c81c g     F .text	00000034 _exit
0000b568 g     F .text	0000012c alt_alarm_start
0000c4ec g     F .text	00000098 strlen
0000bcd8 g     F .text	0000015c open
00009194 g     F .text	000000dc .hidden __gedf2
0000b994 g     F .text	00000020 alt_icache_flush_all
0000dff0 g     O .rwdata	00000004 alt_priority_mask
0000a690 g     F .text	00000088 alt_ic_irq_enable
00009adc g     F .text	000008fc .hidden __subdf3
0000e00c g     O .rwdata	00000008 alt_alarm_list
0000b8d4 g     F .text	00000060 _do_ctors
0000b6d0 g     F .text	000000d8 close
0000a948 g     F .text	00000084 alt_load
0000c988 g     O .rwdata	0000000a Numbers



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10bdb604 	addi	r2,r2,-2344
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10bdb604 	addi	r2,r2,-2344
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff216c>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff2160>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a5c217 	ldw	r2,-26872(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a5c217 	ldw	r2,-26872(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d697f014 	ori	gp,gp,24512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10bdac14 	ori	r2,r2,63152

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18fdf614 	ori	r3,r3,63448

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff2294>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	000a9480 	call	a948 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000a9cc0 	call	a9cc <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff22a8>

0000826c <angle_convert_tics>:
bool displayFlagMIN = false;

uint8 Numbers[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x0, 0x10};

int angle_convert_tics(int x)
{
    826c:	defffd04 	addi	sp,sp,-12
    8270:	dfc00215 	stw	ra,8(sp)
    8274:	df000115 	stw	fp,4(sp)
    8278:	df000104 	addi	fp,sp,4
    827c:	e13fff15 	stw	r4,-4(fp)
    return(555.56*x+25000);// equation is based on 45 deg - 50K tics; 90 deg - 75k  tics; 135 - 100k tics
    8280:	e13fff17 	ldw	r4,-4(fp)
    8284:	000a4580 	call	a458 <__floatsidf>
    8288:	1011883a 	mov	r8,r2
    828c:	1813883a 	mov	r9,r3
    8290:	01b85234 	movhi	r6,57672
    8294:	31ab8504 	addi	r6,r6,-20972
    8298:	01d02074 	movhi	r7,16513
    829c:	39d71e84 	addi	r7,r7,23674
    82a0:	4009883a 	mov	r4,r8
    82a4:	480b883a 	mov	r5,r9
    82a8:	00092700 	call	9270 <__muldf3>
    82ac:	1009883a 	mov	r4,r2
    82b0:	180b883a 	mov	r5,r3
    82b4:	2005883a 	mov	r2,r4
    82b8:	2807883a 	mov	r3,r5
    82bc:	000d883a 	mov	r6,zero
    82c0:	01d03634 	movhi	r7,16600
    82c4:	39da8004 	addi	r7,r7,27136
    82c8:	1009883a 	mov	r4,r2
    82cc:	180b883a 	mov	r5,r3
    82d0:	00088e80 	call	88e8 <__adddf3>
    82d4:	1009883a 	mov	r4,r2
    82d8:	180b883a 	mov	r5,r3
    82dc:	2005883a 	mov	r2,r4
    82e0:	2807883a 	mov	r3,r5
    82e4:	1009883a 	mov	r4,r2
    82e8:	180b883a 	mov	r5,r3
    82ec:	000a3d80 	call	a3d8 <__fixdfsi>
}
    82f0:	e037883a 	mov	sp,fp
    82f4:	dfc00117 	ldw	ra,4(sp)
    82f8:	df000017 	ldw	fp,0(sp)
    82fc:	dec00204 	addi	sp,sp,8
    8300:	f800283a 	ret

00008304 <update_display>:

void update_display()
{
    8304:	defff904 	addi	sp,sp,-28
    8308:	dfc00615 	stw	ra,24(sp)
    830c:	df000515 	stw	fp,20(sp)
    8310:	df000504 	addi	fp,sp,20
    int min_tenth = input/10;
    8314:	d0a5bc17 	ldw	r2,-26896(gp)
    8318:	01400284 	movi	r5,10
    831c:	1009883a 	mov	r4,r2
    8320:	00088040 	call	8804 <__udivsi3>
    8324:	e0bffb15 	stw	r2,-20(fp)
    int min_dig   = input % 10;
    8328:	d0a5bc17 	ldw	r2,-26896(gp)
    832c:	01400284 	movi	r5,10
    8330:	1009883a 	mov	r4,r2
    8334:	00088680 	call	8868 <__umodsi3>
    8338:	e0bffc15 	stw	r2,-16(fp)

    int max_hund  = input/100;
    833c:	d0a5bc17 	ldw	r2,-26896(gp)
    8340:	01401904 	movi	r5,100
    8344:	1009883a 	mov	r4,r2
    8348:	00088040 	call	8804 <__udivsi3>
    834c:	e0bffd15 	stw	r2,-12(fp)
    int max_tenth = input/10;
    8350:	d0a5bc17 	ldw	r2,-26896(gp)
    8354:	01400284 	movi	r5,10
    8358:	1009883a 	mov	r4,r2
    835c:	00088040 	call	8804 <__udivsi3>
    8360:	e0bffe15 	stw	r2,-8(fp)
    int max_dig   = input % 10;
    8364:	d0a5bc17 	ldw	r2,-26896(gp)
    8368:	01400284 	movi	r5,10
    836c:	1009883a 	mov	r4,r2
    8370:	00088680 	call	8868 <__umodsi3>
    8374:	e0bfff15 	stw	r2,-4(fp)

    if(displayFlagMAX == true)
    8378:	d0a5bd03 	ldbu	r2,-26892(gp)
    837c:	10803fcc 	andi	r2,r2,255
    8380:	10001826 	beq	r2,zero,83e4 <update_display+0xe0>
    {
        *Hex0Ptr = Numbers[max_dig];   /* set HEX0 to display digits of the max value */
    8384:	d0e00117 	ldw	r3,-32764(gp)
    8388:	00800074 	movhi	r2,1
    838c:	10b26204 	addi	r2,r2,-13944
    8390:	e13fff17 	ldw	r4,-4(fp)
    8394:	1105883a 	add	r2,r2,r4
    8398:	10800003 	ldbu	r2,0(r2)
    839c:	10803fcc 	andi	r2,r2,255
    83a0:	18800015 	stw	r2,0(r3)
        *Hex1Ptr = Numbers[max_tenth]; /* set HEX1 to display tenth of the max value */
    83a4:	d0e00217 	ldw	r3,-32760(gp)
    83a8:	00800074 	movhi	r2,1
    83ac:	10b26204 	addi	r2,r2,-13944
    83b0:	e13ffe17 	ldw	r4,-8(fp)
    83b4:	1105883a 	add	r2,r2,r4
    83b8:	10800003 	ldbu	r2,0(r2)
    83bc:	10803fcc 	andi	r2,r2,255
    83c0:	18800015 	stw	r2,0(r3)
        *Hex2Ptr = Numbers[max_hund];  /* set HEX2 to display hundreds of the max value */
    83c4:	d0e00317 	ldw	r3,-32756(gp)
    83c8:	00800074 	movhi	r2,1
    83cc:	10b26204 	addi	r2,r2,-13944
    83d0:	e13ffd17 	ldw	r4,-12(fp)
    83d4:	1105883a 	add	r2,r2,r4
    83d8:	10800003 	ldbu	r2,0(r2)
    83dc:	10803fcc 	andi	r2,r2,255
    83e0:	18800015 	stw	r2,0(r3)
    }

    if(displayFlagMIN == true)
    83e4:	d0a5bd43 	ldbu	r2,-26891(gp)
    83e8:	10803fcc 	andi	r2,r2,255
    83ec:	10001026 	beq	r2,zero,8430 <update_display+0x12c>
    {
    	*Hex4Ptr = Numbers[min_dig];   /* set HEX4 to display digits of the min value */
    83f0:	d0e00417 	ldw	r3,-32752(gp)
    83f4:	00800074 	movhi	r2,1
    83f8:	10b26204 	addi	r2,r2,-13944
    83fc:	e13ffc17 	ldw	r4,-16(fp)
    8400:	1105883a 	add	r2,r2,r4
    8404:	10800003 	ldbu	r2,0(r2)
    8408:	10803fcc 	andi	r2,r2,255
    840c:	18800015 	stw	r2,0(r3)
    	*Hex5Ptr = Numbers[min_tenth]; /* set HEX5 to display tenth of min value */
    8410:	d0e00517 	ldw	r3,-32748(gp)
    8414:	00800074 	movhi	r2,1
    8418:	10b26204 	addi	r2,r2,-13944
    841c:	e13ffb17 	ldw	r4,-20(fp)
    8420:	1105883a 	add	r2,r2,r4
    8424:	10800003 	ldbu	r2,0(r2)
    8428:	10803fcc 	andi	r2,r2,255
    842c:	18800015 	stw	r2,0(r3)
    }

    displayFlagMAX = false;//disables Update display function for the MAX value
    8430:	d025bd05 	stb	zero,-26892(gp)
	displayFlagMIN = false;//disables Update display function for the MIN value
    8434:	d025bd45 	stb	zero,-26891(gp)
}
    8438:	0001883a 	nop
    843c:	e037883a 	mov	sp,fp
    8440:	dfc00117 	ldw	ra,4(sp)
    8444:	df000017 	ldw	fp,0(sp)
    8448:	dec00204 	addi	sp,sp,8
    844c:	f800283a 	ret

00008450 <ISR>:

void ISR()
{
    8450:	defffe04 	addi	sp,sp,-8
    8454:	dfc00115 	stw	ra,4(sp)
    8458:	df000015 	stw	fp,0(sp)
    845c:	d839883a 	mov	fp,sp
    input = *SWPtr;
    8460:	d0a00717 	ldw	r2,-32740(gp)
    8464:	10800017 	ldw	r2,0(r2)
    8468:	d0a5bc15 	stw	r2,-26896(gp)

    //This function checks what key is pressed (two or three) by masking KeyPtr
    if (*(KeyPtr + 3) & 0x4) // KEY2 is pressed 0b0100 = 0x4
    846c:	d0a00617 	ldw	r2,-32744(gp)
    8470:	10800304 	addi	r2,r2,12
    8474:	10800017 	ldw	r2,0(r2)
    8478:	1080010c 	andi	r2,r2,4
    847c:	10000d26 	beq	r2,zero,84b4 <ISR+0x64>
    {
        if (input >= lowwer_limit_deg) // check for the input, if input is bigger or equal than minimum allowed value => do nothing
    8480:	d0a5bc17 	ldw	r2,-26896(gp)
    8484:	d0e00b17 	ldw	r3,-32724(gp)
    8488:	10c02e36 	bltu	r2,r3,8544 <ISR+0xf4>
        {
            min_ang = 555*input+25000;
    848c:	d0a5bc17 	ldw	r2,-26896(gp)
    8490:	01408ac4 	movi	r5,555
    8494:	1009883a 	mov	r4,r2
    8498:	00088c00 	call	88c0 <__mulsi3>
    849c:	10986a04 	addi	r2,r2,25000
    84a0:	d0a00815 	stw	r2,-32736(gp)
            displayFlagMIN = true;
    84a4:	00800044 	movi	r2,1
    84a8:	d0a5bd45 	stb	r2,-26891(gp)
            update_display();
    84ac:	00083040 	call	8304 <update_display>
    84b0:	00002406 	br	8544 <ISR+0xf4>
        }
    }
    else // KEY3 is pressed 0b1000 = 0x8
    {
        if (input <= upper_limit_deg) // check for the input, if input is smaller or equal than maximum allowed value => do nothing
    84b4:	d0a5bc17 	ldw	r2,-26896(gp)
    84b8:	d0e00a17 	ldw	r3,-32728(gp)
    84bc:	18802136 	bltu	r3,r2,8544 <ISR+0xf4>
        {
            max_ang = 555.56*input+25000;
    84c0:	d0a5bc17 	ldw	r2,-26896(gp)
    84c4:	1009883a 	mov	r4,r2
    84c8:	000a5340 	call	a534 <__floatunsidf>
    84cc:	1011883a 	mov	r8,r2
    84d0:	1813883a 	mov	r9,r3
    84d4:	01b85234 	movhi	r6,57672
    84d8:	31ab8504 	addi	r6,r6,-20972
    84dc:	01d02074 	movhi	r7,16513
    84e0:	39d71e84 	addi	r7,r7,23674
    84e4:	4009883a 	mov	r4,r8
    84e8:	480b883a 	mov	r5,r9
    84ec:	00092700 	call	9270 <__muldf3>
    84f0:	1009883a 	mov	r4,r2
    84f4:	180b883a 	mov	r5,r3
    84f8:	2005883a 	mov	r2,r4
    84fc:	2807883a 	mov	r3,r5
    8500:	000d883a 	mov	r6,zero
    8504:	01d03634 	movhi	r7,16600
    8508:	39da8004 	addi	r7,r7,27136
    850c:	1009883a 	mov	r4,r2
    8510:	180b883a 	mov	r5,r3
    8514:	00088e80 	call	88e8 <__adddf3>
    8518:	1009883a 	mov	r4,r2
    851c:	180b883a 	mov	r5,r3
    8520:	2005883a 	mov	r2,r4
    8524:	2807883a 	mov	r3,r5
    8528:	1009883a 	mov	r4,r2
    852c:	180b883a 	mov	r5,r3
    8530:	00086980 	call	8698 <__fixunsdfsi>
    8534:	d0a00915 	stw	r2,-32732(gp)
            displayFlagMAX = true;
    8538:	00800044 	movi	r2,1
    853c:	d0a5bd05 	stb	r2,-26892(gp)
            update_display();
    8540:	00083040 	call	8304 <update_display>
        }
    }
    *(KeyPtr + 3) = 0; // EdgeCapture reset
    8544:	d0a00617 	ldw	r2,-32744(gp)
    8548:	10800304 	addi	r2,r2,12
    854c:	10000015 	stw	zero,0(r2)
}
    8550:	0001883a 	nop
    8554:	e037883a 	mov	sp,fp
    8558:	dfc00117 	ldw	ra,4(sp)
    855c:	df000017 	ldw	fp,0(sp)
    8560:	dec00204 	addi	sp,sp,8
    8564:	f800283a 	ret

00008568 <Servo_ISR>:

void Servo_ISR()
{
    8568:	deffff04 	addi	sp,sp,-4
    856c:	df000015 	stw	fp,0(sp)
    8570:	d839883a 	mov	fp,sp
    //write to the min and max register of the ServoController_ip
    *(ServoPtr + 0) = min_ang; // updating minimum angle and writting it to the MIN register
    8574:	d0a00017 	ldw	r2,-32768(gp)
    8578:	d0e00817 	ldw	r3,-32736(gp)
    857c:	10c00015 	stw	r3,0(r2)
    *(ServoPtr + 1) = max_ang; // updating maximum angle and writting it to the MAX register
    8580:	d0a00017 	ldw	r2,-32768(gp)
    8584:	10800104 	addi	r2,r2,4
    8588:	d0e00917 	ldw	r3,-32732(gp)
    858c:	10c00015 	stw	r3,0(r2)
}
    8590:	0001883a 	nop
    8594:	e037883a 	mov	sp,fp
    8598:	df000017 	ldw	fp,0(sp)
    859c:	dec00104 	addi	sp,sp,4
    85a0:	f800283a 	ret

000085a4 <main>:

int main()
{
    85a4:	defffd04 	addi	sp,sp,-12
    85a8:	dfc00215 	stw	ra,8(sp)
    85ac:	df000115 	stw	fp,4(sp)
    85b0:	df000104 	addi	fp,sp,4

    *(ServoPtr + 0) = 50000; // updating minimum angle and writting it to the MIN register
    85b4:	d0a00017 	ldw	r2,-32768(gp)
    85b8:	00f0d414 	movui	r3,50000
    85bc:	10c00015 	stw	r3,0(r2)
    *(ServoPtr + 1) = 100000; // updating maximum angle and writting it to the MAX register
    85c0:	d0a00017 	ldw	r2,-32768(gp)
    85c4:	10c00104 	addi	r3,r2,4
    85c8:	008000b4 	movhi	r2,2
    85cc:	10a1a804 	addi	r2,r2,-31072
    85d0:	18800015 	stw	r2,0(r3)
    alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSHBUTTONS_IRQ,ISR,0,0); //setup Pushbutton Interrupt
    85d4:	d8000015 	stw	zero,0(sp)
    85d8:	000f883a 	mov	r7,zero
    85dc:	01800074 	movhi	r6,1
    85e0:	31a11404 	addi	r6,r6,-31664
    85e4:	01400044 	movi	r5,1
    85e8:	0009883a 	mov	r4,zero
    85ec:	000a6400 	call	a640 <alt_ic_isr_register>
    alt_ic_isr_register(SERVO_CONTROLLER_IP_0_IRQ_INTERRUPT_CONTROLLER_ID, SERVO_CONTROLLER_IP_0_IRQ,Servo_ISR,0,0); // setup Servo Interrupt
    85f0:	d8000015 	stw	zero,0(sp)
    85f4:	000f883a 	mov	r7,zero
    85f8:	01800074 	movhi	r6,1
    85fc:	31a15a04 	addi	r6,r6,-31384
    8600:	000b883a 	mov	r5,zero
    8604:	0009883a 	mov	r4,zero
    8608:	000a6400 	call	a640 <alt_ic_isr_register>
    
    *Hex0Ptr = Numbers[0]; /* set HEX0 to display 0 */
    860c:	d0e00117 	ldw	r3,-32764(gp)
    8610:	00800074 	movhi	r2,1
    8614:	10b26204 	addi	r2,r2,-13944
    8618:	10800003 	ldbu	r2,0(r2)
    861c:	10803fcc 	andi	r2,r2,255
    8620:	18800015 	stw	r2,0(r3)
    *Hex1Ptr = Numbers[0]; /* set HEX1 to display 0 */
    8624:	d0e00217 	ldw	r3,-32760(gp)
    8628:	00800074 	movhi	r2,1
    862c:	10b26204 	addi	r2,r2,-13944
    8630:	10800003 	ldbu	r2,0(r2)
    8634:	10803fcc 	andi	r2,r2,255
    8638:	18800015 	stw	r2,0(r3)
    *Hex2Ptr = Numbers[0]; /* set HEX2 to display 0 */
    863c:	d0e00317 	ldw	r3,-32756(gp)
    8640:	00800074 	movhi	r2,1
    8644:	10b26204 	addi	r2,r2,-13944
    8648:	10800003 	ldbu	r2,0(r2)
    864c:	10803fcc 	andi	r2,r2,255
    8650:	18800015 	stw	r2,0(r3)
    *Hex4Ptr = Numbers[0]; /* set HEX4 to display 0 */
    8654:	d0e00417 	ldw	r3,-32752(gp)
    8658:	00800074 	movhi	r2,1
    865c:	10b26204 	addi	r2,r2,-13944
    8660:	10800003 	ldbu	r2,0(r2)
    8664:	10803fcc 	andi	r2,r2,255
    8668:	18800015 	stw	r2,0(r3)
    *Hex5Ptr = Numbers[0]; /* set HEX5 to display 0 */
    866c:	d0e00517 	ldw	r3,-32748(gp)
    8670:	00800074 	movhi	r2,1
    8674:	10b26204 	addi	r2,r2,-13944
    8678:	10800003 	ldbu	r2,0(r2)
    867c:	10803fcc 	andi	r2,r2,255
    8680:	18800015 	stw	r2,0(r3)

    *(KeyPtr + 2) = 0xC;// set the interrupt mask for KEY2 and KEY3 (1100)
    8684:	d0a00617 	ldw	r2,-32744(gp)
    8688:	10800204 	addi	r2,r2,8
    868c:	00c00304 	movi	r3,12
    8690:	10c00015 	stw	r3,0(r2)
    
     while(1)
    {
    };
    8694:	003fff06 	br	8694 <_gp+0xffff26d4>

00008698 <__fixunsdfsi>:
    8698:	defffd04 	addi	sp,sp,-12
    869c:	000d883a 	mov	r6,zero
    86a0:	01d07834 	movhi	r7,16864
    86a4:	dc400115 	stw	r17,4(sp)
    86a8:	dc000015 	stw	r16,0(sp)
    86ac:	dfc00215 	stw	ra,8(sp)
    86b0:	2023883a 	mov	r17,r4
    86b4:	2821883a 	mov	r16,r5
    86b8:	00091940 	call	9194 <__gedf2>
    86bc:	1000080e 	bge	r2,zero,86e0 <__fixunsdfsi+0x48>
    86c0:	8809883a 	mov	r4,r17
    86c4:	800b883a 	mov	r5,r16
    86c8:	000a3d80 	call	a3d8 <__fixdfsi>
    86cc:	dfc00217 	ldw	ra,8(sp)
    86d0:	dc400117 	ldw	r17,4(sp)
    86d4:	dc000017 	ldw	r16,0(sp)
    86d8:	dec00304 	addi	sp,sp,12
    86dc:	f800283a 	ret
    86e0:	000d883a 	mov	r6,zero
    86e4:	01d07834 	movhi	r7,16864
    86e8:	8809883a 	mov	r4,r17
    86ec:	800b883a 	mov	r5,r16
    86f0:	0009adc0 	call	9adc <__subdf3>
    86f4:	180b883a 	mov	r5,r3
    86f8:	1009883a 	mov	r4,r2
    86fc:	000a3d80 	call	a3d8 <__fixdfsi>
    8700:	00e00034 	movhi	r3,32768
    8704:	10c5883a 	add	r2,r2,r3
    8708:	003ff006 	br	86cc <_gp+0xffff270c>

0000870c <__divsi3>:
    870c:	20001b16 	blt	r4,zero,877c <__divsi3+0x70>
    8710:	000f883a 	mov	r7,zero
    8714:	28001616 	blt	r5,zero,8770 <__divsi3+0x64>
    8718:	200d883a 	mov	r6,r4
    871c:	29001a2e 	bgeu	r5,r4,8788 <__divsi3+0x7c>
    8720:	00800804 	movi	r2,32
    8724:	00c00044 	movi	r3,1
    8728:	00000106 	br	8730 <__divsi3+0x24>
    872c:	10000d26 	beq	r2,zero,8764 <__divsi3+0x58>
    8730:	294b883a 	add	r5,r5,r5
    8734:	10bfffc4 	addi	r2,r2,-1
    8738:	18c7883a 	add	r3,r3,r3
    873c:	293ffb36 	bltu	r5,r4,872c <_gp+0xffff276c>
    8740:	0005883a 	mov	r2,zero
    8744:	18000726 	beq	r3,zero,8764 <__divsi3+0x58>
    8748:	0005883a 	mov	r2,zero
    874c:	31400236 	bltu	r6,r5,8758 <__divsi3+0x4c>
    8750:	314dc83a 	sub	r6,r6,r5
    8754:	10c4b03a 	or	r2,r2,r3
    8758:	1806d07a 	srli	r3,r3,1
    875c:	280ad07a 	srli	r5,r5,1
    8760:	183ffa1e 	bne	r3,zero,874c <_gp+0xffff278c>
    8764:	38000126 	beq	r7,zero,876c <__divsi3+0x60>
    8768:	0085c83a 	sub	r2,zero,r2
    876c:	f800283a 	ret
    8770:	014bc83a 	sub	r5,zero,r5
    8774:	39c0005c 	xori	r7,r7,1
    8778:	003fe706 	br	8718 <_gp+0xffff2758>
    877c:	0109c83a 	sub	r4,zero,r4
    8780:	01c00044 	movi	r7,1
    8784:	003fe306 	br	8714 <_gp+0xffff2754>
    8788:	00c00044 	movi	r3,1
    878c:	003fee06 	br	8748 <_gp+0xffff2788>

00008790 <__modsi3>:
    8790:	20001716 	blt	r4,zero,87f0 <__modsi3+0x60>
    8794:	000f883a 	mov	r7,zero
    8798:	2005883a 	mov	r2,r4
    879c:	28001216 	blt	r5,zero,87e8 <__modsi3+0x58>
    87a0:	2900162e 	bgeu	r5,r4,87fc <__modsi3+0x6c>
    87a4:	01800804 	movi	r6,32
    87a8:	00c00044 	movi	r3,1
    87ac:	00000106 	br	87b4 <__modsi3+0x24>
    87b0:	30000a26 	beq	r6,zero,87dc <__modsi3+0x4c>
    87b4:	294b883a 	add	r5,r5,r5
    87b8:	31bfffc4 	addi	r6,r6,-1
    87bc:	18c7883a 	add	r3,r3,r3
    87c0:	293ffb36 	bltu	r5,r4,87b0 <_gp+0xffff27f0>
    87c4:	18000526 	beq	r3,zero,87dc <__modsi3+0x4c>
    87c8:	1806d07a 	srli	r3,r3,1
    87cc:	11400136 	bltu	r2,r5,87d4 <__modsi3+0x44>
    87d0:	1145c83a 	sub	r2,r2,r5
    87d4:	280ad07a 	srli	r5,r5,1
    87d8:	183ffb1e 	bne	r3,zero,87c8 <_gp+0xffff2808>
    87dc:	38000126 	beq	r7,zero,87e4 <__modsi3+0x54>
    87e0:	0085c83a 	sub	r2,zero,r2
    87e4:	f800283a 	ret
    87e8:	014bc83a 	sub	r5,zero,r5
    87ec:	003fec06 	br	87a0 <_gp+0xffff27e0>
    87f0:	0109c83a 	sub	r4,zero,r4
    87f4:	01c00044 	movi	r7,1
    87f8:	003fe706 	br	8798 <_gp+0xffff27d8>
    87fc:	00c00044 	movi	r3,1
    8800:	003ff106 	br	87c8 <_gp+0xffff2808>

00008804 <__udivsi3>:
    8804:	200d883a 	mov	r6,r4
    8808:	2900152e 	bgeu	r5,r4,8860 <__udivsi3+0x5c>
    880c:	28001416 	blt	r5,zero,8860 <__udivsi3+0x5c>
    8810:	00800804 	movi	r2,32
    8814:	00c00044 	movi	r3,1
    8818:	00000206 	br	8824 <__udivsi3+0x20>
    881c:	10000e26 	beq	r2,zero,8858 <__udivsi3+0x54>
    8820:	28000516 	blt	r5,zero,8838 <__udivsi3+0x34>
    8824:	294b883a 	add	r5,r5,r5
    8828:	10bfffc4 	addi	r2,r2,-1
    882c:	18c7883a 	add	r3,r3,r3
    8830:	293ffa36 	bltu	r5,r4,881c <_gp+0xffff285c>
    8834:	18000826 	beq	r3,zero,8858 <__udivsi3+0x54>
    8838:	0005883a 	mov	r2,zero
    883c:	31400236 	bltu	r6,r5,8848 <__udivsi3+0x44>
    8840:	314dc83a 	sub	r6,r6,r5
    8844:	10c4b03a 	or	r2,r2,r3
    8848:	1806d07a 	srli	r3,r3,1
    884c:	280ad07a 	srli	r5,r5,1
    8850:	183ffa1e 	bne	r3,zero,883c <_gp+0xffff287c>
    8854:	f800283a 	ret
    8858:	0005883a 	mov	r2,zero
    885c:	f800283a 	ret
    8860:	00c00044 	movi	r3,1
    8864:	003ff406 	br	8838 <_gp+0xffff2878>

00008868 <__umodsi3>:
    8868:	2005883a 	mov	r2,r4
    886c:	2900122e 	bgeu	r5,r4,88b8 <__umodsi3+0x50>
    8870:	28001116 	blt	r5,zero,88b8 <__umodsi3+0x50>
    8874:	01800804 	movi	r6,32
    8878:	00c00044 	movi	r3,1
    887c:	00000206 	br	8888 <__umodsi3+0x20>
    8880:	30000c26 	beq	r6,zero,88b4 <__umodsi3+0x4c>
    8884:	28000516 	blt	r5,zero,889c <__umodsi3+0x34>
    8888:	294b883a 	add	r5,r5,r5
    888c:	31bfffc4 	addi	r6,r6,-1
    8890:	18c7883a 	add	r3,r3,r3
    8894:	293ffa36 	bltu	r5,r4,8880 <_gp+0xffff28c0>
    8898:	18000626 	beq	r3,zero,88b4 <__umodsi3+0x4c>
    889c:	1806d07a 	srli	r3,r3,1
    88a0:	11400136 	bltu	r2,r5,88a8 <__umodsi3+0x40>
    88a4:	1145c83a 	sub	r2,r2,r5
    88a8:	280ad07a 	srli	r5,r5,1
    88ac:	183ffb1e 	bne	r3,zero,889c <_gp+0xffff28dc>
    88b0:	f800283a 	ret
    88b4:	f800283a 	ret
    88b8:	00c00044 	movi	r3,1
    88bc:	003ff706 	br	889c <_gp+0xffff28dc>

000088c0 <__mulsi3>:
    88c0:	0005883a 	mov	r2,zero
    88c4:	20000726 	beq	r4,zero,88e4 <__mulsi3+0x24>
    88c8:	20c0004c 	andi	r3,r4,1
    88cc:	2008d07a 	srli	r4,r4,1
    88d0:	18000126 	beq	r3,zero,88d8 <__mulsi3+0x18>
    88d4:	1145883a 	add	r2,r2,r5
    88d8:	294b883a 	add	r5,r5,r5
    88dc:	203ffa1e 	bne	r4,zero,88c8 <_gp+0xffff2908>
    88e0:	f800283a 	ret
    88e4:	f800283a 	ret

000088e8 <__adddf3>:
    88e8:	02c00434 	movhi	r11,16
    88ec:	5affffc4 	addi	r11,r11,-1
    88f0:	2806d7fa 	srli	r3,r5,31
    88f4:	2ad4703a 	and	r10,r5,r11
    88f8:	3ad2703a 	and	r9,r7,r11
    88fc:	3804d53a 	srli	r2,r7,20
    8900:	3018d77a 	srli	r12,r6,29
    8904:	280ad53a 	srli	r5,r5,20
    8908:	501490fa 	slli	r10,r10,3
    890c:	2010d77a 	srli	r8,r4,29
    8910:	481290fa 	slli	r9,r9,3
    8914:	380ed7fa 	srli	r7,r7,31
    8918:	defffb04 	addi	sp,sp,-20
    891c:	dc800215 	stw	r18,8(sp)
    8920:	dc400115 	stw	r17,4(sp)
    8924:	dc000015 	stw	r16,0(sp)
    8928:	dfc00415 	stw	ra,16(sp)
    892c:	dcc00315 	stw	r19,12(sp)
    8930:	1c803fcc 	andi	r18,r3,255
    8934:	2c01ffcc 	andi	r16,r5,2047
    8938:	5210b03a 	or	r8,r10,r8
    893c:	202290fa 	slli	r17,r4,3
    8940:	1081ffcc 	andi	r2,r2,2047
    8944:	4b12b03a 	or	r9,r9,r12
    8948:	300c90fa 	slli	r6,r6,3
    894c:	91c07526 	beq	r18,r7,8b24 <__adddf3+0x23c>
    8950:	8087c83a 	sub	r3,r16,r2
    8954:	00c0ab0e 	bge	zero,r3,8c04 <__adddf3+0x31c>
    8958:	10002a1e 	bne	r2,zero,8a04 <__adddf3+0x11c>
    895c:	4984b03a 	or	r2,r9,r6
    8960:	1000961e 	bne	r2,zero,8bbc <__adddf3+0x2d4>
    8964:	888001cc 	andi	r2,r17,7
    8968:	10000726 	beq	r2,zero,8988 <__adddf3+0xa0>
    896c:	888003cc 	andi	r2,r17,15
    8970:	00c00104 	movi	r3,4
    8974:	10c00426 	beq	r2,r3,8988 <__adddf3+0xa0>
    8978:	88c7883a 	add	r3,r17,r3
    897c:	1c63803a 	cmpltu	r17,r3,r17
    8980:	4451883a 	add	r8,r8,r17
    8984:	1823883a 	mov	r17,r3
    8988:	4080202c 	andhi	r2,r8,128
    898c:	10005926 	beq	r2,zero,8af4 <__adddf3+0x20c>
    8990:	84000044 	addi	r16,r16,1
    8994:	0081ffc4 	movi	r2,2047
    8998:	8080ba26 	beq	r16,r2,8c84 <__adddf3+0x39c>
    899c:	00bfe034 	movhi	r2,65408
    89a0:	10bfffc4 	addi	r2,r2,-1
    89a4:	4090703a 	and	r8,r8,r2
    89a8:	4004977a 	slli	r2,r8,29
    89ac:	4010927a 	slli	r8,r8,9
    89b0:	8822d0fa 	srli	r17,r17,3
    89b4:	8401ffcc 	andi	r16,r16,2047
    89b8:	4010d33a 	srli	r8,r8,12
    89bc:	9007883a 	mov	r3,r18
    89c0:	1444b03a 	or	r2,r2,r17
    89c4:	8401ffcc 	andi	r16,r16,2047
    89c8:	8020953a 	slli	r16,r16,20
    89cc:	18c03fcc 	andi	r3,r3,255
    89d0:	01000434 	movhi	r4,16
    89d4:	213fffc4 	addi	r4,r4,-1
    89d8:	180697fa 	slli	r3,r3,31
    89dc:	4110703a 	and	r8,r8,r4
    89e0:	4410b03a 	or	r8,r8,r16
    89e4:	40c6b03a 	or	r3,r8,r3
    89e8:	dfc00417 	ldw	ra,16(sp)
    89ec:	dcc00317 	ldw	r19,12(sp)
    89f0:	dc800217 	ldw	r18,8(sp)
    89f4:	dc400117 	ldw	r17,4(sp)
    89f8:	dc000017 	ldw	r16,0(sp)
    89fc:	dec00504 	addi	sp,sp,20
    8a00:	f800283a 	ret
    8a04:	0081ffc4 	movi	r2,2047
    8a08:	80bfd626 	beq	r16,r2,8964 <_gp+0xffff29a4>
    8a0c:	4a402034 	orhi	r9,r9,128
    8a10:	00800e04 	movi	r2,56
    8a14:	10c09f16 	blt	r2,r3,8c94 <__adddf3+0x3ac>
    8a18:	008007c4 	movi	r2,31
    8a1c:	10c0c216 	blt	r2,r3,8d28 <__adddf3+0x440>
    8a20:	00800804 	movi	r2,32
    8a24:	10c5c83a 	sub	r2,r2,r3
    8a28:	488a983a 	sll	r5,r9,r2
    8a2c:	30c8d83a 	srl	r4,r6,r3
    8a30:	3084983a 	sll	r2,r6,r2
    8a34:	48c6d83a 	srl	r3,r9,r3
    8a38:	290cb03a 	or	r6,r5,r4
    8a3c:	1004c03a 	cmpne	r2,r2,zero
    8a40:	308cb03a 	or	r6,r6,r2
    8a44:	898dc83a 	sub	r6,r17,r6
    8a48:	89a3803a 	cmpltu	r17,r17,r6
    8a4c:	40d1c83a 	sub	r8,r8,r3
    8a50:	4451c83a 	sub	r8,r8,r17
    8a54:	3023883a 	mov	r17,r6
    8a58:	4080202c 	andhi	r2,r8,128
    8a5c:	10002326 	beq	r2,zero,8aec <__adddf3+0x204>
    8a60:	04c02034 	movhi	r19,128
    8a64:	9cffffc4 	addi	r19,r19,-1
    8a68:	44e6703a 	and	r19,r8,r19
    8a6c:	98007626 	beq	r19,zero,8c48 <__adddf3+0x360>
    8a70:	9809883a 	mov	r4,r19
    8a74:	000a5dc0 	call	a5dc <__clzsi2>
    8a78:	10fffe04 	addi	r3,r2,-8
    8a7c:	010007c4 	movi	r4,31
    8a80:	20c07716 	blt	r4,r3,8c60 <__adddf3+0x378>
    8a84:	00800804 	movi	r2,32
    8a88:	10c5c83a 	sub	r2,r2,r3
    8a8c:	8884d83a 	srl	r2,r17,r2
    8a90:	98d0983a 	sll	r8,r19,r3
    8a94:	88e2983a 	sll	r17,r17,r3
    8a98:	1204b03a 	or	r2,r2,r8
    8a9c:	1c007416 	blt	r3,r16,8c70 <__adddf3+0x388>
    8aa0:	1c21c83a 	sub	r16,r3,r16
    8aa4:	82000044 	addi	r8,r16,1
    8aa8:	00c007c4 	movi	r3,31
    8aac:	1a009116 	blt	r3,r8,8cf4 <__adddf3+0x40c>
    8ab0:	00c00804 	movi	r3,32
    8ab4:	1a07c83a 	sub	r3,r3,r8
    8ab8:	8a08d83a 	srl	r4,r17,r8
    8abc:	88e2983a 	sll	r17,r17,r3
    8ac0:	10c6983a 	sll	r3,r2,r3
    8ac4:	1210d83a 	srl	r8,r2,r8
    8ac8:	8804c03a 	cmpne	r2,r17,zero
    8acc:	1906b03a 	or	r3,r3,r4
    8ad0:	18a2b03a 	or	r17,r3,r2
    8ad4:	0021883a 	mov	r16,zero
    8ad8:	003fa206 	br	8964 <_gp+0xffff29a4>
    8adc:	1890b03a 	or	r8,r3,r2
    8ae0:	40017d26 	beq	r8,zero,90d8 <__adddf3+0x7f0>
    8ae4:	1011883a 	mov	r8,r2
    8ae8:	1823883a 	mov	r17,r3
    8aec:	888001cc 	andi	r2,r17,7
    8af0:	103f9e1e 	bne	r2,zero,896c <_gp+0xffff29ac>
    8af4:	4004977a 	slli	r2,r8,29
    8af8:	8822d0fa 	srli	r17,r17,3
    8afc:	4010d0fa 	srli	r8,r8,3
    8b00:	9007883a 	mov	r3,r18
    8b04:	1444b03a 	or	r2,r2,r17
    8b08:	0101ffc4 	movi	r4,2047
    8b0c:	81002426 	beq	r16,r4,8ba0 <__adddf3+0x2b8>
    8b10:	8120703a 	and	r16,r16,r4
    8b14:	01000434 	movhi	r4,16
    8b18:	213fffc4 	addi	r4,r4,-1
    8b1c:	4110703a 	and	r8,r8,r4
    8b20:	003fa806 	br	89c4 <_gp+0xffff2a04>
    8b24:	8089c83a 	sub	r4,r16,r2
    8b28:	01005e0e 	bge	zero,r4,8ca4 <__adddf3+0x3bc>
    8b2c:	10002b26 	beq	r2,zero,8bdc <__adddf3+0x2f4>
    8b30:	0081ffc4 	movi	r2,2047
    8b34:	80bf8b26 	beq	r16,r2,8964 <_gp+0xffff29a4>
    8b38:	4a402034 	orhi	r9,r9,128
    8b3c:	00800e04 	movi	r2,56
    8b40:	1100a40e 	bge	r2,r4,8dd4 <__adddf3+0x4ec>
    8b44:	498cb03a 	or	r6,r9,r6
    8b48:	300ac03a 	cmpne	r5,r6,zero
    8b4c:	0013883a 	mov	r9,zero
    8b50:	2c4b883a 	add	r5,r5,r17
    8b54:	2c63803a 	cmpltu	r17,r5,r17
    8b58:	4a11883a 	add	r8,r9,r8
    8b5c:	8a11883a 	add	r8,r17,r8
    8b60:	2823883a 	mov	r17,r5
    8b64:	4080202c 	andhi	r2,r8,128
    8b68:	103fe026 	beq	r2,zero,8aec <_gp+0xffff2b2c>
    8b6c:	84000044 	addi	r16,r16,1
    8b70:	0081ffc4 	movi	r2,2047
    8b74:	8080d226 	beq	r16,r2,8ec0 <__adddf3+0x5d8>
    8b78:	00bfe034 	movhi	r2,65408
    8b7c:	10bfffc4 	addi	r2,r2,-1
    8b80:	4090703a 	and	r8,r8,r2
    8b84:	880ad07a 	srli	r5,r17,1
    8b88:	400897fa 	slli	r4,r8,31
    8b8c:	88c0004c 	andi	r3,r17,1
    8b90:	28e2b03a 	or	r17,r5,r3
    8b94:	4010d07a 	srli	r8,r8,1
    8b98:	2462b03a 	or	r17,r4,r17
    8b9c:	003f7106 	br	8964 <_gp+0xffff29a4>
    8ba0:	4088b03a 	or	r4,r8,r2
    8ba4:	20014526 	beq	r4,zero,90bc <__adddf3+0x7d4>
    8ba8:	01000434 	movhi	r4,16
    8bac:	42000234 	orhi	r8,r8,8
    8bb0:	213fffc4 	addi	r4,r4,-1
    8bb4:	4110703a 	and	r8,r8,r4
    8bb8:	003f8206 	br	89c4 <_gp+0xffff2a04>
    8bbc:	18ffffc4 	addi	r3,r3,-1
    8bc0:	1800491e 	bne	r3,zero,8ce8 <__adddf3+0x400>
    8bc4:	898bc83a 	sub	r5,r17,r6
    8bc8:	8963803a 	cmpltu	r17,r17,r5
    8bcc:	4251c83a 	sub	r8,r8,r9
    8bd0:	4451c83a 	sub	r8,r8,r17
    8bd4:	2823883a 	mov	r17,r5
    8bd8:	003f9f06 	br	8a58 <_gp+0xffff2a98>
    8bdc:	4984b03a 	or	r2,r9,r6
    8be0:	103f6026 	beq	r2,zero,8964 <_gp+0xffff29a4>
    8be4:	213fffc4 	addi	r4,r4,-1
    8be8:	2000931e 	bne	r4,zero,8e38 <__adddf3+0x550>
    8bec:	898d883a 	add	r6,r17,r6
    8bf0:	3463803a 	cmpltu	r17,r6,r17
    8bf4:	4251883a 	add	r8,r8,r9
    8bf8:	8a11883a 	add	r8,r17,r8
    8bfc:	3023883a 	mov	r17,r6
    8c00:	003fd806 	br	8b64 <_gp+0xffff2ba4>
    8c04:	1800541e 	bne	r3,zero,8d58 <__adddf3+0x470>
    8c08:	80800044 	addi	r2,r16,1
    8c0c:	1081ffcc 	andi	r2,r2,2047
    8c10:	00c00044 	movi	r3,1
    8c14:	1880a00e 	bge	r3,r2,8e98 <__adddf3+0x5b0>
    8c18:	8989c83a 	sub	r4,r17,r6
    8c1c:	8905803a 	cmpltu	r2,r17,r4
    8c20:	4267c83a 	sub	r19,r8,r9
    8c24:	98a7c83a 	sub	r19,r19,r2
    8c28:	9880202c 	andhi	r2,r19,128
    8c2c:	10006326 	beq	r2,zero,8dbc <__adddf3+0x4d4>
    8c30:	3463c83a 	sub	r17,r6,r17
    8c34:	4a07c83a 	sub	r3,r9,r8
    8c38:	344d803a 	cmpltu	r6,r6,r17
    8c3c:	19a7c83a 	sub	r19,r3,r6
    8c40:	3825883a 	mov	r18,r7
    8c44:	983f8a1e 	bne	r19,zero,8a70 <_gp+0xffff2ab0>
    8c48:	8809883a 	mov	r4,r17
    8c4c:	000a5dc0 	call	a5dc <__clzsi2>
    8c50:	10800804 	addi	r2,r2,32
    8c54:	10fffe04 	addi	r3,r2,-8
    8c58:	010007c4 	movi	r4,31
    8c5c:	20ff890e 	bge	r4,r3,8a84 <_gp+0xffff2ac4>
    8c60:	10bff604 	addi	r2,r2,-40
    8c64:	8884983a 	sll	r2,r17,r2
    8c68:	0023883a 	mov	r17,zero
    8c6c:	1c3f8c0e 	bge	r3,r16,8aa0 <_gp+0xffff2ae0>
    8c70:	023fe034 	movhi	r8,65408
    8c74:	423fffc4 	addi	r8,r8,-1
    8c78:	80e1c83a 	sub	r16,r16,r3
    8c7c:	1210703a 	and	r8,r2,r8
    8c80:	003f3806 	br	8964 <_gp+0xffff29a4>
    8c84:	9007883a 	mov	r3,r18
    8c88:	0011883a 	mov	r8,zero
    8c8c:	0005883a 	mov	r2,zero
    8c90:	003f4c06 	br	89c4 <_gp+0xffff2a04>
    8c94:	498cb03a 	or	r6,r9,r6
    8c98:	300cc03a 	cmpne	r6,r6,zero
    8c9c:	0007883a 	mov	r3,zero
    8ca0:	003f6806 	br	8a44 <_gp+0xffff2a84>
    8ca4:	20009c1e 	bne	r4,zero,8f18 <__adddf3+0x630>
    8ca8:	80800044 	addi	r2,r16,1
    8cac:	1141ffcc 	andi	r5,r2,2047
    8cb0:	01000044 	movi	r4,1
    8cb4:	2140670e 	bge	r4,r5,8e54 <__adddf3+0x56c>
    8cb8:	0101ffc4 	movi	r4,2047
    8cbc:	11007f26 	beq	r2,r4,8ebc <__adddf3+0x5d4>
    8cc0:	898d883a 	add	r6,r17,r6
    8cc4:	4247883a 	add	r3,r8,r9
    8cc8:	3451803a 	cmpltu	r8,r6,r17
    8ccc:	40d1883a 	add	r8,r8,r3
    8cd0:	402297fa 	slli	r17,r8,31
    8cd4:	300cd07a 	srli	r6,r6,1
    8cd8:	4010d07a 	srli	r8,r8,1
    8cdc:	1021883a 	mov	r16,r2
    8ce0:	89a2b03a 	or	r17,r17,r6
    8ce4:	003f1f06 	br	8964 <_gp+0xffff29a4>
    8ce8:	0081ffc4 	movi	r2,2047
    8cec:	80bf481e 	bne	r16,r2,8a10 <_gp+0xffff2a50>
    8cf0:	003f1c06 	br	8964 <_gp+0xffff29a4>
    8cf4:	843ff844 	addi	r16,r16,-31
    8cf8:	01000804 	movi	r4,32
    8cfc:	1406d83a 	srl	r3,r2,r16
    8d00:	41005026 	beq	r8,r4,8e44 <__adddf3+0x55c>
    8d04:	01001004 	movi	r4,64
    8d08:	2211c83a 	sub	r8,r4,r8
    8d0c:	1204983a 	sll	r2,r2,r8
    8d10:	88a2b03a 	or	r17,r17,r2
    8d14:	8822c03a 	cmpne	r17,r17,zero
    8d18:	1c62b03a 	or	r17,r3,r17
    8d1c:	0011883a 	mov	r8,zero
    8d20:	0021883a 	mov	r16,zero
    8d24:	003f7106 	br	8aec <_gp+0xffff2b2c>
    8d28:	193ff804 	addi	r4,r3,-32
    8d2c:	00800804 	movi	r2,32
    8d30:	4908d83a 	srl	r4,r9,r4
    8d34:	18804526 	beq	r3,r2,8e4c <__adddf3+0x564>
    8d38:	00801004 	movi	r2,64
    8d3c:	10c5c83a 	sub	r2,r2,r3
    8d40:	4886983a 	sll	r3,r9,r2
    8d44:	198cb03a 	or	r6,r3,r6
    8d48:	300cc03a 	cmpne	r6,r6,zero
    8d4c:	218cb03a 	or	r6,r4,r6
    8d50:	0007883a 	mov	r3,zero
    8d54:	003f3b06 	br	8a44 <_gp+0xffff2a84>
    8d58:	80002a26 	beq	r16,zero,8e04 <__adddf3+0x51c>
    8d5c:	0101ffc4 	movi	r4,2047
    8d60:	11006826 	beq	r2,r4,8f04 <__adddf3+0x61c>
    8d64:	00c7c83a 	sub	r3,zero,r3
    8d68:	42002034 	orhi	r8,r8,128
    8d6c:	01000e04 	movi	r4,56
    8d70:	20c07c16 	blt	r4,r3,8f64 <__adddf3+0x67c>
    8d74:	010007c4 	movi	r4,31
    8d78:	20c0da16 	blt	r4,r3,90e4 <__adddf3+0x7fc>
    8d7c:	01000804 	movi	r4,32
    8d80:	20c9c83a 	sub	r4,r4,r3
    8d84:	4114983a 	sll	r10,r8,r4
    8d88:	88cad83a 	srl	r5,r17,r3
    8d8c:	8908983a 	sll	r4,r17,r4
    8d90:	40c6d83a 	srl	r3,r8,r3
    8d94:	5162b03a 	or	r17,r10,r5
    8d98:	2008c03a 	cmpne	r4,r4,zero
    8d9c:	8922b03a 	or	r17,r17,r4
    8da0:	3463c83a 	sub	r17,r6,r17
    8da4:	48c7c83a 	sub	r3,r9,r3
    8da8:	344d803a 	cmpltu	r6,r6,r17
    8dac:	1991c83a 	sub	r8,r3,r6
    8db0:	1021883a 	mov	r16,r2
    8db4:	3825883a 	mov	r18,r7
    8db8:	003f2706 	br	8a58 <_gp+0xffff2a98>
    8dbc:	24d0b03a 	or	r8,r4,r19
    8dc0:	40001b1e 	bne	r8,zero,8e30 <__adddf3+0x548>
    8dc4:	0005883a 	mov	r2,zero
    8dc8:	0007883a 	mov	r3,zero
    8dcc:	0021883a 	mov	r16,zero
    8dd0:	003f4d06 	br	8b08 <_gp+0xffff2b48>
    8dd4:	008007c4 	movi	r2,31
    8dd8:	11003c16 	blt	r2,r4,8ecc <__adddf3+0x5e4>
    8ddc:	00800804 	movi	r2,32
    8de0:	1105c83a 	sub	r2,r2,r4
    8de4:	488e983a 	sll	r7,r9,r2
    8de8:	310ad83a 	srl	r5,r6,r4
    8dec:	3084983a 	sll	r2,r6,r2
    8df0:	4912d83a 	srl	r9,r9,r4
    8df4:	394ab03a 	or	r5,r7,r5
    8df8:	1004c03a 	cmpne	r2,r2,zero
    8dfc:	288ab03a 	or	r5,r5,r2
    8e00:	003f5306 	br	8b50 <_gp+0xffff2b90>
    8e04:	4448b03a 	or	r4,r8,r17
    8e08:	20003e26 	beq	r4,zero,8f04 <__adddf3+0x61c>
    8e0c:	00c6303a 	nor	r3,zero,r3
    8e10:	18003a1e 	bne	r3,zero,8efc <__adddf3+0x614>
    8e14:	3463c83a 	sub	r17,r6,r17
    8e18:	4a07c83a 	sub	r3,r9,r8
    8e1c:	344d803a 	cmpltu	r6,r6,r17
    8e20:	1991c83a 	sub	r8,r3,r6
    8e24:	1021883a 	mov	r16,r2
    8e28:	3825883a 	mov	r18,r7
    8e2c:	003f0a06 	br	8a58 <_gp+0xffff2a98>
    8e30:	2023883a 	mov	r17,r4
    8e34:	003f0d06 	br	8a6c <_gp+0xffff2aac>
    8e38:	0081ffc4 	movi	r2,2047
    8e3c:	80bf3f1e 	bne	r16,r2,8b3c <_gp+0xffff2b7c>
    8e40:	003ec806 	br	8964 <_gp+0xffff29a4>
    8e44:	0005883a 	mov	r2,zero
    8e48:	003fb106 	br	8d10 <_gp+0xffff2d50>
    8e4c:	0007883a 	mov	r3,zero
    8e50:	003fbc06 	br	8d44 <_gp+0xffff2d84>
    8e54:	4444b03a 	or	r2,r8,r17
    8e58:	8000871e 	bne	r16,zero,9078 <__adddf3+0x790>
    8e5c:	1000ba26 	beq	r2,zero,9148 <__adddf3+0x860>
    8e60:	4984b03a 	or	r2,r9,r6
    8e64:	103ebf26 	beq	r2,zero,8964 <_gp+0xffff29a4>
    8e68:	8985883a 	add	r2,r17,r6
    8e6c:	4247883a 	add	r3,r8,r9
    8e70:	1451803a 	cmpltu	r8,r2,r17
    8e74:	40d1883a 	add	r8,r8,r3
    8e78:	40c0202c 	andhi	r3,r8,128
    8e7c:	1023883a 	mov	r17,r2
    8e80:	183f1a26 	beq	r3,zero,8aec <_gp+0xffff2b2c>
    8e84:	00bfe034 	movhi	r2,65408
    8e88:	10bfffc4 	addi	r2,r2,-1
    8e8c:	2021883a 	mov	r16,r4
    8e90:	4090703a 	and	r8,r8,r2
    8e94:	003eb306 	br	8964 <_gp+0xffff29a4>
    8e98:	4444b03a 	or	r2,r8,r17
    8e9c:	8000291e 	bne	r16,zero,8f44 <__adddf3+0x65c>
    8ea0:	10004b1e 	bne	r2,zero,8fd0 <__adddf3+0x6e8>
    8ea4:	4990b03a 	or	r8,r9,r6
    8ea8:	40008b26 	beq	r8,zero,90d8 <__adddf3+0x7f0>
    8eac:	4811883a 	mov	r8,r9
    8eb0:	3023883a 	mov	r17,r6
    8eb4:	3825883a 	mov	r18,r7
    8eb8:	003eaa06 	br	8964 <_gp+0xffff29a4>
    8ebc:	1021883a 	mov	r16,r2
    8ec0:	0011883a 	mov	r8,zero
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	003f0f06 	br	8b08 <_gp+0xffff2b48>
    8ecc:	217ff804 	addi	r5,r4,-32
    8ed0:	00800804 	movi	r2,32
    8ed4:	494ad83a 	srl	r5,r9,r5
    8ed8:	20807d26 	beq	r4,r2,90d0 <__adddf3+0x7e8>
    8edc:	00801004 	movi	r2,64
    8ee0:	1109c83a 	sub	r4,r2,r4
    8ee4:	4912983a 	sll	r9,r9,r4
    8ee8:	498cb03a 	or	r6,r9,r6
    8eec:	300cc03a 	cmpne	r6,r6,zero
    8ef0:	298ab03a 	or	r5,r5,r6
    8ef4:	0013883a 	mov	r9,zero
    8ef8:	003f1506 	br	8b50 <_gp+0xffff2b90>
    8efc:	0101ffc4 	movi	r4,2047
    8f00:	113f9a1e 	bne	r2,r4,8d6c <_gp+0xffff2dac>
    8f04:	4811883a 	mov	r8,r9
    8f08:	3023883a 	mov	r17,r6
    8f0c:	1021883a 	mov	r16,r2
    8f10:	3825883a 	mov	r18,r7
    8f14:	003e9306 	br	8964 <_gp+0xffff29a4>
    8f18:	8000161e 	bne	r16,zero,8f74 <__adddf3+0x68c>
    8f1c:	444ab03a 	or	r5,r8,r17
    8f20:	28005126 	beq	r5,zero,9068 <__adddf3+0x780>
    8f24:	0108303a 	nor	r4,zero,r4
    8f28:	20004d1e 	bne	r4,zero,9060 <__adddf3+0x778>
    8f2c:	89a3883a 	add	r17,r17,r6
    8f30:	4253883a 	add	r9,r8,r9
    8f34:	898d803a 	cmpltu	r6,r17,r6
    8f38:	3251883a 	add	r8,r6,r9
    8f3c:	1021883a 	mov	r16,r2
    8f40:	003f0806 	br	8b64 <_gp+0xffff2ba4>
    8f44:	1000301e 	bne	r2,zero,9008 <__adddf3+0x720>
    8f48:	4984b03a 	or	r2,r9,r6
    8f4c:	10007126 	beq	r2,zero,9114 <__adddf3+0x82c>
    8f50:	4811883a 	mov	r8,r9
    8f54:	3023883a 	mov	r17,r6
    8f58:	3825883a 	mov	r18,r7
    8f5c:	0401ffc4 	movi	r16,2047
    8f60:	003e8006 	br	8964 <_gp+0xffff29a4>
    8f64:	4462b03a 	or	r17,r8,r17
    8f68:	8822c03a 	cmpne	r17,r17,zero
    8f6c:	0007883a 	mov	r3,zero
    8f70:	003f8b06 	br	8da0 <_gp+0xffff2de0>
    8f74:	0141ffc4 	movi	r5,2047
    8f78:	11403b26 	beq	r2,r5,9068 <__adddf3+0x780>
    8f7c:	0109c83a 	sub	r4,zero,r4
    8f80:	42002034 	orhi	r8,r8,128
    8f84:	01400e04 	movi	r5,56
    8f88:	29006716 	blt	r5,r4,9128 <__adddf3+0x840>
    8f8c:	014007c4 	movi	r5,31
    8f90:	29007016 	blt	r5,r4,9154 <__adddf3+0x86c>
    8f94:	01400804 	movi	r5,32
    8f98:	290bc83a 	sub	r5,r5,r4
    8f9c:	4154983a 	sll	r10,r8,r5
    8fa0:	890ed83a 	srl	r7,r17,r4
    8fa4:	894a983a 	sll	r5,r17,r5
    8fa8:	4108d83a 	srl	r4,r8,r4
    8fac:	51e2b03a 	or	r17,r10,r7
    8fb0:	280ac03a 	cmpne	r5,r5,zero
    8fb4:	8962b03a 	or	r17,r17,r5
    8fb8:	89a3883a 	add	r17,r17,r6
    8fbc:	2253883a 	add	r9,r4,r9
    8fc0:	898d803a 	cmpltu	r6,r17,r6
    8fc4:	3251883a 	add	r8,r6,r9
    8fc8:	1021883a 	mov	r16,r2
    8fcc:	003ee506 	br	8b64 <_gp+0xffff2ba4>
    8fd0:	4984b03a 	or	r2,r9,r6
    8fd4:	103e6326 	beq	r2,zero,8964 <_gp+0xffff29a4>
    8fd8:	8987c83a 	sub	r3,r17,r6
    8fdc:	88c9803a 	cmpltu	r4,r17,r3
    8fe0:	4245c83a 	sub	r2,r8,r9
    8fe4:	1105c83a 	sub	r2,r2,r4
    8fe8:	1100202c 	andhi	r4,r2,128
    8fec:	203ebb26 	beq	r4,zero,8adc <_gp+0xffff2b1c>
    8ff0:	3463c83a 	sub	r17,r6,r17
    8ff4:	4a07c83a 	sub	r3,r9,r8
    8ff8:	344d803a 	cmpltu	r6,r6,r17
    8ffc:	1991c83a 	sub	r8,r3,r6
    9000:	3825883a 	mov	r18,r7
    9004:	003e5706 	br	8964 <_gp+0xffff29a4>
    9008:	4984b03a 	or	r2,r9,r6
    900c:	10002e26 	beq	r2,zero,90c8 <__adddf3+0x7e0>
    9010:	4004d0fa 	srli	r2,r8,3
    9014:	8822d0fa 	srli	r17,r17,3
    9018:	4010977a 	slli	r8,r8,29
    901c:	10c0022c 	andhi	r3,r2,8
    9020:	4462b03a 	or	r17,r8,r17
    9024:	18000826 	beq	r3,zero,9048 <__adddf3+0x760>
    9028:	4808d0fa 	srli	r4,r9,3
    902c:	20c0022c 	andhi	r3,r4,8
    9030:	1800051e 	bne	r3,zero,9048 <__adddf3+0x760>
    9034:	300cd0fa 	srli	r6,r6,3
    9038:	4806977a 	slli	r3,r9,29
    903c:	2005883a 	mov	r2,r4
    9040:	3825883a 	mov	r18,r7
    9044:	19a2b03a 	or	r17,r3,r6
    9048:	8810d77a 	srli	r8,r17,29
    904c:	100490fa 	slli	r2,r2,3
    9050:	882290fa 	slli	r17,r17,3
    9054:	0401ffc4 	movi	r16,2047
    9058:	4090b03a 	or	r8,r8,r2
    905c:	003e4106 	br	8964 <_gp+0xffff29a4>
    9060:	0141ffc4 	movi	r5,2047
    9064:	117fc71e 	bne	r2,r5,8f84 <_gp+0xffff2fc4>
    9068:	4811883a 	mov	r8,r9
    906c:	3023883a 	mov	r17,r6
    9070:	1021883a 	mov	r16,r2
    9074:	003e3b06 	br	8964 <_gp+0xffff29a4>
    9078:	10002f26 	beq	r2,zero,9138 <__adddf3+0x850>
    907c:	4984b03a 	or	r2,r9,r6
    9080:	10001126 	beq	r2,zero,90c8 <__adddf3+0x7e0>
    9084:	4004d0fa 	srli	r2,r8,3
    9088:	8822d0fa 	srli	r17,r17,3
    908c:	4010977a 	slli	r8,r8,29
    9090:	10c0022c 	andhi	r3,r2,8
    9094:	4462b03a 	or	r17,r8,r17
    9098:	183feb26 	beq	r3,zero,9048 <_gp+0xffff3088>
    909c:	4808d0fa 	srli	r4,r9,3
    90a0:	20c0022c 	andhi	r3,r4,8
    90a4:	183fe81e 	bne	r3,zero,9048 <_gp+0xffff3088>
    90a8:	300cd0fa 	srli	r6,r6,3
    90ac:	4806977a 	slli	r3,r9,29
    90b0:	2005883a 	mov	r2,r4
    90b4:	19a2b03a 	or	r17,r3,r6
    90b8:	003fe306 	br	9048 <_gp+0xffff3088>
    90bc:	0011883a 	mov	r8,zero
    90c0:	0005883a 	mov	r2,zero
    90c4:	003e3f06 	br	89c4 <_gp+0xffff2a04>
    90c8:	0401ffc4 	movi	r16,2047
    90cc:	003e2506 	br	8964 <_gp+0xffff29a4>
    90d0:	0013883a 	mov	r9,zero
    90d4:	003f8406 	br	8ee8 <_gp+0xffff2f28>
    90d8:	0005883a 	mov	r2,zero
    90dc:	0007883a 	mov	r3,zero
    90e0:	003e8906 	br	8b08 <_gp+0xffff2b48>
    90e4:	197ff804 	addi	r5,r3,-32
    90e8:	01000804 	movi	r4,32
    90ec:	414ad83a 	srl	r5,r8,r5
    90f0:	19002426 	beq	r3,r4,9184 <__adddf3+0x89c>
    90f4:	01001004 	movi	r4,64
    90f8:	20c7c83a 	sub	r3,r4,r3
    90fc:	40c6983a 	sll	r3,r8,r3
    9100:	1c46b03a 	or	r3,r3,r17
    9104:	1806c03a 	cmpne	r3,r3,zero
    9108:	28e2b03a 	or	r17,r5,r3
    910c:	0007883a 	mov	r3,zero
    9110:	003f2306 	br	8da0 <_gp+0xffff2de0>
    9114:	0007883a 	mov	r3,zero
    9118:	5811883a 	mov	r8,r11
    911c:	00bfffc4 	movi	r2,-1
    9120:	0401ffc4 	movi	r16,2047
    9124:	003e7806 	br	8b08 <_gp+0xffff2b48>
    9128:	4462b03a 	or	r17,r8,r17
    912c:	8822c03a 	cmpne	r17,r17,zero
    9130:	0009883a 	mov	r4,zero
    9134:	003fa006 	br	8fb8 <_gp+0xffff2ff8>
    9138:	4811883a 	mov	r8,r9
    913c:	3023883a 	mov	r17,r6
    9140:	0401ffc4 	movi	r16,2047
    9144:	003e0706 	br	8964 <_gp+0xffff29a4>
    9148:	4811883a 	mov	r8,r9
    914c:	3023883a 	mov	r17,r6
    9150:	003e0406 	br	8964 <_gp+0xffff29a4>
    9154:	21fff804 	addi	r7,r4,-32
    9158:	01400804 	movi	r5,32
    915c:	41ced83a 	srl	r7,r8,r7
    9160:	21400a26 	beq	r4,r5,918c <__adddf3+0x8a4>
    9164:	01401004 	movi	r5,64
    9168:	2909c83a 	sub	r4,r5,r4
    916c:	4108983a 	sll	r4,r8,r4
    9170:	2448b03a 	or	r4,r4,r17
    9174:	2008c03a 	cmpne	r4,r4,zero
    9178:	3922b03a 	or	r17,r7,r4
    917c:	0009883a 	mov	r4,zero
    9180:	003f8d06 	br	8fb8 <_gp+0xffff2ff8>
    9184:	0007883a 	mov	r3,zero
    9188:	003fdd06 	br	9100 <_gp+0xffff3140>
    918c:	0009883a 	mov	r4,zero
    9190:	003ff706 	br	9170 <_gp+0xffff31b0>

00009194 <__gedf2>:
    9194:	2804d53a 	srli	r2,r5,20
    9198:	3806d53a 	srli	r3,r7,20
    919c:	02000434 	movhi	r8,16
    91a0:	423fffc4 	addi	r8,r8,-1
    91a4:	1081ffcc 	andi	r2,r2,2047
    91a8:	0241ffc4 	movi	r9,2047
    91ac:	2a14703a 	and	r10,r5,r8
    91b0:	18c1ffcc 	andi	r3,r3,2047
    91b4:	3a10703a 	and	r8,r7,r8
    91b8:	280ad7fa 	srli	r5,r5,31
    91bc:	380ed7fa 	srli	r7,r7,31
    91c0:	12401d26 	beq	r2,r9,9238 <__gedf2+0xa4>
    91c4:	0241ffc4 	movi	r9,2047
    91c8:	1a401226 	beq	r3,r9,9214 <__gedf2+0x80>
    91cc:	1000081e 	bne	r2,zero,91f0 <__gedf2+0x5c>
    91d0:	2296b03a 	or	r11,r4,r10
    91d4:	5813003a 	cmpeq	r9,r11,zero
    91d8:	1800091e 	bne	r3,zero,9200 <__gedf2+0x6c>
    91dc:	3218b03a 	or	r12,r6,r8
    91e0:	6000071e 	bne	r12,zero,9200 <__gedf2+0x6c>
    91e4:	0005883a 	mov	r2,zero
    91e8:	5800101e 	bne	r11,zero,922c <__gedf2+0x98>
    91ec:	f800283a 	ret
    91f0:	18000c1e 	bne	r3,zero,9224 <__gedf2+0x90>
    91f4:	3212b03a 	or	r9,r6,r8
    91f8:	48000c26 	beq	r9,zero,922c <__gedf2+0x98>
    91fc:	0013883a 	mov	r9,zero
    9200:	39c03fcc 	andi	r7,r7,255
    9204:	48000826 	beq	r9,zero,9228 <__gedf2+0x94>
    9208:	38000926 	beq	r7,zero,9230 <__gedf2+0x9c>
    920c:	00800044 	movi	r2,1
    9210:	f800283a 	ret
    9214:	3212b03a 	or	r9,r6,r8
    9218:	483fec26 	beq	r9,zero,91cc <_gp+0xffff320c>
    921c:	00bfff84 	movi	r2,-2
    9220:	f800283a 	ret
    9224:	39c03fcc 	andi	r7,r7,255
    9228:	29c00626 	beq	r5,r7,9244 <__gedf2+0xb0>
    922c:	283ff726 	beq	r5,zero,920c <_gp+0xffff324c>
    9230:	00bfffc4 	movi	r2,-1
    9234:	f800283a 	ret
    9238:	2292b03a 	or	r9,r4,r10
    923c:	483fe126 	beq	r9,zero,91c4 <_gp+0xffff3204>
    9240:	003ff606 	br	921c <_gp+0xffff325c>
    9244:	18bff916 	blt	r3,r2,922c <_gp+0xffff326c>
    9248:	10c00316 	blt	r2,r3,9258 <__gedf2+0xc4>
    924c:	42bff736 	bltu	r8,r10,922c <_gp+0xffff326c>
    9250:	52000326 	beq	r10,r8,9260 <__gedf2+0xcc>
    9254:	5200042e 	bgeu	r10,r8,9268 <__gedf2+0xd4>
    9258:	283fec1e 	bne	r5,zero,920c <_gp+0xffff324c>
    925c:	003ff406 	br	9230 <_gp+0xffff3270>
    9260:	313ff236 	bltu	r6,r4,922c <_gp+0xffff326c>
    9264:	21bffc36 	bltu	r4,r6,9258 <_gp+0xffff3298>
    9268:	0005883a 	mov	r2,zero
    926c:	f800283a 	ret

00009270 <__muldf3>:
    9270:	deffee04 	addi	sp,sp,-72
    9274:	dd000c15 	stw	r20,48(sp)
    9278:	2828d53a 	srli	r20,r5,20
    927c:	ddc00f15 	stw	r23,60(sp)
    9280:	282ed7fa 	srli	r23,r5,31
    9284:	dc000815 	stw	r16,32(sp)
    9288:	04000434 	movhi	r16,16
    928c:	dcc00b15 	stw	r19,44(sp)
    9290:	843fffc4 	addi	r16,r16,-1
    9294:	dfc01115 	stw	ra,68(sp)
    9298:	df001015 	stw	fp,64(sp)
    929c:	dd800e15 	stw	r22,56(sp)
    92a0:	dd400d15 	stw	r21,52(sp)
    92a4:	dc800a15 	stw	r18,40(sp)
    92a8:	dc400915 	stw	r17,36(sp)
    92ac:	a501ffcc 	andi	r20,r20,2047
    92b0:	2c20703a 	and	r16,r5,r16
    92b4:	b827883a 	mov	r19,r23
    92b8:	ba403fcc 	andi	r9,r23,255
    92bc:	a0006026 	beq	r20,zero,9440 <__muldf3+0x1d0>
    92c0:	0081ffc4 	movi	r2,2047
    92c4:	202d883a 	mov	r22,r4
    92c8:	a0803626 	beq	r20,r2,93a4 <__muldf3+0x134>
    92cc:	84000434 	orhi	r16,r16,16
    92d0:	200ad77a 	srli	r5,r4,29
    92d4:	800490fa 	slli	r2,r16,3
    92d8:	202c90fa 	slli	r22,r4,3
    92dc:	a53f0044 	addi	r20,r20,-1023
    92e0:	28a0b03a 	or	r16,r5,r2
    92e4:	002b883a 	mov	r21,zero
    92e8:	000b883a 	mov	r5,zero
    92ec:	3804d53a 	srli	r2,r7,20
    92f0:	3838d7fa 	srli	fp,r7,31
    92f4:	04400434 	movhi	r17,16
    92f8:	8c7fffc4 	addi	r17,r17,-1
    92fc:	1081ffcc 	andi	r2,r2,2047
    9300:	3025883a 	mov	r18,r6
    9304:	3c62703a 	and	r17,r7,r17
    9308:	e2803fcc 	andi	r10,fp,255
    930c:	10006d26 	beq	r2,zero,94c4 <__muldf3+0x254>
    9310:	00c1ffc4 	movi	r3,2047
    9314:	10c06526 	beq	r2,r3,94ac <__muldf3+0x23c>
    9318:	8c400434 	orhi	r17,r17,16
    931c:	300ed77a 	srli	r7,r6,29
    9320:	880690fa 	slli	r3,r17,3
    9324:	302490fa 	slli	r18,r6,3
    9328:	10bf0044 	addi	r2,r2,-1023
    932c:	38e2b03a 	or	r17,r7,r3
    9330:	000f883a 	mov	r7,zero
    9334:	a087883a 	add	r3,r20,r2
    9338:	010003c4 	movi	r4,15
    933c:	3d44b03a 	or	r2,r7,r21
    9340:	e5ccf03a 	xor	r6,fp,r23
    9344:	1a000044 	addi	r8,r3,1
    9348:	20809b36 	bltu	r4,r2,95b8 <__muldf3+0x348>
    934c:	100490ba 	slli	r2,r2,2
    9350:	01000074 	movhi	r4,1
    9354:	2124d904 	addi	r4,r4,-27804
    9358:	1105883a 	add	r2,r2,r4
    935c:	10800017 	ldw	r2,0(r2)
    9360:	1000683a 	jmp	r2
    9364:	000095b8 	rdprs	zero,zero,598
    9368:	000093c4 	movi	zero,591
    936c:	000093c4 	movi	zero,591
    9370:	000093c0 	call	93c <__reset-0x76c4>
    9374:	00009594 	movui	zero,598
    9378:	00009594 	movui	zero,598
    937c:	0000957c 	xorhi	zero,zero,597
    9380:	000093c0 	call	93c <__reset-0x76c4>
    9384:	00009594 	movui	zero,598
    9388:	0000957c 	xorhi	zero,zero,597
    938c:	00009594 	movui	zero,598
    9390:	000093c0 	call	93c <__reset-0x76c4>
    9394:	000095a4 	muli	zero,zero,598
    9398:	000095a4 	muli	zero,zero,598
    939c:	000095a4 	muli	zero,zero,598
    93a0:	00009904 	movi	zero,612
    93a4:	2404b03a 	or	r2,r4,r16
    93a8:	1000711e 	bne	r2,zero,9570 <__muldf3+0x300>
    93ac:	05400204 	movi	r21,8
    93b0:	0021883a 	mov	r16,zero
    93b4:	002d883a 	mov	r22,zero
    93b8:	01400084 	movi	r5,2
    93bc:	003fcb06 	br	92ec <_gp+0xffff332c>
    93c0:	500d883a 	mov	r6,r10
    93c4:	00800084 	movi	r2,2
    93c8:	38805926 	beq	r7,r2,9530 <__muldf3+0x2c0>
    93cc:	008000c4 	movi	r2,3
    93d0:	3881bb26 	beq	r7,r2,9ac0 <__muldf3+0x850>
    93d4:	00800044 	movi	r2,1
    93d8:	3881961e 	bne	r7,r2,9a34 <__muldf3+0x7c4>
    93dc:	3027883a 	mov	r19,r6
    93e0:	0005883a 	mov	r2,zero
    93e4:	0021883a 	mov	r16,zero
    93e8:	002d883a 	mov	r22,zero
    93ec:	1004953a 	slli	r2,r2,20
    93f0:	98c03fcc 	andi	r3,r19,255
    93f4:	04400434 	movhi	r17,16
    93f8:	8c7fffc4 	addi	r17,r17,-1
    93fc:	180697fa 	slli	r3,r3,31
    9400:	8460703a 	and	r16,r16,r17
    9404:	80a0b03a 	or	r16,r16,r2
    9408:	80c6b03a 	or	r3,r16,r3
    940c:	b005883a 	mov	r2,r22
    9410:	dfc01117 	ldw	ra,68(sp)
    9414:	df001017 	ldw	fp,64(sp)
    9418:	ddc00f17 	ldw	r23,60(sp)
    941c:	dd800e17 	ldw	r22,56(sp)
    9420:	dd400d17 	ldw	r21,52(sp)
    9424:	dd000c17 	ldw	r20,48(sp)
    9428:	dcc00b17 	ldw	r19,44(sp)
    942c:	dc800a17 	ldw	r18,40(sp)
    9430:	dc400917 	ldw	r17,36(sp)
    9434:	dc000817 	ldw	r16,32(sp)
    9438:	dec01204 	addi	sp,sp,72
    943c:	f800283a 	ret
    9440:	2404b03a 	or	r2,r4,r16
    9444:	202b883a 	mov	r21,r4
    9448:	10004426 	beq	r2,zero,955c <__muldf3+0x2ec>
    944c:	80015126 	beq	r16,zero,9994 <__muldf3+0x724>
    9450:	8009883a 	mov	r4,r16
    9454:	d9800715 	stw	r6,28(sp)
    9458:	d9c00215 	stw	r7,8(sp)
    945c:	da400415 	stw	r9,16(sp)
    9460:	000a5dc0 	call	a5dc <__clzsi2>
    9464:	d9800717 	ldw	r6,28(sp)
    9468:	d9c00217 	ldw	r7,8(sp)
    946c:	da400417 	ldw	r9,16(sp)
    9470:	113ffd44 	addi	r4,r2,-11
    9474:	00c00704 	movi	r3,28
    9478:	19014216 	blt	r3,r4,9984 <__muldf3+0x714>
    947c:	00c00744 	movi	r3,29
    9480:	15bffe04 	addi	r22,r2,-8
    9484:	1907c83a 	sub	r3,r3,r4
    9488:	85a0983a 	sll	r16,r16,r22
    948c:	a8c6d83a 	srl	r3,r21,r3
    9490:	adac983a 	sll	r22,r21,r22
    9494:	1c20b03a 	or	r16,r3,r16
    9498:	1080fcc4 	addi	r2,r2,1011
    949c:	00a9c83a 	sub	r20,zero,r2
    94a0:	002b883a 	mov	r21,zero
    94a4:	000b883a 	mov	r5,zero
    94a8:	003f9006 	br	92ec <_gp+0xffff332c>
    94ac:	3446b03a 	or	r3,r6,r17
    94b0:	1800281e 	bne	r3,zero,9554 <__muldf3+0x2e4>
    94b4:	0023883a 	mov	r17,zero
    94b8:	0025883a 	mov	r18,zero
    94bc:	01c00084 	movi	r7,2
    94c0:	003f9c06 	br	9334 <_gp+0xffff3374>
    94c4:	3446b03a 	or	r3,r6,r17
    94c8:	18001e26 	beq	r3,zero,9544 <__muldf3+0x2d4>
    94cc:	88012126 	beq	r17,zero,9954 <__muldf3+0x6e4>
    94d0:	8809883a 	mov	r4,r17
    94d4:	d9400215 	stw	r5,8(sp)
    94d8:	d9800715 	stw	r6,28(sp)
    94dc:	da400415 	stw	r9,16(sp)
    94e0:	da800315 	stw	r10,12(sp)
    94e4:	000a5dc0 	call	a5dc <__clzsi2>
    94e8:	d9400217 	ldw	r5,8(sp)
    94ec:	d9800717 	ldw	r6,28(sp)
    94f0:	da400417 	ldw	r9,16(sp)
    94f4:	da800317 	ldw	r10,12(sp)
    94f8:	113ffd44 	addi	r4,r2,-11
    94fc:	00c00704 	movi	r3,28
    9500:	19011016 	blt	r3,r4,9944 <__muldf3+0x6d4>
    9504:	00c00744 	movi	r3,29
    9508:	14bffe04 	addi	r18,r2,-8
    950c:	1907c83a 	sub	r3,r3,r4
    9510:	8ca2983a 	sll	r17,r17,r18
    9514:	30c6d83a 	srl	r3,r6,r3
    9518:	34a4983a 	sll	r18,r6,r18
    951c:	1c62b03a 	or	r17,r3,r17
    9520:	1080fcc4 	addi	r2,r2,1011
    9524:	0085c83a 	sub	r2,zero,r2
    9528:	000f883a 	mov	r7,zero
    952c:	003f8106 	br	9334 <_gp+0xffff3374>
    9530:	3027883a 	mov	r19,r6
    9534:	0081ffc4 	movi	r2,2047
    9538:	0021883a 	mov	r16,zero
    953c:	002d883a 	mov	r22,zero
    9540:	003faa06 	br	93ec <_gp+0xffff342c>
    9544:	0023883a 	mov	r17,zero
    9548:	0025883a 	mov	r18,zero
    954c:	01c00044 	movi	r7,1
    9550:	003f7806 	br	9334 <_gp+0xffff3374>
    9554:	01c000c4 	movi	r7,3
    9558:	003f7606 	br	9334 <_gp+0xffff3374>
    955c:	05400104 	movi	r21,4
    9560:	0021883a 	mov	r16,zero
    9564:	002d883a 	mov	r22,zero
    9568:	01400044 	movi	r5,1
    956c:	003f5f06 	br	92ec <_gp+0xffff332c>
    9570:	05400304 	movi	r21,12
    9574:	014000c4 	movi	r5,3
    9578:	003f5c06 	br	92ec <_gp+0xffff332c>
    957c:	04000434 	movhi	r16,16
    9580:	0027883a 	mov	r19,zero
    9584:	843fffc4 	addi	r16,r16,-1
    9588:	05bfffc4 	movi	r22,-1
    958c:	0081ffc4 	movi	r2,2047
    9590:	003f9606 	br	93ec <_gp+0xffff342c>
    9594:	8023883a 	mov	r17,r16
    9598:	b025883a 	mov	r18,r22
    959c:	280f883a 	mov	r7,r5
    95a0:	003f8806 	br	93c4 <_gp+0xffff3404>
    95a4:	8023883a 	mov	r17,r16
    95a8:	b025883a 	mov	r18,r22
    95ac:	480d883a 	mov	r6,r9
    95b0:	280f883a 	mov	r7,r5
    95b4:	003f8306 	br	93c4 <_gp+0xffff3404>
    95b8:	b026d43a 	srli	r19,r22,16
    95bc:	902ed43a 	srli	r23,r18,16
    95c0:	b5bfffcc 	andi	r22,r22,65535
    95c4:	94bfffcc 	andi	r18,r18,65535
    95c8:	b00b883a 	mov	r5,r22
    95cc:	9009883a 	mov	r4,r18
    95d0:	d8c00515 	stw	r3,20(sp)
    95d4:	d9800715 	stw	r6,28(sp)
    95d8:	da000615 	stw	r8,24(sp)
    95dc:	00088c00 	call	88c0 <__mulsi3>
    95e0:	980b883a 	mov	r5,r19
    95e4:	9009883a 	mov	r4,r18
    95e8:	1029883a 	mov	r20,r2
    95ec:	00088c00 	call	88c0 <__mulsi3>
    95f0:	b80b883a 	mov	r5,r23
    95f4:	9809883a 	mov	r4,r19
    95f8:	102b883a 	mov	r21,r2
    95fc:	00088c00 	call	88c0 <__mulsi3>
    9600:	b809883a 	mov	r4,r23
    9604:	b00b883a 	mov	r5,r22
    9608:	1039883a 	mov	fp,r2
    960c:	00088c00 	call	88c0 <__mulsi3>
    9610:	a008d43a 	srli	r4,r20,16
    9614:	1545883a 	add	r2,r2,r21
    9618:	d8c00517 	ldw	r3,20(sp)
    961c:	2085883a 	add	r2,r4,r2
    9620:	d9800717 	ldw	r6,28(sp)
    9624:	da000617 	ldw	r8,24(sp)
    9628:	1540022e 	bgeu	r2,r21,9634 <__muldf3+0x3c4>
    962c:	01000074 	movhi	r4,1
    9630:	e139883a 	add	fp,fp,r4
    9634:	100e943a 	slli	r7,r2,16
    9638:	1004d43a 	srli	r2,r2,16
    963c:	882ad43a 	srli	r21,r17,16
    9640:	a53fffcc 	andi	r20,r20,65535
    9644:	8c7fffcc 	andi	r17,r17,65535
    9648:	3d29883a 	add	r20,r7,r20
    964c:	b00b883a 	mov	r5,r22
    9650:	8809883a 	mov	r4,r17
    9654:	d8c00515 	stw	r3,20(sp)
    9658:	d9800715 	stw	r6,28(sp)
    965c:	da000615 	stw	r8,24(sp)
    9660:	dd000115 	stw	r20,4(sp)
    9664:	d8800015 	stw	r2,0(sp)
    9668:	00088c00 	call	88c0 <__mulsi3>
    966c:	980b883a 	mov	r5,r19
    9670:	8809883a 	mov	r4,r17
    9674:	d8800215 	stw	r2,8(sp)
    9678:	00088c00 	call	88c0 <__mulsi3>
    967c:	9809883a 	mov	r4,r19
    9680:	a80b883a 	mov	r5,r21
    9684:	1029883a 	mov	r20,r2
    9688:	00088c00 	call	88c0 <__mulsi3>
    968c:	b00b883a 	mov	r5,r22
    9690:	a809883a 	mov	r4,r21
    9694:	d8800415 	stw	r2,16(sp)
    9698:	00088c00 	call	88c0 <__mulsi3>
    969c:	d9c00217 	ldw	r7,8(sp)
    96a0:	1505883a 	add	r2,r2,r20
    96a4:	d8c00517 	ldw	r3,20(sp)
    96a8:	3826d43a 	srli	r19,r7,16
    96ac:	d9800717 	ldw	r6,28(sp)
    96b0:	da000617 	ldw	r8,24(sp)
    96b4:	9885883a 	add	r2,r19,r2
    96b8:	da400417 	ldw	r9,16(sp)
    96bc:	1500022e 	bgeu	r2,r20,96c8 <__muldf3+0x458>
    96c0:	01000074 	movhi	r4,1
    96c4:	4913883a 	add	r9,r9,r4
    96c8:	1028d43a 	srli	r20,r2,16
    96cc:	1004943a 	slli	r2,r2,16
    96d0:	802cd43a 	srli	r22,r16,16
    96d4:	843fffcc 	andi	r16,r16,65535
    96d8:	3cffffcc 	andi	r19,r7,65535
    96dc:	9009883a 	mov	r4,r18
    96e0:	800b883a 	mov	r5,r16
    96e4:	a269883a 	add	r20,r20,r9
    96e8:	d8c00515 	stw	r3,20(sp)
    96ec:	d9800715 	stw	r6,28(sp)
    96f0:	da000615 	stw	r8,24(sp)
    96f4:	14e7883a 	add	r19,r2,r19
    96f8:	00088c00 	call	88c0 <__mulsi3>
    96fc:	9009883a 	mov	r4,r18
    9700:	b00b883a 	mov	r5,r22
    9704:	d8800315 	stw	r2,12(sp)
    9708:	00088c00 	call	88c0 <__mulsi3>
    970c:	b809883a 	mov	r4,r23
    9710:	b00b883a 	mov	r5,r22
    9714:	d8800215 	stw	r2,8(sp)
    9718:	00088c00 	call	88c0 <__mulsi3>
    971c:	b80b883a 	mov	r5,r23
    9720:	8009883a 	mov	r4,r16
    9724:	d8800415 	stw	r2,16(sp)
    9728:	00088c00 	call	88c0 <__mulsi3>
    972c:	da800317 	ldw	r10,12(sp)
    9730:	d9c00217 	ldw	r7,8(sp)
    9734:	d9000017 	ldw	r4,0(sp)
    9738:	502ed43a 	srli	r23,r10,16
    973c:	11c5883a 	add	r2,r2,r7
    9740:	24e5883a 	add	r18,r4,r19
    9744:	b885883a 	add	r2,r23,r2
    9748:	d8c00517 	ldw	r3,20(sp)
    974c:	d9800717 	ldw	r6,28(sp)
    9750:	da000617 	ldw	r8,24(sp)
    9754:	da400417 	ldw	r9,16(sp)
    9758:	11c0022e 	bgeu	r2,r7,9764 <__muldf3+0x4f4>
    975c:	01000074 	movhi	r4,1
    9760:	4913883a 	add	r9,r9,r4
    9764:	100ed43a 	srli	r7,r2,16
    9768:	1004943a 	slli	r2,r2,16
    976c:	55ffffcc 	andi	r23,r10,65535
    9770:	3a53883a 	add	r9,r7,r9
    9774:	8809883a 	mov	r4,r17
    9778:	800b883a 	mov	r5,r16
    977c:	d8c00515 	stw	r3,20(sp)
    9780:	d9800715 	stw	r6,28(sp)
    9784:	da000615 	stw	r8,24(sp)
    9788:	da400415 	stw	r9,16(sp)
    978c:	15ef883a 	add	r23,r2,r23
    9790:	00088c00 	call	88c0 <__mulsi3>
    9794:	8809883a 	mov	r4,r17
    9798:	b00b883a 	mov	r5,r22
    979c:	d8800215 	stw	r2,8(sp)
    97a0:	00088c00 	call	88c0 <__mulsi3>
    97a4:	b00b883a 	mov	r5,r22
    97a8:	a809883a 	mov	r4,r21
    97ac:	d8800315 	stw	r2,12(sp)
    97b0:	00088c00 	call	88c0 <__mulsi3>
    97b4:	8009883a 	mov	r4,r16
    97b8:	a80b883a 	mov	r5,r21
    97bc:	1023883a 	mov	r17,r2
    97c0:	00088c00 	call	88c0 <__mulsi3>
    97c4:	d9c00217 	ldw	r7,8(sp)
    97c8:	da800317 	ldw	r10,12(sp)
    97cc:	d8c00517 	ldw	r3,20(sp)
    97d0:	3808d43a 	srli	r4,r7,16
    97d4:	1285883a 	add	r2,r2,r10
    97d8:	d9800717 	ldw	r6,28(sp)
    97dc:	2085883a 	add	r2,r4,r2
    97e0:	da000617 	ldw	r8,24(sp)
    97e4:	da400417 	ldw	r9,16(sp)
    97e8:	1280022e 	bgeu	r2,r10,97f4 <__muldf3+0x584>
    97ec:	01000074 	movhi	r4,1
    97f0:	8923883a 	add	r17,r17,r4
    97f4:	1008943a 	slli	r4,r2,16
    97f8:	39ffffcc 	andi	r7,r7,65535
    97fc:	e4b9883a 	add	fp,fp,r18
    9800:	21cf883a 	add	r7,r4,r7
    9804:	e4e7803a 	cmpltu	r19,fp,r19
    9808:	3d0f883a 	add	r7,r7,r20
    980c:	bf39883a 	add	fp,r23,fp
    9810:	99c9883a 	add	r4,r19,r7
    9814:	e5ef803a 	cmpltu	r23,fp,r23
    9818:	490b883a 	add	r5,r9,r4
    981c:	1004d43a 	srli	r2,r2,16
    9820:	b965883a 	add	r18,r23,r5
    9824:	24c9803a 	cmpltu	r4,r4,r19
    9828:	3d29803a 	cmpltu	r20,r7,r20
    982c:	a128b03a 	or	r20,r20,r4
    9830:	95ef803a 	cmpltu	r23,r18,r23
    9834:	2a53803a 	cmpltu	r9,r5,r9
    9838:	a0a9883a 	add	r20,r20,r2
    983c:	4deeb03a 	or	r23,r9,r23
    9840:	a5ef883a 	add	r23,r20,r23
    9844:	bc63883a 	add	r17,r23,r17
    9848:	e004927a 	slli	r2,fp,9
    984c:	d9000117 	ldw	r4,4(sp)
    9850:	882e927a 	slli	r23,r17,9
    9854:	9022d5fa 	srli	r17,r18,23
    9858:	e038d5fa 	srli	fp,fp,23
    985c:	1104b03a 	or	r2,r2,r4
    9860:	9024927a 	slli	r18,r18,9
    9864:	1004c03a 	cmpne	r2,r2,zero
    9868:	bc62b03a 	or	r17,r23,r17
    986c:	1738b03a 	or	fp,r2,fp
    9870:	8880402c 	andhi	r2,r17,256
    9874:	e4a4b03a 	or	r18,fp,r18
    9878:	10000726 	beq	r2,zero,9898 <__muldf3+0x628>
    987c:	9006d07a 	srli	r3,r18,1
    9880:	880497fa 	slli	r2,r17,31
    9884:	9480004c 	andi	r18,r18,1
    9888:	8822d07a 	srli	r17,r17,1
    988c:	1ca4b03a 	or	r18,r3,r18
    9890:	14a4b03a 	or	r18,r2,r18
    9894:	4007883a 	mov	r3,r8
    9898:	1880ffc4 	addi	r2,r3,1023
    989c:	0080460e 	bge	zero,r2,99b8 <__muldf3+0x748>
    98a0:	910001cc 	andi	r4,r18,7
    98a4:	20000726 	beq	r4,zero,98c4 <__muldf3+0x654>
    98a8:	910003cc 	andi	r4,r18,15
    98ac:	01400104 	movi	r5,4
    98b0:	21400426 	beq	r4,r5,98c4 <__muldf3+0x654>
    98b4:	9149883a 	add	r4,r18,r5
    98b8:	24a5803a 	cmpltu	r18,r4,r18
    98bc:	8ca3883a 	add	r17,r17,r18
    98c0:	2025883a 	mov	r18,r4
    98c4:	8900402c 	andhi	r4,r17,256
    98c8:	20000426 	beq	r4,zero,98dc <__muldf3+0x66c>
    98cc:	18810004 	addi	r2,r3,1024
    98d0:	00ffc034 	movhi	r3,65280
    98d4:	18ffffc4 	addi	r3,r3,-1
    98d8:	88e2703a 	and	r17,r17,r3
    98dc:	00c1ff84 	movi	r3,2046
    98e0:	18bf1316 	blt	r3,r2,9530 <_gp+0xffff3570>
    98e4:	882c977a 	slli	r22,r17,29
    98e8:	9024d0fa 	srli	r18,r18,3
    98ec:	8822927a 	slli	r17,r17,9
    98f0:	1081ffcc 	andi	r2,r2,2047
    98f4:	b4acb03a 	or	r22,r22,r18
    98f8:	8820d33a 	srli	r16,r17,12
    98fc:	3027883a 	mov	r19,r6
    9900:	003eba06 	br	93ec <_gp+0xffff342c>
    9904:	8080022c 	andhi	r2,r16,8
    9908:	10000926 	beq	r2,zero,9930 <__muldf3+0x6c0>
    990c:	8880022c 	andhi	r2,r17,8
    9910:	1000071e 	bne	r2,zero,9930 <__muldf3+0x6c0>
    9914:	00800434 	movhi	r2,16
    9918:	8c000234 	orhi	r16,r17,8
    991c:	10bfffc4 	addi	r2,r2,-1
    9920:	e027883a 	mov	r19,fp
    9924:	80a0703a 	and	r16,r16,r2
    9928:	902d883a 	mov	r22,r18
    992c:	003f1706 	br	958c <_gp+0xffff35cc>
    9930:	00800434 	movhi	r2,16
    9934:	84000234 	orhi	r16,r16,8
    9938:	10bfffc4 	addi	r2,r2,-1
    993c:	80a0703a 	and	r16,r16,r2
    9940:	003f1206 	br	958c <_gp+0xffff35cc>
    9944:	147ff604 	addi	r17,r2,-40
    9948:	3462983a 	sll	r17,r6,r17
    994c:	0025883a 	mov	r18,zero
    9950:	003ef306 	br	9520 <_gp+0xffff3560>
    9954:	3009883a 	mov	r4,r6
    9958:	d9400215 	stw	r5,8(sp)
    995c:	d9800715 	stw	r6,28(sp)
    9960:	da400415 	stw	r9,16(sp)
    9964:	da800315 	stw	r10,12(sp)
    9968:	000a5dc0 	call	a5dc <__clzsi2>
    996c:	10800804 	addi	r2,r2,32
    9970:	da800317 	ldw	r10,12(sp)
    9974:	da400417 	ldw	r9,16(sp)
    9978:	d9800717 	ldw	r6,28(sp)
    997c:	d9400217 	ldw	r5,8(sp)
    9980:	003edd06 	br	94f8 <_gp+0xffff3538>
    9984:	143ff604 	addi	r16,r2,-40
    9988:	ac20983a 	sll	r16,r21,r16
    998c:	002d883a 	mov	r22,zero
    9990:	003ec106 	br	9498 <_gp+0xffff34d8>
    9994:	d9800715 	stw	r6,28(sp)
    9998:	d9c00215 	stw	r7,8(sp)
    999c:	da400415 	stw	r9,16(sp)
    99a0:	000a5dc0 	call	a5dc <__clzsi2>
    99a4:	10800804 	addi	r2,r2,32
    99a8:	da400417 	ldw	r9,16(sp)
    99ac:	d9c00217 	ldw	r7,8(sp)
    99b0:	d9800717 	ldw	r6,28(sp)
    99b4:	003eae06 	br	9470 <_gp+0xffff34b0>
    99b8:	00c00044 	movi	r3,1
    99bc:	1887c83a 	sub	r3,r3,r2
    99c0:	01000e04 	movi	r4,56
    99c4:	20fe8516 	blt	r4,r3,93dc <_gp+0xffff341c>
    99c8:	010007c4 	movi	r4,31
    99cc:	20c01b16 	blt	r4,r3,9a3c <__muldf3+0x7cc>
    99d0:	00800804 	movi	r2,32
    99d4:	10c5c83a 	sub	r2,r2,r3
    99d8:	888a983a 	sll	r5,r17,r2
    99dc:	90c8d83a 	srl	r4,r18,r3
    99e0:	9084983a 	sll	r2,r18,r2
    99e4:	88e2d83a 	srl	r17,r17,r3
    99e8:	2906b03a 	or	r3,r5,r4
    99ec:	1004c03a 	cmpne	r2,r2,zero
    99f0:	1886b03a 	or	r3,r3,r2
    99f4:	188001cc 	andi	r2,r3,7
    99f8:	10000726 	beq	r2,zero,9a18 <__muldf3+0x7a8>
    99fc:	188003cc 	andi	r2,r3,15
    9a00:	01000104 	movi	r4,4
    9a04:	11000426 	beq	r2,r4,9a18 <__muldf3+0x7a8>
    9a08:	1805883a 	mov	r2,r3
    9a0c:	10c00104 	addi	r3,r2,4
    9a10:	1885803a 	cmpltu	r2,r3,r2
    9a14:	88a3883a 	add	r17,r17,r2
    9a18:	8880202c 	andhi	r2,r17,128
    9a1c:	10001c26 	beq	r2,zero,9a90 <__muldf3+0x820>
    9a20:	3027883a 	mov	r19,r6
    9a24:	00800044 	movi	r2,1
    9a28:	0021883a 	mov	r16,zero
    9a2c:	002d883a 	mov	r22,zero
    9a30:	003e6e06 	br	93ec <_gp+0xffff342c>
    9a34:	4007883a 	mov	r3,r8
    9a38:	003f9706 	br	9898 <_gp+0xffff38d8>
    9a3c:	017ff844 	movi	r5,-31
    9a40:	2885c83a 	sub	r2,r5,r2
    9a44:	888ad83a 	srl	r5,r17,r2
    9a48:	00800804 	movi	r2,32
    9a4c:	18801a26 	beq	r3,r2,9ab8 <__muldf3+0x848>
    9a50:	01001004 	movi	r4,64
    9a54:	20c7c83a 	sub	r3,r4,r3
    9a58:	88e2983a 	sll	r17,r17,r3
    9a5c:	8ca4b03a 	or	r18,r17,r18
    9a60:	9004c03a 	cmpne	r2,r18,zero
    9a64:	2884b03a 	or	r2,r5,r2
    9a68:	144001cc 	andi	r17,r2,7
    9a6c:	88000d1e 	bne	r17,zero,9aa4 <__muldf3+0x834>
    9a70:	0021883a 	mov	r16,zero
    9a74:	102cd0fa 	srli	r22,r2,3
    9a78:	3027883a 	mov	r19,r6
    9a7c:	0005883a 	mov	r2,zero
    9a80:	b46cb03a 	or	r22,r22,r17
    9a84:	003e5906 	br	93ec <_gp+0xffff342c>
    9a88:	1007883a 	mov	r3,r2
    9a8c:	0023883a 	mov	r17,zero
    9a90:	8820927a 	slli	r16,r17,9
    9a94:	1805883a 	mov	r2,r3
    9a98:	8822977a 	slli	r17,r17,29
    9a9c:	8020d33a 	srli	r16,r16,12
    9aa0:	003ff406 	br	9a74 <_gp+0xffff3ab4>
    9aa4:	10c003cc 	andi	r3,r2,15
    9aa8:	01000104 	movi	r4,4
    9aac:	193ff626 	beq	r3,r4,9a88 <_gp+0xffff3ac8>
    9ab0:	0023883a 	mov	r17,zero
    9ab4:	003fd506 	br	9a0c <_gp+0xffff3a4c>
    9ab8:	0023883a 	mov	r17,zero
    9abc:	003fe706 	br	9a5c <_gp+0xffff3a9c>
    9ac0:	00800434 	movhi	r2,16
    9ac4:	8c000234 	orhi	r16,r17,8
    9ac8:	10bfffc4 	addi	r2,r2,-1
    9acc:	3027883a 	mov	r19,r6
    9ad0:	80a0703a 	and	r16,r16,r2
    9ad4:	902d883a 	mov	r22,r18
    9ad8:	003eac06 	br	958c <_gp+0xffff35cc>

00009adc <__subdf3>:
    9adc:	02000434 	movhi	r8,16
    9ae0:	423fffc4 	addi	r8,r8,-1
    9ae4:	defffb04 	addi	sp,sp,-20
    9ae8:	2a14703a 	and	r10,r5,r8
    9aec:	3812d53a 	srli	r9,r7,20
    9af0:	3a10703a 	and	r8,r7,r8
    9af4:	2006d77a 	srli	r3,r4,29
    9af8:	3004d77a 	srli	r2,r6,29
    9afc:	dc000015 	stw	r16,0(sp)
    9b00:	501490fa 	slli	r10,r10,3
    9b04:	2820d53a 	srli	r16,r5,20
    9b08:	401090fa 	slli	r8,r8,3
    9b0c:	dc800215 	stw	r18,8(sp)
    9b10:	dc400115 	stw	r17,4(sp)
    9b14:	dfc00415 	stw	ra,16(sp)
    9b18:	202290fa 	slli	r17,r4,3
    9b1c:	dcc00315 	stw	r19,12(sp)
    9b20:	4a41ffcc 	andi	r9,r9,2047
    9b24:	0101ffc4 	movi	r4,2047
    9b28:	2824d7fa 	srli	r18,r5,31
    9b2c:	8401ffcc 	andi	r16,r16,2047
    9b30:	50c6b03a 	or	r3,r10,r3
    9b34:	380ed7fa 	srli	r7,r7,31
    9b38:	408ab03a 	or	r5,r8,r2
    9b3c:	300c90fa 	slli	r6,r6,3
    9b40:	49009626 	beq	r9,r4,9d9c <__subdf3+0x2c0>
    9b44:	39c0005c 	xori	r7,r7,1
    9b48:	8245c83a 	sub	r2,r16,r9
    9b4c:	3c807426 	beq	r7,r18,9d20 <__subdf3+0x244>
    9b50:	0080af0e 	bge	zero,r2,9e10 <__subdf3+0x334>
    9b54:	48002a1e 	bne	r9,zero,9c00 <__subdf3+0x124>
    9b58:	2988b03a 	or	r4,r5,r6
    9b5c:	20009a1e 	bne	r4,zero,9dc8 <__subdf3+0x2ec>
    9b60:	888001cc 	andi	r2,r17,7
    9b64:	10000726 	beq	r2,zero,9b84 <__subdf3+0xa8>
    9b68:	888003cc 	andi	r2,r17,15
    9b6c:	01000104 	movi	r4,4
    9b70:	11000426 	beq	r2,r4,9b84 <__subdf3+0xa8>
    9b74:	890b883a 	add	r5,r17,r4
    9b78:	2c63803a 	cmpltu	r17,r5,r17
    9b7c:	1c47883a 	add	r3,r3,r17
    9b80:	2823883a 	mov	r17,r5
    9b84:	1880202c 	andhi	r2,r3,128
    9b88:	10005926 	beq	r2,zero,9cf0 <__subdf3+0x214>
    9b8c:	84000044 	addi	r16,r16,1
    9b90:	0081ffc4 	movi	r2,2047
    9b94:	8080be26 	beq	r16,r2,9e90 <__subdf3+0x3b4>
    9b98:	017fe034 	movhi	r5,65408
    9b9c:	297fffc4 	addi	r5,r5,-1
    9ba0:	1946703a 	and	r3,r3,r5
    9ba4:	1804977a 	slli	r2,r3,29
    9ba8:	1806927a 	slli	r3,r3,9
    9bac:	8822d0fa 	srli	r17,r17,3
    9bb0:	8401ffcc 	andi	r16,r16,2047
    9bb4:	180ad33a 	srli	r5,r3,12
    9bb8:	9100004c 	andi	r4,r18,1
    9bbc:	1444b03a 	or	r2,r2,r17
    9bc0:	80c1ffcc 	andi	r3,r16,2047
    9bc4:	1820953a 	slli	r16,r3,20
    9bc8:	20c03fcc 	andi	r3,r4,255
    9bcc:	180897fa 	slli	r4,r3,31
    9bd0:	00c00434 	movhi	r3,16
    9bd4:	18ffffc4 	addi	r3,r3,-1
    9bd8:	28c6703a 	and	r3,r5,r3
    9bdc:	1c06b03a 	or	r3,r3,r16
    9be0:	1906b03a 	or	r3,r3,r4
    9be4:	dfc00417 	ldw	ra,16(sp)
    9be8:	dcc00317 	ldw	r19,12(sp)
    9bec:	dc800217 	ldw	r18,8(sp)
    9bf0:	dc400117 	ldw	r17,4(sp)
    9bf4:	dc000017 	ldw	r16,0(sp)
    9bf8:	dec00504 	addi	sp,sp,20
    9bfc:	f800283a 	ret
    9c00:	0101ffc4 	movi	r4,2047
    9c04:	813fd626 	beq	r16,r4,9b60 <_gp+0xffff3ba0>
    9c08:	29402034 	orhi	r5,r5,128
    9c0c:	01000e04 	movi	r4,56
    9c10:	2080a316 	blt	r4,r2,9ea0 <__subdf3+0x3c4>
    9c14:	010007c4 	movi	r4,31
    9c18:	2080c616 	blt	r4,r2,9f34 <__subdf3+0x458>
    9c1c:	01000804 	movi	r4,32
    9c20:	2089c83a 	sub	r4,r4,r2
    9c24:	2910983a 	sll	r8,r5,r4
    9c28:	308ed83a 	srl	r7,r6,r2
    9c2c:	3108983a 	sll	r4,r6,r4
    9c30:	2884d83a 	srl	r2,r5,r2
    9c34:	41ccb03a 	or	r6,r8,r7
    9c38:	2008c03a 	cmpne	r4,r4,zero
    9c3c:	310cb03a 	or	r6,r6,r4
    9c40:	898dc83a 	sub	r6,r17,r6
    9c44:	89a3803a 	cmpltu	r17,r17,r6
    9c48:	1887c83a 	sub	r3,r3,r2
    9c4c:	1c47c83a 	sub	r3,r3,r17
    9c50:	3023883a 	mov	r17,r6
    9c54:	1880202c 	andhi	r2,r3,128
    9c58:	10002326 	beq	r2,zero,9ce8 <__subdf3+0x20c>
    9c5c:	04c02034 	movhi	r19,128
    9c60:	9cffffc4 	addi	r19,r19,-1
    9c64:	1ce6703a 	and	r19,r3,r19
    9c68:	98007a26 	beq	r19,zero,9e54 <__subdf3+0x378>
    9c6c:	9809883a 	mov	r4,r19
    9c70:	000a5dc0 	call	a5dc <__clzsi2>
    9c74:	113ffe04 	addi	r4,r2,-8
    9c78:	00c007c4 	movi	r3,31
    9c7c:	19007b16 	blt	r3,r4,9e6c <__subdf3+0x390>
    9c80:	00800804 	movi	r2,32
    9c84:	1105c83a 	sub	r2,r2,r4
    9c88:	8884d83a 	srl	r2,r17,r2
    9c8c:	9906983a 	sll	r3,r19,r4
    9c90:	8922983a 	sll	r17,r17,r4
    9c94:	10c4b03a 	or	r2,r2,r3
    9c98:	24007816 	blt	r4,r16,9e7c <__subdf3+0x3a0>
    9c9c:	2421c83a 	sub	r16,r4,r16
    9ca0:	80c00044 	addi	r3,r16,1
    9ca4:	010007c4 	movi	r4,31
    9ca8:	20c09516 	blt	r4,r3,9f00 <__subdf3+0x424>
    9cac:	01400804 	movi	r5,32
    9cb0:	28cbc83a 	sub	r5,r5,r3
    9cb4:	88c8d83a 	srl	r4,r17,r3
    9cb8:	8962983a 	sll	r17,r17,r5
    9cbc:	114a983a 	sll	r5,r2,r5
    9cc0:	10c6d83a 	srl	r3,r2,r3
    9cc4:	8804c03a 	cmpne	r2,r17,zero
    9cc8:	290ab03a 	or	r5,r5,r4
    9ccc:	28a2b03a 	or	r17,r5,r2
    9cd0:	0021883a 	mov	r16,zero
    9cd4:	003fa206 	br	9b60 <_gp+0xffff3ba0>
    9cd8:	2090b03a 	or	r8,r4,r2
    9cdc:	40018e26 	beq	r8,zero,a318 <__subdf3+0x83c>
    9ce0:	1007883a 	mov	r3,r2
    9ce4:	2023883a 	mov	r17,r4
    9ce8:	888001cc 	andi	r2,r17,7
    9cec:	103f9e1e 	bne	r2,zero,9b68 <_gp+0xffff3ba8>
    9cf0:	1804977a 	slli	r2,r3,29
    9cf4:	8822d0fa 	srli	r17,r17,3
    9cf8:	1810d0fa 	srli	r8,r3,3
    9cfc:	9100004c 	andi	r4,r18,1
    9d00:	1444b03a 	or	r2,r2,r17
    9d04:	00c1ffc4 	movi	r3,2047
    9d08:	80c02826 	beq	r16,r3,9dac <__subdf3+0x2d0>
    9d0c:	01400434 	movhi	r5,16
    9d10:	297fffc4 	addi	r5,r5,-1
    9d14:	80e0703a 	and	r16,r16,r3
    9d18:	414a703a 	and	r5,r8,r5
    9d1c:	003fa806 	br	9bc0 <_gp+0xffff3c00>
    9d20:	0080630e 	bge	zero,r2,9eb0 <__subdf3+0x3d4>
    9d24:	48003026 	beq	r9,zero,9de8 <__subdf3+0x30c>
    9d28:	0101ffc4 	movi	r4,2047
    9d2c:	813f8c26 	beq	r16,r4,9b60 <_gp+0xffff3ba0>
    9d30:	29402034 	orhi	r5,r5,128
    9d34:	01000e04 	movi	r4,56
    9d38:	2080a90e 	bge	r4,r2,9fe0 <__subdf3+0x504>
    9d3c:	298cb03a 	or	r6,r5,r6
    9d40:	3012c03a 	cmpne	r9,r6,zero
    9d44:	0005883a 	mov	r2,zero
    9d48:	4c53883a 	add	r9,r9,r17
    9d4c:	4c63803a 	cmpltu	r17,r9,r17
    9d50:	10c7883a 	add	r3,r2,r3
    9d54:	88c7883a 	add	r3,r17,r3
    9d58:	4823883a 	mov	r17,r9
    9d5c:	1880202c 	andhi	r2,r3,128
    9d60:	1000d026 	beq	r2,zero,a0a4 <__subdf3+0x5c8>
    9d64:	84000044 	addi	r16,r16,1
    9d68:	0081ffc4 	movi	r2,2047
    9d6c:	8080fe26 	beq	r16,r2,a168 <__subdf3+0x68c>
    9d70:	00bfe034 	movhi	r2,65408
    9d74:	10bfffc4 	addi	r2,r2,-1
    9d78:	1886703a 	and	r3,r3,r2
    9d7c:	880ad07a 	srli	r5,r17,1
    9d80:	180497fa 	slli	r2,r3,31
    9d84:	8900004c 	andi	r4,r17,1
    9d88:	2922b03a 	or	r17,r5,r4
    9d8c:	1806d07a 	srli	r3,r3,1
    9d90:	1462b03a 	or	r17,r2,r17
    9d94:	3825883a 	mov	r18,r7
    9d98:	003f7106 	br	9b60 <_gp+0xffff3ba0>
    9d9c:	2984b03a 	or	r2,r5,r6
    9da0:	103f6826 	beq	r2,zero,9b44 <_gp+0xffff3b84>
    9da4:	39c03fcc 	andi	r7,r7,255
    9da8:	003f6706 	br	9b48 <_gp+0xffff3b88>
    9dac:	4086b03a 	or	r3,r8,r2
    9db0:	18015226 	beq	r3,zero,a2fc <__subdf3+0x820>
    9db4:	00c00434 	movhi	r3,16
    9db8:	41400234 	orhi	r5,r8,8
    9dbc:	18ffffc4 	addi	r3,r3,-1
    9dc0:	28ca703a 	and	r5,r5,r3
    9dc4:	003f7e06 	br	9bc0 <_gp+0xffff3c00>
    9dc8:	10bfffc4 	addi	r2,r2,-1
    9dcc:	1000491e 	bne	r2,zero,9ef4 <__subdf3+0x418>
    9dd0:	898fc83a 	sub	r7,r17,r6
    9dd4:	89e3803a 	cmpltu	r17,r17,r7
    9dd8:	1947c83a 	sub	r3,r3,r5
    9ddc:	1c47c83a 	sub	r3,r3,r17
    9de0:	3823883a 	mov	r17,r7
    9de4:	003f9b06 	br	9c54 <_gp+0xffff3c94>
    9de8:	2988b03a 	or	r4,r5,r6
    9dec:	203f5c26 	beq	r4,zero,9b60 <_gp+0xffff3ba0>
    9df0:	10bfffc4 	addi	r2,r2,-1
    9df4:	1000931e 	bne	r2,zero,a044 <__subdf3+0x568>
    9df8:	898d883a 	add	r6,r17,r6
    9dfc:	3463803a 	cmpltu	r17,r6,r17
    9e00:	1947883a 	add	r3,r3,r5
    9e04:	88c7883a 	add	r3,r17,r3
    9e08:	3023883a 	mov	r17,r6
    9e0c:	003fd306 	br	9d5c <_gp+0xffff3d9c>
    9e10:	1000541e 	bne	r2,zero,9f64 <__subdf3+0x488>
    9e14:	80800044 	addi	r2,r16,1
    9e18:	1081ffcc 	andi	r2,r2,2047
    9e1c:	01000044 	movi	r4,1
    9e20:	2080a20e 	bge	r4,r2,a0ac <__subdf3+0x5d0>
    9e24:	8989c83a 	sub	r4,r17,r6
    9e28:	8905803a 	cmpltu	r2,r17,r4
    9e2c:	1967c83a 	sub	r19,r3,r5
    9e30:	98a7c83a 	sub	r19,r19,r2
    9e34:	9880202c 	andhi	r2,r19,128
    9e38:	10006326 	beq	r2,zero,9fc8 <__subdf3+0x4ec>
    9e3c:	3463c83a 	sub	r17,r6,r17
    9e40:	28c7c83a 	sub	r3,r5,r3
    9e44:	344d803a 	cmpltu	r6,r6,r17
    9e48:	19a7c83a 	sub	r19,r3,r6
    9e4c:	3825883a 	mov	r18,r7
    9e50:	983f861e 	bne	r19,zero,9c6c <_gp+0xffff3cac>
    9e54:	8809883a 	mov	r4,r17
    9e58:	000a5dc0 	call	a5dc <__clzsi2>
    9e5c:	10800804 	addi	r2,r2,32
    9e60:	113ffe04 	addi	r4,r2,-8
    9e64:	00c007c4 	movi	r3,31
    9e68:	193f850e 	bge	r3,r4,9c80 <_gp+0xffff3cc0>
    9e6c:	10bff604 	addi	r2,r2,-40
    9e70:	8884983a 	sll	r2,r17,r2
    9e74:	0023883a 	mov	r17,zero
    9e78:	243f880e 	bge	r4,r16,9c9c <_gp+0xffff3cdc>
    9e7c:	00ffe034 	movhi	r3,65408
    9e80:	18ffffc4 	addi	r3,r3,-1
    9e84:	8121c83a 	sub	r16,r16,r4
    9e88:	10c6703a 	and	r3,r2,r3
    9e8c:	003f3406 	br	9b60 <_gp+0xffff3ba0>
    9e90:	9100004c 	andi	r4,r18,1
    9e94:	000b883a 	mov	r5,zero
    9e98:	0005883a 	mov	r2,zero
    9e9c:	003f4806 	br	9bc0 <_gp+0xffff3c00>
    9ea0:	298cb03a 	or	r6,r5,r6
    9ea4:	300cc03a 	cmpne	r6,r6,zero
    9ea8:	0005883a 	mov	r2,zero
    9eac:	003f6406 	br	9c40 <_gp+0xffff3c80>
    9eb0:	10009a1e 	bne	r2,zero,a11c <__subdf3+0x640>
    9eb4:	82400044 	addi	r9,r16,1
    9eb8:	4881ffcc 	andi	r2,r9,2047
    9ebc:	02800044 	movi	r10,1
    9ec0:	5080670e 	bge	r10,r2,a060 <__subdf3+0x584>
    9ec4:	0081ffc4 	movi	r2,2047
    9ec8:	4880af26 	beq	r9,r2,a188 <__subdf3+0x6ac>
    9ecc:	898d883a 	add	r6,r17,r6
    9ed0:	1945883a 	add	r2,r3,r5
    9ed4:	3447803a 	cmpltu	r3,r6,r17
    9ed8:	1887883a 	add	r3,r3,r2
    9edc:	182297fa 	slli	r17,r3,31
    9ee0:	300cd07a 	srli	r6,r6,1
    9ee4:	1806d07a 	srli	r3,r3,1
    9ee8:	4821883a 	mov	r16,r9
    9eec:	89a2b03a 	or	r17,r17,r6
    9ef0:	003f1b06 	br	9b60 <_gp+0xffff3ba0>
    9ef4:	0101ffc4 	movi	r4,2047
    9ef8:	813f441e 	bne	r16,r4,9c0c <_gp+0xffff3c4c>
    9efc:	003f1806 	br	9b60 <_gp+0xffff3ba0>
    9f00:	843ff844 	addi	r16,r16,-31
    9f04:	01400804 	movi	r5,32
    9f08:	1408d83a 	srl	r4,r2,r16
    9f0c:	19405026 	beq	r3,r5,a050 <__subdf3+0x574>
    9f10:	01401004 	movi	r5,64
    9f14:	28c7c83a 	sub	r3,r5,r3
    9f18:	10c4983a 	sll	r2,r2,r3
    9f1c:	88a2b03a 	or	r17,r17,r2
    9f20:	8822c03a 	cmpne	r17,r17,zero
    9f24:	2462b03a 	or	r17,r4,r17
    9f28:	0007883a 	mov	r3,zero
    9f2c:	0021883a 	mov	r16,zero
    9f30:	003f6d06 	br	9ce8 <_gp+0xffff3d28>
    9f34:	11fff804 	addi	r7,r2,-32
    9f38:	01000804 	movi	r4,32
    9f3c:	29ced83a 	srl	r7,r5,r7
    9f40:	11004526 	beq	r2,r4,a058 <__subdf3+0x57c>
    9f44:	01001004 	movi	r4,64
    9f48:	2089c83a 	sub	r4,r4,r2
    9f4c:	2904983a 	sll	r2,r5,r4
    9f50:	118cb03a 	or	r6,r2,r6
    9f54:	300cc03a 	cmpne	r6,r6,zero
    9f58:	398cb03a 	or	r6,r7,r6
    9f5c:	0005883a 	mov	r2,zero
    9f60:	003f3706 	br	9c40 <_gp+0xffff3c80>
    9f64:	80002a26 	beq	r16,zero,a010 <__subdf3+0x534>
    9f68:	0101ffc4 	movi	r4,2047
    9f6c:	49006626 	beq	r9,r4,a108 <__subdf3+0x62c>
    9f70:	0085c83a 	sub	r2,zero,r2
    9f74:	18c02034 	orhi	r3,r3,128
    9f78:	01000e04 	movi	r4,56
    9f7c:	20807e16 	blt	r4,r2,a178 <__subdf3+0x69c>
    9f80:	010007c4 	movi	r4,31
    9f84:	2080e716 	blt	r4,r2,a324 <__subdf3+0x848>
    9f88:	01000804 	movi	r4,32
    9f8c:	2089c83a 	sub	r4,r4,r2
    9f90:	1914983a 	sll	r10,r3,r4
    9f94:	8890d83a 	srl	r8,r17,r2
    9f98:	8908983a 	sll	r4,r17,r4
    9f9c:	1884d83a 	srl	r2,r3,r2
    9fa0:	5222b03a 	or	r17,r10,r8
    9fa4:	2006c03a 	cmpne	r3,r4,zero
    9fa8:	88e2b03a 	or	r17,r17,r3
    9fac:	3463c83a 	sub	r17,r6,r17
    9fb0:	2885c83a 	sub	r2,r5,r2
    9fb4:	344d803a 	cmpltu	r6,r6,r17
    9fb8:	1187c83a 	sub	r3,r2,r6
    9fbc:	4821883a 	mov	r16,r9
    9fc0:	3825883a 	mov	r18,r7
    9fc4:	003f2306 	br	9c54 <_gp+0xffff3c94>
    9fc8:	24d0b03a 	or	r8,r4,r19
    9fcc:	40001b1e 	bne	r8,zero,a03c <__subdf3+0x560>
    9fd0:	0005883a 	mov	r2,zero
    9fd4:	0009883a 	mov	r4,zero
    9fd8:	0021883a 	mov	r16,zero
    9fdc:	003f4906 	br	9d04 <_gp+0xffff3d44>
    9fe0:	010007c4 	movi	r4,31
    9fe4:	20803a16 	blt	r4,r2,a0d0 <__subdf3+0x5f4>
    9fe8:	01000804 	movi	r4,32
    9fec:	2089c83a 	sub	r4,r4,r2
    9ff0:	2912983a 	sll	r9,r5,r4
    9ff4:	3090d83a 	srl	r8,r6,r2
    9ff8:	3108983a 	sll	r4,r6,r4
    9ffc:	2884d83a 	srl	r2,r5,r2
    a000:	4a12b03a 	or	r9,r9,r8
    a004:	2008c03a 	cmpne	r4,r4,zero
    a008:	4912b03a 	or	r9,r9,r4
    a00c:	003f4e06 	br	9d48 <_gp+0xffff3d88>
    a010:	1c48b03a 	or	r4,r3,r17
    a014:	20003c26 	beq	r4,zero,a108 <__subdf3+0x62c>
    a018:	0084303a 	nor	r2,zero,r2
    a01c:	1000381e 	bne	r2,zero,a100 <__subdf3+0x624>
    a020:	3463c83a 	sub	r17,r6,r17
    a024:	28c5c83a 	sub	r2,r5,r3
    a028:	344d803a 	cmpltu	r6,r6,r17
    a02c:	1187c83a 	sub	r3,r2,r6
    a030:	4821883a 	mov	r16,r9
    a034:	3825883a 	mov	r18,r7
    a038:	003f0606 	br	9c54 <_gp+0xffff3c94>
    a03c:	2023883a 	mov	r17,r4
    a040:	003f0906 	br	9c68 <_gp+0xffff3ca8>
    a044:	0101ffc4 	movi	r4,2047
    a048:	813f3a1e 	bne	r16,r4,9d34 <_gp+0xffff3d74>
    a04c:	003ec406 	br	9b60 <_gp+0xffff3ba0>
    a050:	0005883a 	mov	r2,zero
    a054:	003fb106 	br	9f1c <_gp+0xffff3f5c>
    a058:	0005883a 	mov	r2,zero
    a05c:	003fbc06 	br	9f50 <_gp+0xffff3f90>
    a060:	1c44b03a 	or	r2,r3,r17
    a064:	80008e1e 	bne	r16,zero,a2a0 <__subdf3+0x7c4>
    a068:	1000c826 	beq	r2,zero,a38c <__subdf3+0x8b0>
    a06c:	2984b03a 	or	r2,r5,r6
    a070:	103ebb26 	beq	r2,zero,9b60 <_gp+0xffff3ba0>
    a074:	8989883a 	add	r4,r17,r6
    a078:	1945883a 	add	r2,r3,r5
    a07c:	2447803a 	cmpltu	r3,r4,r17
    a080:	1887883a 	add	r3,r3,r2
    a084:	1880202c 	andhi	r2,r3,128
    a088:	2023883a 	mov	r17,r4
    a08c:	103f1626 	beq	r2,zero,9ce8 <_gp+0xffff3d28>
    a090:	00bfe034 	movhi	r2,65408
    a094:	10bfffc4 	addi	r2,r2,-1
    a098:	5021883a 	mov	r16,r10
    a09c:	1886703a 	and	r3,r3,r2
    a0a0:	003eaf06 	br	9b60 <_gp+0xffff3ba0>
    a0a4:	3825883a 	mov	r18,r7
    a0a8:	003f0f06 	br	9ce8 <_gp+0xffff3d28>
    a0ac:	1c44b03a 	or	r2,r3,r17
    a0b0:	8000251e 	bne	r16,zero,a148 <__subdf3+0x66c>
    a0b4:	1000661e 	bne	r2,zero,a250 <__subdf3+0x774>
    a0b8:	2990b03a 	or	r8,r5,r6
    a0bc:	40009626 	beq	r8,zero,a318 <__subdf3+0x83c>
    a0c0:	2807883a 	mov	r3,r5
    a0c4:	3023883a 	mov	r17,r6
    a0c8:	3825883a 	mov	r18,r7
    a0cc:	003ea406 	br	9b60 <_gp+0xffff3ba0>
    a0d0:	127ff804 	addi	r9,r2,-32
    a0d4:	01000804 	movi	r4,32
    a0d8:	2a52d83a 	srl	r9,r5,r9
    a0dc:	11008c26 	beq	r2,r4,a310 <__subdf3+0x834>
    a0e0:	01001004 	movi	r4,64
    a0e4:	2085c83a 	sub	r2,r4,r2
    a0e8:	2884983a 	sll	r2,r5,r2
    a0ec:	118cb03a 	or	r6,r2,r6
    a0f0:	300cc03a 	cmpne	r6,r6,zero
    a0f4:	4992b03a 	or	r9,r9,r6
    a0f8:	0005883a 	mov	r2,zero
    a0fc:	003f1206 	br	9d48 <_gp+0xffff3d88>
    a100:	0101ffc4 	movi	r4,2047
    a104:	493f9c1e 	bne	r9,r4,9f78 <_gp+0xffff3fb8>
    a108:	2807883a 	mov	r3,r5
    a10c:	3023883a 	mov	r17,r6
    a110:	4821883a 	mov	r16,r9
    a114:	3825883a 	mov	r18,r7
    a118:	003e9106 	br	9b60 <_gp+0xffff3ba0>
    a11c:	80001f1e 	bne	r16,zero,a19c <__subdf3+0x6c0>
    a120:	1c48b03a 	or	r4,r3,r17
    a124:	20005a26 	beq	r4,zero,a290 <__subdf3+0x7b4>
    a128:	0084303a 	nor	r2,zero,r2
    a12c:	1000561e 	bne	r2,zero,a288 <__subdf3+0x7ac>
    a130:	89a3883a 	add	r17,r17,r6
    a134:	1945883a 	add	r2,r3,r5
    a138:	898d803a 	cmpltu	r6,r17,r6
    a13c:	3087883a 	add	r3,r6,r2
    a140:	4821883a 	mov	r16,r9
    a144:	003f0506 	br	9d5c <_gp+0xffff3d9c>
    a148:	10002b1e 	bne	r2,zero,a1f8 <__subdf3+0x71c>
    a14c:	2984b03a 	or	r2,r5,r6
    a150:	10008026 	beq	r2,zero,a354 <__subdf3+0x878>
    a154:	2807883a 	mov	r3,r5
    a158:	3023883a 	mov	r17,r6
    a15c:	3825883a 	mov	r18,r7
    a160:	0401ffc4 	movi	r16,2047
    a164:	003e7e06 	br	9b60 <_gp+0xffff3ba0>
    a168:	3809883a 	mov	r4,r7
    a16c:	0011883a 	mov	r8,zero
    a170:	0005883a 	mov	r2,zero
    a174:	003ee306 	br	9d04 <_gp+0xffff3d44>
    a178:	1c62b03a 	or	r17,r3,r17
    a17c:	8822c03a 	cmpne	r17,r17,zero
    a180:	0005883a 	mov	r2,zero
    a184:	003f8906 	br	9fac <_gp+0xffff3fec>
    a188:	3809883a 	mov	r4,r7
    a18c:	4821883a 	mov	r16,r9
    a190:	0011883a 	mov	r8,zero
    a194:	0005883a 	mov	r2,zero
    a198:	003eda06 	br	9d04 <_gp+0xffff3d44>
    a19c:	0101ffc4 	movi	r4,2047
    a1a0:	49003b26 	beq	r9,r4,a290 <__subdf3+0x7b4>
    a1a4:	0085c83a 	sub	r2,zero,r2
    a1a8:	18c02034 	orhi	r3,r3,128
    a1ac:	01000e04 	movi	r4,56
    a1b0:	20806e16 	blt	r4,r2,a36c <__subdf3+0x890>
    a1b4:	010007c4 	movi	r4,31
    a1b8:	20807716 	blt	r4,r2,a398 <__subdf3+0x8bc>
    a1bc:	01000804 	movi	r4,32
    a1c0:	2089c83a 	sub	r4,r4,r2
    a1c4:	1914983a 	sll	r10,r3,r4
    a1c8:	8890d83a 	srl	r8,r17,r2
    a1cc:	8908983a 	sll	r4,r17,r4
    a1d0:	1884d83a 	srl	r2,r3,r2
    a1d4:	5222b03a 	or	r17,r10,r8
    a1d8:	2006c03a 	cmpne	r3,r4,zero
    a1dc:	88e2b03a 	or	r17,r17,r3
    a1e0:	89a3883a 	add	r17,r17,r6
    a1e4:	1145883a 	add	r2,r2,r5
    a1e8:	898d803a 	cmpltu	r6,r17,r6
    a1ec:	3087883a 	add	r3,r6,r2
    a1f0:	4821883a 	mov	r16,r9
    a1f4:	003ed906 	br	9d5c <_gp+0xffff3d9c>
    a1f8:	2984b03a 	or	r2,r5,r6
    a1fc:	10004226 	beq	r2,zero,a308 <__subdf3+0x82c>
    a200:	1808d0fa 	srli	r4,r3,3
    a204:	8822d0fa 	srli	r17,r17,3
    a208:	1806977a 	slli	r3,r3,29
    a20c:	2080022c 	andhi	r2,r4,8
    a210:	1c62b03a 	or	r17,r3,r17
    a214:	10000826 	beq	r2,zero,a238 <__subdf3+0x75c>
    a218:	2812d0fa 	srli	r9,r5,3
    a21c:	4880022c 	andhi	r2,r9,8
    a220:	1000051e 	bne	r2,zero,a238 <__subdf3+0x75c>
    a224:	300cd0fa 	srli	r6,r6,3
    a228:	2804977a 	slli	r2,r5,29
    a22c:	4809883a 	mov	r4,r9
    a230:	3825883a 	mov	r18,r7
    a234:	11a2b03a 	or	r17,r2,r6
    a238:	8806d77a 	srli	r3,r17,29
    a23c:	200890fa 	slli	r4,r4,3
    a240:	882290fa 	slli	r17,r17,3
    a244:	0401ffc4 	movi	r16,2047
    a248:	1906b03a 	or	r3,r3,r4
    a24c:	003e4406 	br	9b60 <_gp+0xffff3ba0>
    a250:	2984b03a 	or	r2,r5,r6
    a254:	103e4226 	beq	r2,zero,9b60 <_gp+0xffff3ba0>
    a258:	8989c83a 	sub	r4,r17,r6
    a25c:	8911803a 	cmpltu	r8,r17,r4
    a260:	1945c83a 	sub	r2,r3,r5
    a264:	1205c83a 	sub	r2,r2,r8
    a268:	1200202c 	andhi	r8,r2,128
    a26c:	403e9a26 	beq	r8,zero,9cd8 <_gp+0xffff3d18>
    a270:	3463c83a 	sub	r17,r6,r17
    a274:	28c5c83a 	sub	r2,r5,r3
    a278:	344d803a 	cmpltu	r6,r6,r17
    a27c:	1187c83a 	sub	r3,r2,r6
    a280:	3825883a 	mov	r18,r7
    a284:	003e3606 	br	9b60 <_gp+0xffff3ba0>
    a288:	0101ffc4 	movi	r4,2047
    a28c:	493fc71e 	bne	r9,r4,a1ac <_gp+0xffff41ec>
    a290:	2807883a 	mov	r3,r5
    a294:	3023883a 	mov	r17,r6
    a298:	4821883a 	mov	r16,r9
    a29c:	003e3006 	br	9b60 <_gp+0xffff3ba0>
    a2a0:	10003626 	beq	r2,zero,a37c <__subdf3+0x8a0>
    a2a4:	2984b03a 	or	r2,r5,r6
    a2a8:	10001726 	beq	r2,zero,a308 <__subdf3+0x82c>
    a2ac:	1808d0fa 	srli	r4,r3,3
    a2b0:	8822d0fa 	srli	r17,r17,3
    a2b4:	1806977a 	slli	r3,r3,29
    a2b8:	2080022c 	andhi	r2,r4,8
    a2bc:	1c62b03a 	or	r17,r3,r17
    a2c0:	10000726 	beq	r2,zero,a2e0 <__subdf3+0x804>
    a2c4:	2812d0fa 	srli	r9,r5,3
    a2c8:	4880022c 	andhi	r2,r9,8
    a2cc:	1000041e 	bne	r2,zero,a2e0 <__subdf3+0x804>
    a2d0:	300cd0fa 	srli	r6,r6,3
    a2d4:	2804977a 	slli	r2,r5,29
    a2d8:	4809883a 	mov	r4,r9
    a2dc:	11a2b03a 	or	r17,r2,r6
    a2e0:	8806d77a 	srli	r3,r17,29
    a2e4:	200890fa 	slli	r4,r4,3
    a2e8:	882290fa 	slli	r17,r17,3
    a2ec:	3825883a 	mov	r18,r7
    a2f0:	1906b03a 	or	r3,r3,r4
    a2f4:	0401ffc4 	movi	r16,2047
    a2f8:	003e1906 	br	9b60 <_gp+0xffff3ba0>
    a2fc:	000b883a 	mov	r5,zero
    a300:	0005883a 	mov	r2,zero
    a304:	003e2e06 	br	9bc0 <_gp+0xffff3c00>
    a308:	0401ffc4 	movi	r16,2047
    a30c:	003e1406 	br	9b60 <_gp+0xffff3ba0>
    a310:	0005883a 	mov	r2,zero
    a314:	003f7506 	br	a0ec <_gp+0xffff412c>
    a318:	0005883a 	mov	r2,zero
    a31c:	0009883a 	mov	r4,zero
    a320:	003e7806 	br	9d04 <_gp+0xffff3d44>
    a324:	123ff804 	addi	r8,r2,-32
    a328:	01000804 	movi	r4,32
    a32c:	1a10d83a 	srl	r8,r3,r8
    a330:	11002526 	beq	r2,r4,a3c8 <__subdf3+0x8ec>
    a334:	01001004 	movi	r4,64
    a338:	2085c83a 	sub	r2,r4,r2
    a33c:	1884983a 	sll	r2,r3,r2
    a340:	1444b03a 	or	r2,r2,r17
    a344:	1004c03a 	cmpne	r2,r2,zero
    a348:	40a2b03a 	or	r17,r8,r2
    a34c:	0005883a 	mov	r2,zero
    a350:	003f1606 	br	9fac <_gp+0xffff3fec>
    a354:	02000434 	movhi	r8,16
    a358:	0009883a 	mov	r4,zero
    a35c:	423fffc4 	addi	r8,r8,-1
    a360:	00bfffc4 	movi	r2,-1
    a364:	0401ffc4 	movi	r16,2047
    a368:	003e6606 	br	9d04 <_gp+0xffff3d44>
    a36c:	1c62b03a 	or	r17,r3,r17
    a370:	8822c03a 	cmpne	r17,r17,zero
    a374:	0005883a 	mov	r2,zero
    a378:	003f9906 	br	a1e0 <_gp+0xffff4220>
    a37c:	2807883a 	mov	r3,r5
    a380:	3023883a 	mov	r17,r6
    a384:	0401ffc4 	movi	r16,2047
    a388:	003df506 	br	9b60 <_gp+0xffff3ba0>
    a38c:	2807883a 	mov	r3,r5
    a390:	3023883a 	mov	r17,r6
    a394:	003df206 	br	9b60 <_gp+0xffff3ba0>
    a398:	123ff804 	addi	r8,r2,-32
    a39c:	01000804 	movi	r4,32
    a3a0:	1a10d83a 	srl	r8,r3,r8
    a3a4:	11000a26 	beq	r2,r4,a3d0 <__subdf3+0x8f4>
    a3a8:	01001004 	movi	r4,64
    a3ac:	2085c83a 	sub	r2,r4,r2
    a3b0:	1884983a 	sll	r2,r3,r2
    a3b4:	1444b03a 	or	r2,r2,r17
    a3b8:	1004c03a 	cmpne	r2,r2,zero
    a3bc:	40a2b03a 	or	r17,r8,r2
    a3c0:	0005883a 	mov	r2,zero
    a3c4:	003f8606 	br	a1e0 <_gp+0xffff4220>
    a3c8:	0005883a 	mov	r2,zero
    a3cc:	003fdc06 	br	a340 <_gp+0xffff4380>
    a3d0:	0005883a 	mov	r2,zero
    a3d4:	003ff706 	br	a3b4 <_gp+0xffff43f4>

0000a3d8 <__fixdfsi>:
    a3d8:	280cd53a 	srli	r6,r5,20
    a3dc:	00c00434 	movhi	r3,16
    a3e0:	18ffffc4 	addi	r3,r3,-1
    a3e4:	3181ffcc 	andi	r6,r6,2047
    a3e8:	01c0ff84 	movi	r7,1022
    a3ec:	28c6703a 	and	r3,r5,r3
    a3f0:	280ad7fa 	srli	r5,r5,31
    a3f4:	3980120e 	bge	r7,r6,a440 <__fixdfsi+0x68>
    a3f8:	00810744 	movi	r2,1053
    a3fc:	11800c16 	blt	r2,r6,a430 <__fixdfsi+0x58>
    a400:	00810cc4 	movi	r2,1075
    a404:	1185c83a 	sub	r2,r2,r6
    a408:	01c007c4 	movi	r7,31
    a40c:	18c00434 	orhi	r3,r3,16
    a410:	38800d16 	blt	r7,r2,a448 <__fixdfsi+0x70>
    a414:	31befb44 	addi	r6,r6,-1043
    a418:	2084d83a 	srl	r2,r4,r2
    a41c:	1986983a 	sll	r3,r3,r6
    a420:	1884b03a 	or	r2,r3,r2
    a424:	28000726 	beq	r5,zero,a444 <__fixdfsi+0x6c>
    a428:	0085c83a 	sub	r2,zero,r2
    a42c:	f800283a 	ret
    a430:	00a00034 	movhi	r2,32768
    a434:	10bfffc4 	addi	r2,r2,-1
    a438:	2885883a 	add	r2,r5,r2
    a43c:	f800283a 	ret
    a440:	0005883a 	mov	r2,zero
    a444:	f800283a 	ret
    a448:	008104c4 	movi	r2,1043
    a44c:	1185c83a 	sub	r2,r2,r6
    a450:	1884d83a 	srl	r2,r3,r2
    a454:	003ff306 	br	a424 <_gp+0xffff4464>

0000a458 <__floatsidf>:
    a458:	defffd04 	addi	sp,sp,-12
    a45c:	dfc00215 	stw	ra,8(sp)
    a460:	dc400115 	stw	r17,4(sp)
    a464:	dc000015 	stw	r16,0(sp)
    a468:	20002b26 	beq	r4,zero,a518 <__floatsidf+0xc0>
    a46c:	2023883a 	mov	r17,r4
    a470:	2020d7fa 	srli	r16,r4,31
    a474:	20002d16 	blt	r4,zero,a52c <__floatsidf+0xd4>
    a478:	8809883a 	mov	r4,r17
    a47c:	000a5dc0 	call	a5dc <__clzsi2>
    a480:	01410784 	movi	r5,1054
    a484:	288bc83a 	sub	r5,r5,r2
    a488:	01010cc4 	movi	r4,1075
    a48c:	2149c83a 	sub	r4,r4,r5
    a490:	00c007c4 	movi	r3,31
    a494:	1900160e 	bge	r3,r4,a4f0 <__floatsidf+0x98>
    a498:	00c104c4 	movi	r3,1043
    a49c:	1947c83a 	sub	r3,r3,r5
    a4a0:	88c6983a 	sll	r3,r17,r3
    a4a4:	00800434 	movhi	r2,16
    a4a8:	10bfffc4 	addi	r2,r2,-1
    a4ac:	1886703a 	and	r3,r3,r2
    a4b0:	2941ffcc 	andi	r5,r5,2047
    a4b4:	800d883a 	mov	r6,r16
    a4b8:	0005883a 	mov	r2,zero
    a4bc:	280a953a 	slli	r5,r5,20
    a4c0:	31803fcc 	andi	r6,r6,255
    a4c4:	01000434 	movhi	r4,16
    a4c8:	300c97fa 	slli	r6,r6,31
    a4cc:	213fffc4 	addi	r4,r4,-1
    a4d0:	1906703a 	and	r3,r3,r4
    a4d4:	1946b03a 	or	r3,r3,r5
    a4d8:	1986b03a 	or	r3,r3,r6
    a4dc:	dfc00217 	ldw	ra,8(sp)
    a4e0:	dc400117 	ldw	r17,4(sp)
    a4e4:	dc000017 	ldw	r16,0(sp)
    a4e8:	dec00304 	addi	sp,sp,12
    a4ec:	f800283a 	ret
    a4f0:	00c002c4 	movi	r3,11
    a4f4:	1887c83a 	sub	r3,r3,r2
    a4f8:	88c6d83a 	srl	r3,r17,r3
    a4fc:	8904983a 	sll	r2,r17,r4
    a500:	01000434 	movhi	r4,16
    a504:	213fffc4 	addi	r4,r4,-1
    a508:	2941ffcc 	andi	r5,r5,2047
    a50c:	1906703a 	and	r3,r3,r4
    a510:	800d883a 	mov	r6,r16
    a514:	003fe906 	br	a4bc <_gp+0xffff44fc>
    a518:	000d883a 	mov	r6,zero
    a51c:	000b883a 	mov	r5,zero
    a520:	0007883a 	mov	r3,zero
    a524:	0005883a 	mov	r2,zero
    a528:	003fe406 	br	a4bc <_gp+0xffff44fc>
    a52c:	0123c83a 	sub	r17,zero,r4
    a530:	003fd106 	br	a478 <_gp+0xffff44b8>

0000a534 <__floatunsidf>:
    a534:	defffe04 	addi	sp,sp,-8
    a538:	dc000015 	stw	r16,0(sp)
    a53c:	dfc00115 	stw	ra,4(sp)
    a540:	2021883a 	mov	r16,r4
    a544:	20002226 	beq	r4,zero,a5d0 <__floatunsidf+0x9c>
    a548:	000a5dc0 	call	a5dc <__clzsi2>
    a54c:	01010784 	movi	r4,1054
    a550:	2089c83a 	sub	r4,r4,r2
    a554:	01810cc4 	movi	r6,1075
    a558:	310dc83a 	sub	r6,r6,r4
    a55c:	00c007c4 	movi	r3,31
    a560:	1980120e 	bge	r3,r6,a5ac <__floatunsidf+0x78>
    a564:	00c104c4 	movi	r3,1043
    a568:	1907c83a 	sub	r3,r3,r4
    a56c:	80ca983a 	sll	r5,r16,r3
    a570:	00800434 	movhi	r2,16
    a574:	10bfffc4 	addi	r2,r2,-1
    a578:	2101ffcc 	andi	r4,r4,2047
    a57c:	0021883a 	mov	r16,zero
    a580:	288a703a 	and	r5,r5,r2
    a584:	2008953a 	slli	r4,r4,20
    a588:	00c00434 	movhi	r3,16
    a58c:	18ffffc4 	addi	r3,r3,-1
    a590:	28c6703a 	and	r3,r5,r3
    a594:	8005883a 	mov	r2,r16
    a598:	1906b03a 	or	r3,r3,r4
    a59c:	dfc00117 	ldw	ra,4(sp)
    a5a0:	dc000017 	ldw	r16,0(sp)
    a5a4:	dec00204 	addi	sp,sp,8
    a5a8:	f800283a 	ret
    a5ac:	00c002c4 	movi	r3,11
    a5b0:	188bc83a 	sub	r5,r3,r2
    a5b4:	814ad83a 	srl	r5,r16,r5
    a5b8:	00c00434 	movhi	r3,16
    a5bc:	18ffffc4 	addi	r3,r3,-1
    a5c0:	81a0983a 	sll	r16,r16,r6
    a5c4:	2101ffcc 	andi	r4,r4,2047
    a5c8:	28ca703a 	and	r5,r5,r3
    a5cc:	003fed06 	br	a584 <_gp+0xffff45c4>
    a5d0:	0009883a 	mov	r4,zero
    a5d4:	000b883a 	mov	r5,zero
    a5d8:	003fea06 	br	a584 <_gp+0xffff45c4>

0000a5dc <__clzsi2>:
    a5dc:	00bfffd4 	movui	r2,65535
    a5e0:	11000536 	bltu	r2,r4,a5f8 <__clzsi2+0x1c>
    a5e4:	00803fc4 	movi	r2,255
    a5e8:	11000f36 	bltu	r2,r4,a628 <__clzsi2+0x4c>
    a5ec:	00800804 	movi	r2,32
    a5f0:	0007883a 	mov	r3,zero
    a5f4:	00000506 	br	a60c <__clzsi2+0x30>
    a5f8:	00804034 	movhi	r2,256
    a5fc:	10bfffc4 	addi	r2,r2,-1
    a600:	11000c2e 	bgeu	r2,r4,a634 <__clzsi2+0x58>
    a604:	00800204 	movi	r2,8
    a608:	00c00604 	movi	r3,24
    a60c:	20c8d83a 	srl	r4,r4,r3
    a610:	00c00074 	movhi	r3,1
    a614:	18f21404 	addi	r3,r3,-14256
    a618:	1909883a 	add	r4,r3,r4
    a61c:	20c00003 	ldbu	r3,0(r4)
    a620:	10c5c83a 	sub	r2,r2,r3
    a624:	f800283a 	ret
    a628:	00800604 	movi	r2,24
    a62c:	00c00204 	movi	r3,8
    a630:	003ff606 	br	a60c <_gp+0xffff464c>
    a634:	00800404 	movi	r2,16
    a638:	1007883a 	mov	r3,r2
    a63c:	003ff306 	br	a60c <_gp+0xffff464c>

0000a640 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a640:	defff904 	addi	sp,sp,-28
    a644:	dfc00615 	stw	ra,24(sp)
    a648:	df000515 	stw	fp,20(sp)
    a64c:	df000504 	addi	fp,sp,20
    a650:	e13ffc15 	stw	r4,-16(fp)
    a654:	e17ffd15 	stw	r5,-12(fp)
    a658:	e1bffe15 	stw	r6,-8(fp)
    a65c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a660:	e0800217 	ldw	r2,8(fp)
    a664:	d8800015 	stw	r2,0(sp)
    a668:	e1ffff17 	ldw	r7,-4(fp)
    a66c:	e1bffe17 	ldw	r6,-8(fp)
    a670:	e17ffd17 	ldw	r5,-12(fp)
    a674:	e13ffc17 	ldw	r4,-16(fp)
    a678:	000a7f00 	call	a7f0 <alt_iic_isr_register>
}  
    a67c:	e037883a 	mov	sp,fp
    a680:	dfc00117 	ldw	ra,4(sp)
    a684:	df000017 	ldw	fp,0(sp)
    a688:	dec00204 	addi	sp,sp,8
    a68c:	f800283a 	ret

0000a690 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a690:	defff904 	addi	sp,sp,-28
    a694:	df000615 	stw	fp,24(sp)
    a698:	df000604 	addi	fp,sp,24
    a69c:	e13ffe15 	stw	r4,-8(fp)
    a6a0:	e17fff15 	stw	r5,-4(fp)
    a6a4:	e0bfff17 	ldw	r2,-4(fp)
    a6a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6ac:	0005303a 	rdctl	r2,status
    a6b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6b4:	e0fffb17 	ldw	r3,-20(fp)
    a6b8:	00bfff84 	movi	r2,-2
    a6bc:	1884703a 	and	r2,r3,r2
    a6c0:	1001703a 	wrctl	status,r2
  
  return context;
    a6c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a6c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    a6cc:	00c00044 	movi	r3,1
    a6d0:	e0bffa17 	ldw	r2,-24(fp)
    a6d4:	1884983a 	sll	r2,r3,r2
    a6d8:	1007883a 	mov	r3,r2
    a6dc:	d0a5be17 	ldw	r2,-26888(gp)
    a6e0:	1884b03a 	or	r2,r3,r2
    a6e4:	d0a5be15 	stw	r2,-26888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a6e8:	d0a5be17 	ldw	r2,-26888(gp)
    a6ec:	100170fa 	wrctl	ienable,r2
    a6f0:	e0bffc17 	ldw	r2,-16(fp)
    a6f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6f8:	e0bffd17 	ldw	r2,-12(fp)
    a6fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a700:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    a704:	0001883a 	nop
}
    a708:	e037883a 	mov	sp,fp
    a70c:	df000017 	ldw	fp,0(sp)
    a710:	dec00104 	addi	sp,sp,4
    a714:	f800283a 	ret

0000a718 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a718:	defff904 	addi	sp,sp,-28
    a71c:	df000615 	stw	fp,24(sp)
    a720:	df000604 	addi	fp,sp,24
    a724:	e13ffe15 	stw	r4,-8(fp)
    a728:	e17fff15 	stw	r5,-4(fp)
    a72c:	e0bfff17 	ldw	r2,-4(fp)
    a730:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a734:	0005303a 	rdctl	r2,status
    a738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a73c:	e0fffb17 	ldw	r3,-20(fp)
    a740:	00bfff84 	movi	r2,-2
    a744:	1884703a 	and	r2,r3,r2
    a748:	1001703a 	wrctl	status,r2
  
  return context;
    a74c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a750:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a754:	00c00044 	movi	r3,1
    a758:	e0bffa17 	ldw	r2,-24(fp)
    a75c:	1884983a 	sll	r2,r3,r2
    a760:	0084303a 	nor	r2,zero,r2
    a764:	1007883a 	mov	r3,r2
    a768:	d0a5be17 	ldw	r2,-26888(gp)
    a76c:	1884703a 	and	r2,r3,r2
    a770:	d0a5be15 	stw	r2,-26888(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a774:	d0a5be17 	ldw	r2,-26888(gp)
    a778:	100170fa 	wrctl	ienable,r2
    a77c:	e0bffc17 	ldw	r2,-16(fp)
    a780:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a784:	e0bffd17 	ldw	r2,-12(fp)
    a788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a78c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    a790:	0001883a 	nop
}
    a794:	e037883a 	mov	sp,fp
    a798:	df000017 	ldw	fp,0(sp)
    a79c:	dec00104 	addi	sp,sp,4
    a7a0:	f800283a 	ret

0000a7a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a7a4:	defffc04 	addi	sp,sp,-16
    a7a8:	df000315 	stw	fp,12(sp)
    a7ac:	df000304 	addi	fp,sp,12
    a7b0:	e13ffe15 	stw	r4,-8(fp)
    a7b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a7b8:	000530fa 	rdctl	r2,ienable
    a7bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a7c0:	00c00044 	movi	r3,1
    a7c4:	e0bfff17 	ldw	r2,-4(fp)
    a7c8:	1884983a 	sll	r2,r3,r2
    a7cc:	1007883a 	mov	r3,r2
    a7d0:	e0bffd17 	ldw	r2,-12(fp)
    a7d4:	1884703a 	and	r2,r3,r2
    a7d8:	1004c03a 	cmpne	r2,r2,zero
    a7dc:	10803fcc 	andi	r2,r2,255
}
    a7e0:	e037883a 	mov	sp,fp
    a7e4:	df000017 	ldw	fp,0(sp)
    a7e8:	dec00104 	addi	sp,sp,4
    a7ec:	f800283a 	ret

0000a7f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a7f0:	defff504 	addi	sp,sp,-44
    a7f4:	dfc00a15 	stw	ra,40(sp)
    a7f8:	df000915 	stw	fp,36(sp)
    a7fc:	df000904 	addi	fp,sp,36
    a800:	e13ffc15 	stw	r4,-16(fp)
    a804:	e17ffd15 	stw	r5,-12(fp)
    a808:	e1bffe15 	stw	r6,-8(fp)
    a80c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a810:	00bffa84 	movi	r2,-22
    a814:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a818:	e0bffd17 	ldw	r2,-12(fp)
    a81c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a820:	e0bff817 	ldw	r2,-32(fp)
    a824:	10800808 	cmpgei	r2,r2,32
    a828:	1000271e 	bne	r2,zero,a8c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a82c:	0005303a 	rdctl	r2,status
    a830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a834:	e0fffb17 	ldw	r3,-20(fp)
    a838:	00bfff84 	movi	r2,-2
    a83c:	1884703a 	and	r2,r3,r2
    a840:	1001703a 	wrctl	status,r2
  
  return context;
    a844:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a848:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    a84c:	00800074 	movhi	r2,1
    a850:	10bdb604 	addi	r2,r2,-2344
    a854:	e0fff817 	ldw	r3,-32(fp)
    a858:	180690fa 	slli	r3,r3,3
    a85c:	10c5883a 	add	r2,r2,r3
    a860:	e0fffe17 	ldw	r3,-8(fp)
    a864:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a868:	00800074 	movhi	r2,1
    a86c:	10bdb604 	addi	r2,r2,-2344
    a870:	e0fff817 	ldw	r3,-32(fp)
    a874:	180690fa 	slli	r3,r3,3
    a878:	10c5883a 	add	r2,r2,r3
    a87c:	10800104 	addi	r2,r2,4
    a880:	e0ffff17 	ldw	r3,-4(fp)
    a884:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a888:	e0bffe17 	ldw	r2,-8(fp)
    a88c:	10000526 	beq	r2,zero,a8a4 <alt_iic_isr_register+0xb4>
    a890:	e0bff817 	ldw	r2,-32(fp)
    a894:	100b883a 	mov	r5,r2
    a898:	e13ffc17 	ldw	r4,-16(fp)
    a89c:	000a6900 	call	a690 <alt_ic_irq_enable>
    a8a0:	00000406 	br	a8b4 <alt_iic_isr_register+0xc4>
    a8a4:	e0bff817 	ldw	r2,-32(fp)
    a8a8:	100b883a 	mov	r5,r2
    a8ac:	e13ffc17 	ldw	r4,-16(fp)
    a8b0:	000a7180 	call	a718 <alt_ic_irq_disable>
    a8b4:	e0bff715 	stw	r2,-36(fp)
    a8b8:	e0bffa17 	ldw	r2,-24(fp)
    a8bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8c0:	e0bff917 	ldw	r2,-28(fp)
    a8c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a8c8:	e0bff717 	ldw	r2,-36(fp)
}
    a8cc:	e037883a 	mov	sp,fp
    a8d0:	dfc00117 	ldw	ra,4(sp)
    a8d4:	df000017 	ldw	fp,0(sp)
    a8d8:	dec00204 	addi	sp,sp,8
    a8dc:	f800283a 	ret

0000a8e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a8e0:	defffc04 	addi	sp,sp,-16
    a8e4:	df000315 	stw	fp,12(sp)
    a8e8:	df000304 	addi	fp,sp,12
    a8ec:	e13ffd15 	stw	r4,-12(fp)
    a8f0:	e17ffe15 	stw	r5,-8(fp)
    a8f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a8f8:	e0fffe17 	ldw	r3,-8(fp)
    a8fc:	e0bffd17 	ldw	r2,-12(fp)
    a900:	18800c26 	beq	r3,r2,a934 <alt_load_section+0x54>
  {
    while( to != end )
    a904:	00000806 	br	a928 <alt_load_section+0x48>
    {
      *to++ = *from++;
    a908:	e0bffe17 	ldw	r2,-8(fp)
    a90c:	10c00104 	addi	r3,r2,4
    a910:	e0fffe15 	stw	r3,-8(fp)
    a914:	e0fffd17 	ldw	r3,-12(fp)
    a918:	19000104 	addi	r4,r3,4
    a91c:	e13ffd15 	stw	r4,-12(fp)
    a920:	18c00017 	ldw	r3,0(r3)
    a924:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a928:	e0fffe17 	ldw	r3,-8(fp)
    a92c:	e0bfff17 	ldw	r2,-4(fp)
    a930:	18bff51e 	bne	r3,r2,a908 <_gp+0xffff4948>
    {
      *to++ = *from++;
    }
  }
}
    a934:	0001883a 	nop
    a938:	e037883a 	mov	sp,fp
    a93c:	df000017 	ldw	fp,0(sp)
    a940:	dec00104 	addi	sp,sp,4
    a944:	f800283a 	ret

0000a948 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a948:	defffe04 	addi	sp,sp,-8
    a94c:	dfc00115 	stw	ra,4(sp)
    a950:	df000015 	stw	fp,0(sp)
    a954:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a958:	01800074 	movhi	r6,1
    a95c:	31b80704 	addi	r6,r6,-8164
    a960:	01400074 	movhi	r5,1
    a964:	29726204 	addi	r5,r5,-13944
    a968:	01000074 	movhi	r4,1
    a96c:	21380704 	addi	r4,r4,-8164
    a970:	000a8e00 	call	a8e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a974:	01800074 	movhi	r6,1
    a978:	31a08c04 	addi	r6,r6,-32208
    a97c:	01400074 	movhi	r5,1
    a980:	29600804 	addi	r5,r5,-32736
    a984:	01000074 	movhi	r4,1
    a988:	21200804 	addi	r4,r4,-32736
    a98c:	000a8e00 	call	a8e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a990:	01800074 	movhi	r6,1
    a994:	31b26204 	addi	r6,r6,-13944
    a998:	01400074 	movhi	r5,1
    a99c:	29721404 	addi	r5,r5,-14256
    a9a0:	01000074 	movhi	r4,1
    a9a4:	21321404 	addi	r4,r4,-14256
    a9a8:	000a8e00 	call	a8e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a9ac:	000b7a80 	call	b7a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a9b0:	000b9940 	call	b994 <alt_icache_flush_all>
}
    a9b4:	0001883a 	nop
    a9b8:	e037883a 	mov	sp,fp
    a9bc:	dfc00117 	ldw	ra,4(sp)
    a9c0:	df000017 	ldw	fp,0(sp)
    a9c4:	dec00204 	addi	sp,sp,8
    a9c8:	f800283a 	ret

0000a9cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a9cc:	defffd04 	addi	sp,sp,-12
    a9d0:	dfc00215 	stw	ra,8(sp)
    a9d4:	df000115 	stw	fp,4(sp)
    a9d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a9dc:	0009883a 	mov	r4,zero
    a9e0:	000aa7c0 	call	aa7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    a9e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a9e8:	000aab40 	call	aab4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a9ec:	01800074 	movhi	r6,1
    a9f0:	31b25404 	addi	r6,r6,-14000
    a9f4:	01400074 	movhi	r5,1
    a9f8:	29725404 	addi	r5,r5,-14000
    a9fc:	01000074 	movhi	r4,1
    aa00:	21325404 	addi	r4,r4,-14000
    aa04:	000bb340 	call	bb34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    aa08:	000b8d40 	call	b8d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    aa0c:	01000074 	movhi	r4,1
    aa10:	212e4d04 	addi	r4,r4,-18124
    aa14:	000c2dc0 	call	c2dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aa18:	d0a5bf17 	ldw	r2,-26884(gp)
    aa1c:	d0e5c017 	ldw	r3,-26880(gp)
    aa20:	d125c117 	ldw	r4,-26876(gp)
    aa24:	200d883a 	mov	r6,r4
    aa28:	180b883a 	mov	r5,r3
    aa2c:	1009883a 	mov	r4,r2
    aa30:	00085a40 	call	85a4 <main>
    aa34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    aa38:	01000044 	movi	r4,1
    aa3c:	000b6d00 	call	b6d0 <close>
  exit (result);
    aa40:	e13fff17 	ldw	r4,-4(fp)
    aa44:	000c2f00 	call	c2f0 <exit>

0000aa48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    aa48:	defffd04 	addi	sp,sp,-12
    aa4c:	dfc00215 	stw	ra,8(sp)
    aa50:	df000115 	stw	fp,4(sp)
    aa54:	df000104 	addi	fp,sp,4
    aa58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    aa5c:	d1600f04 	addi	r5,gp,-32708
    aa60:	e13fff17 	ldw	r4,-4(fp)
    aa64:	000b8300 	call	b830 <alt_dev_llist_insert>
}
    aa68:	e037883a 	mov	sp,fp
    aa6c:	dfc00117 	ldw	ra,4(sp)
    aa70:	df000017 	ldw	fp,0(sp)
    aa74:	dec00204 	addi	sp,sp,8
    aa78:	f800283a 	ret

0000aa7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    aa7c:	defffd04 	addi	sp,sp,-12
    aa80:	dfc00215 	stw	ra,8(sp)
    aa84:	df000115 	stw	fp,4(sp)
    aa88:	df000104 	addi	fp,sp,4
    aa8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    aa90:	000c05c0 	call	c05c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    aa94:	00800044 	movi	r2,1
    aa98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    aa9c:	0001883a 	nop
    aaa0:	e037883a 	mov	sp,fp
    aaa4:	dfc00117 	ldw	ra,4(sp)
    aaa8:	df000017 	ldw	fp,0(sp)
    aaac:	dec00204 	addi	sp,sp,8
    aab0:	f800283a 	ret

0000aab4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    aab4:	defffe04 	addi	sp,sp,-8
    aab8:	dfc00115 	stw	ra,4(sp)
    aabc:	df000015 	stw	fp,0(sp)
    aac0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    aac4:	01800084 	movi	r6,2
    aac8:	000b883a 	mov	r5,zero
    aacc:	01000074 	movhi	r4,1
    aad0:	21326f04 	addi	r4,r4,-13892
    aad4:	000ac640 	call	ac64 <altera_avalon_jtag_uart_init>
    aad8:	01000074 	movhi	r4,1
    aadc:	21326504 	addi	r4,r4,-13932
    aae0:	000aa480 	call	aa48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    aae4:	0001883a 	nop
}
    aae8:	0001883a 	nop
    aaec:	e037883a 	mov	sp,fp
    aaf0:	dfc00117 	ldw	ra,4(sp)
    aaf4:	df000017 	ldw	fp,0(sp)
    aaf8:	dec00204 	addi	sp,sp,8
    aafc:	f800283a 	ret

0000ab00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ab00:	defffa04 	addi	sp,sp,-24
    ab04:	dfc00515 	stw	ra,20(sp)
    ab08:	df000415 	stw	fp,16(sp)
    ab0c:	df000404 	addi	fp,sp,16
    ab10:	e13ffd15 	stw	r4,-12(fp)
    ab14:	e17ffe15 	stw	r5,-8(fp)
    ab18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ab1c:	e0bffd17 	ldw	r2,-12(fp)
    ab20:	10800017 	ldw	r2,0(r2)
    ab24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ab28:	e0bffc17 	ldw	r2,-16(fp)
    ab2c:	10c00a04 	addi	r3,r2,40
    ab30:	e0bffd17 	ldw	r2,-12(fp)
    ab34:	10800217 	ldw	r2,8(r2)
    ab38:	100f883a 	mov	r7,r2
    ab3c:	e1bfff17 	ldw	r6,-4(fp)
    ab40:	e17ffe17 	ldw	r5,-8(fp)
    ab44:	1809883a 	mov	r4,r3
    ab48:	000b1280 	call	b128 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ab4c:	e037883a 	mov	sp,fp
    ab50:	dfc00117 	ldw	ra,4(sp)
    ab54:	df000017 	ldw	fp,0(sp)
    ab58:	dec00204 	addi	sp,sp,8
    ab5c:	f800283a 	ret

0000ab60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ab60:	defffa04 	addi	sp,sp,-24
    ab64:	dfc00515 	stw	ra,20(sp)
    ab68:	df000415 	stw	fp,16(sp)
    ab6c:	df000404 	addi	fp,sp,16
    ab70:	e13ffd15 	stw	r4,-12(fp)
    ab74:	e17ffe15 	stw	r5,-8(fp)
    ab78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ab7c:	e0bffd17 	ldw	r2,-12(fp)
    ab80:	10800017 	ldw	r2,0(r2)
    ab84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ab88:	e0bffc17 	ldw	r2,-16(fp)
    ab8c:	10c00a04 	addi	r3,r2,40
    ab90:	e0bffd17 	ldw	r2,-12(fp)
    ab94:	10800217 	ldw	r2,8(r2)
    ab98:	100f883a 	mov	r7,r2
    ab9c:	e1bfff17 	ldw	r6,-4(fp)
    aba0:	e17ffe17 	ldw	r5,-8(fp)
    aba4:	1809883a 	mov	r4,r3
    aba8:	000b3440 	call	b344 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    abac:	e037883a 	mov	sp,fp
    abb0:	dfc00117 	ldw	ra,4(sp)
    abb4:	df000017 	ldw	fp,0(sp)
    abb8:	dec00204 	addi	sp,sp,8
    abbc:	f800283a 	ret

0000abc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    abc0:	defffc04 	addi	sp,sp,-16
    abc4:	dfc00315 	stw	ra,12(sp)
    abc8:	df000215 	stw	fp,8(sp)
    abcc:	df000204 	addi	fp,sp,8
    abd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    abd4:	e0bfff17 	ldw	r2,-4(fp)
    abd8:	10800017 	ldw	r2,0(r2)
    abdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    abe0:	e0bffe17 	ldw	r2,-8(fp)
    abe4:	10c00a04 	addi	r3,r2,40
    abe8:	e0bfff17 	ldw	r2,-4(fp)
    abec:	10800217 	ldw	r2,8(r2)
    abf0:	100b883a 	mov	r5,r2
    abf4:	1809883a 	mov	r4,r3
    abf8:	000afd00 	call	afd0 <altera_avalon_jtag_uart_close>
}
    abfc:	e037883a 	mov	sp,fp
    ac00:	dfc00117 	ldw	ra,4(sp)
    ac04:	df000017 	ldw	fp,0(sp)
    ac08:	dec00204 	addi	sp,sp,8
    ac0c:	f800283a 	ret

0000ac10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ac10:	defffa04 	addi	sp,sp,-24
    ac14:	dfc00515 	stw	ra,20(sp)
    ac18:	df000415 	stw	fp,16(sp)
    ac1c:	df000404 	addi	fp,sp,16
    ac20:	e13ffd15 	stw	r4,-12(fp)
    ac24:	e17ffe15 	stw	r5,-8(fp)
    ac28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ac2c:	e0bffd17 	ldw	r2,-12(fp)
    ac30:	10800017 	ldw	r2,0(r2)
    ac34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ac38:	e0bffc17 	ldw	r2,-16(fp)
    ac3c:	10800a04 	addi	r2,r2,40
    ac40:	e1bfff17 	ldw	r6,-4(fp)
    ac44:	e17ffe17 	ldw	r5,-8(fp)
    ac48:	1009883a 	mov	r4,r2
    ac4c:	000b0380 	call	b038 <altera_avalon_jtag_uart_ioctl>
}
    ac50:	e037883a 	mov	sp,fp
    ac54:	dfc00117 	ldw	ra,4(sp)
    ac58:	df000017 	ldw	fp,0(sp)
    ac5c:	dec00204 	addi	sp,sp,8
    ac60:	f800283a 	ret

0000ac64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ac64:	defffa04 	addi	sp,sp,-24
    ac68:	dfc00515 	stw	ra,20(sp)
    ac6c:	df000415 	stw	fp,16(sp)
    ac70:	df000404 	addi	fp,sp,16
    ac74:	e13ffd15 	stw	r4,-12(fp)
    ac78:	e17ffe15 	stw	r5,-8(fp)
    ac7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac80:	e0bffd17 	ldw	r2,-12(fp)
    ac84:	00c00044 	movi	r3,1
    ac88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ac8c:	e0bffd17 	ldw	r2,-12(fp)
    ac90:	10800017 	ldw	r2,0(r2)
    ac94:	10800104 	addi	r2,r2,4
    ac98:	1007883a 	mov	r3,r2
    ac9c:	e0bffd17 	ldw	r2,-12(fp)
    aca0:	10800817 	ldw	r2,32(r2)
    aca4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    aca8:	e0bffe17 	ldw	r2,-8(fp)
    acac:	e0ffff17 	ldw	r3,-4(fp)
    acb0:	d8000015 	stw	zero,0(sp)
    acb4:	e1fffd17 	ldw	r7,-12(fp)
    acb8:	01800074 	movhi	r6,1
    acbc:	31ab4904 	addi	r6,r6,-21212
    acc0:	180b883a 	mov	r5,r3
    acc4:	1009883a 	mov	r4,r2
    acc8:	000a6400 	call	a640 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    accc:	e0bffd17 	ldw	r2,-12(fp)
    acd0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    acd4:	e0bffd17 	ldw	r2,-12(fp)
    acd8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    acdc:	d0e5c317 	ldw	r3,-26868(gp)
    ace0:	e1fffd17 	ldw	r7,-12(fp)
    ace4:	01800074 	movhi	r6,1
    ace8:	31abcc04 	addi	r6,r6,-20688
    acec:	180b883a 	mov	r5,r3
    acf0:	1009883a 	mov	r4,r2
    acf4:	000b5680 	call	b568 <alt_alarm_start>
    acf8:	1000040e 	bge	r2,zero,ad0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    acfc:	e0fffd17 	ldw	r3,-12(fp)
    ad00:	00a00034 	movhi	r2,32768
    ad04:	10bfffc4 	addi	r2,r2,-1
    ad08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ad0c:	0001883a 	nop
    ad10:	e037883a 	mov	sp,fp
    ad14:	dfc00117 	ldw	ra,4(sp)
    ad18:	df000017 	ldw	fp,0(sp)
    ad1c:	dec00204 	addi	sp,sp,8
    ad20:	f800283a 	ret

0000ad24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ad24:	defff804 	addi	sp,sp,-32
    ad28:	df000715 	stw	fp,28(sp)
    ad2c:	df000704 	addi	fp,sp,28
    ad30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ad34:	e0bfff17 	ldw	r2,-4(fp)
    ad38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    ad3c:	e0bffb17 	ldw	r2,-20(fp)
    ad40:	10800017 	ldw	r2,0(r2)
    ad44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad48:	e0bffc17 	ldw	r2,-16(fp)
    ad4c:	10800104 	addi	r2,r2,4
    ad50:	10800037 	ldwio	r2,0(r2)
    ad54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ad58:	e0bffd17 	ldw	r2,-12(fp)
    ad5c:	1080c00c 	andi	r2,r2,768
    ad60:	10006d26 	beq	r2,zero,af18 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ad64:	e0bffd17 	ldw	r2,-12(fp)
    ad68:	1080400c 	andi	r2,r2,256
    ad6c:	10003526 	beq	r2,zero,ae44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ad70:	00800074 	movhi	r2,1
    ad74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad78:	e0bffb17 	ldw	r2,-20(fp)
    ad7c:	10800a17 	ldw	r2,40(r2)
    ad80:	10800044 	addi	r2,r2,1
    ad84:	1081ffcc 	andi	r2,r2,2047
    ad88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ad8c:	e0bffb17 	ldw	r2,-20(fp)
    ad90:	10c00b17 	ldw	r3,44(r2)
    ad94:	e0bffe17 	ldw	r2,-8(fp)
    ad98:	18801526 	beq	r3,r2,adf0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ad9c:	e0bffc17 	ldw	r2,-16(fp)
    ada0:	10800037 	ldwio	r2,0(r2)
    ada4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ada8:	e0bff917 	ldw	r2,-28(fp)
    adac:	10a0000c 	andi	r2,r2,32768
    adb0:	10001126 	beq	r2,zero,adf8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    adb4:	e0bffb17 	ldw	r2,-20(fp)
    adb8:	10800a17 	ldw	r2,40(r2)
    adbc:	e0fff917 	ldw	r3,-28(fp)
    adc0:	1809883a 	mov	r4,r3
    adc4:	e0fffb17 	ldw	r3,-20(fp)
    adc8:	1885883a 	add	r2,r3,r2
    adcc:	10800e04 	addi	r2,r2,56
    add0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    add4:	e0bffb17 	ldw	r2,-20(fp)
    add8:	10800a17 	ldw	r2,40(r2)
    addc:	10800044 	addi	r2,r2,1
    ade0:	10c1ffcc 	andi	r3,r2,2047
    ade4:	e0bffb17 	ldw	r2,-20(fp)
    ade8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    adec:	003fe206 	br	ad78 <_gp+0xffff4db8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    adf0:	0001883a 	nop
    adf4:	00000106 	br	adfc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    adf8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    adfc:	e0bff917 	ldw	r2,-28(fp)
    ae00:	10bfffec 	andhi	r2,r2,65535
    ae04:	10000f26 	beq	r2,zero,ae44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ae08:	e0bffb17 	ldw	r2,-20(fp)
    ae0c:	10c00817 	ldw	r3,32(r2)
    ae10:	00bfff84 	movi	r2,-2
    ae14:	1886703a 	and	r3,r3,r2
    ae18:	e0bffb17 	ldw	r2,-20(fp)
    ae1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ae20:	e0bffc17 	ldw	r2,-16(fp)
    ae24:	10800104 	addi	r2,r2,4
    ae28:	1007883a 	mov	r3,r2
    ae2c:	e0bffb17 	ldw	r2,-20(fp)
    ae30:	10800817 	ldw	r2,32(r2)
    ae34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ae38:	e0bffc17 	ldw	r2,-16(fp)
    ae3c:	10800104 	addi	r2,r2,4
    ae40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	1080800c 	andi	r2,r2,512
    ae4c:	103fbe26 	beq	r2,zero,ad48 <_gp+0xffff4d88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ae50:	e0bffd17 	ldw	r2,-12(fp)
    ae54:	1004d43a 	srli	r2,r2,16
    ae58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ae5c:	00001406 	br	aeb0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ae60:	e0bffc17 	ldw	r2,-16(fp)
    ae64:	e0fffb17 	ldw	r3,-20(fp)
    ae68:	18c00d17 	ldw	r3,52(r3)
    ae6c:	e13ffb17 	ldw	r4,-20(fp)
    ae70:	20c7883a 	add	r3,r4,r3
    ae74:	18c20e04 	addi	r3,r3,2104
    ae78:	18c00003 	ldbu	r3,0(r3)
    ae7c:	18c03fcc 	andi	r3,r3,255
    ae80:	18c0201c 	xori	r3,r3,128
    ae84:	18ffe004 	addi	r3,r3,-128
    ae88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ae8c:	e0bffb17 	ldw	r2,-20(fp)
    ae90:	10800d17 	ldw	r2,52(r2)
    ae94:	10800044 	addi	r2,r2,1
    ae98:	10c1ffcc 	andi	r3,r2,2047
    ae9c:	e0bffb17 	ldw	r2,-20(fp)
    aea0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    aea4:	e0bffa17 	ldw	r2,-24(fp)
    aea8:	10bfffc4 	addi	r2,r2,-1
    aeac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    aeb0:	e0bffa17 	ldw	r2,-24(fp)
    aeb4:	10000526 	beq	r2,zero,aecc <altera_avalon_jtag_uart_irq+0x1a8>
    aeb8:	e0bffb17 	ldw	r2,-20(fp)
    aebc:	10c00d17 	ldw	r3,52(r2)
    aec0:	e0bffb17 	ldw	r2,-20(fp)
    aec4:	10800c17 	ldw	r2,48(r2)
    aec8:	18bfe51e 	bne	r3,r2,ae60 <_gp+0xffff4ea0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aecc:	e0bffa17 	ldw	r2,-24(fp)
    aed0:	103f9d26 	beq	r2,zero,ad48 <_gp+0xffff4d88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aed4:	e0bffb17 	ldw	r2,-20(fp)
    aed8:	10c00817 	ldw	r3,32(r2)
    aedc:	00bfff44 	movi	r2,-3
    aee0:	1886703a 	and	r3,r3,r2
    aee4:	e0bffb17 	ldw	r2,-20(fp)
    aee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    aeec:	e0bffb17 	ldw	r2,-20(fp)
    aef0:	10800017 	ldw	r2,0(r2)
    aef4:	10800104 	addi	r2,r2,4
    aef8:	1007883a 	mov	r3,r2
    aefc:	e0bffb17 	ldw	r2,-20(fp)
    af00:	10800817 	ldw	r2,32(r2)
    af04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af08:	e0bffc17 	ldw	r2,-16(fp)
    af0c:	10800104 	addi	r2,r2,4
    af10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    af14:	003f8c06 	br	ad48 <_gp+0xffff4d88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    af18:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    af1c:	0001883a 	nop
    af20:	e037883a 	mov	sp,fp
    af24:	df000017 	ldw	fp,0(sp)
    af28:	dec00104 	addi	sp,sp,4
    af2c:	f800283a 	ret

0000af30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    af30:	defff804 	addi	sp,sp,-32
    af34:	df000715 	stw	fp,28(sp)
    af38:	df000704 	addi	fp,sp,28
    af3c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    af40:	e0bffb17 	ldw	r2,-20(fp)
    af44:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    af48:	e0bff917 	ldw	r2,-28(fp)
    af4c:	10800017 	ldw	r2,0(r2)
    af50:	10800104 	addi	r2,r2,4
    af54:	10800037 	ldwio	r2,0(r2)
    af58:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    af5c:	e0bffa17 	ldw	r2,-24(fp)
    af60:	1081000c 	andi	r2,r2,1024
    af64:	10000b26 	beq	r2,zero,af94 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    af68:	e0bff917 	ldw	r2,-28(fp)
    af6c:	10800017 	ldw	r2,0(r2)
    af70:	10800104 	addi	r2,r2,4
    af74:	1007883a 	mov	r3,r2
    af78:	e0bff917 	ldw	r2,-28(fp)
    af7c:	10800817 	ldw	r2,32(r2)
    af80:	10810014 	ori	r2,r2,1024
    af84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    af88:	e0bff917 	ldw	r2,-28(fp)
    af8c:	10000915 	stw	zero,36(r2)
    af90:	00000a06 	br	afbc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    af94:	e0bff917 	ldw	r2,-28(fp)
    af98:	10c00917 	ldw	r3,36(r2)
    af9c:	00a00034 	movhi	r2,32768
    afa0:	10bfff04 	addi	r2,r2,-4
    afa4:	10c00536 	bltu	r2,r3,afbc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    afa8:	e0bff917 	ldw	r2,-28(fp)
    afac:	10800917 	ldw	r2,36(r2)
    afb0:	10c00044 	addi	r3,r2,1
    afb4:	e0bff917 	ldw	r2,-28(fp)
    afb8:	10c00915 	stw	r3,36(r2)
    afbc:	d0a5c317 	ldw	r2,-26868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    afc0:	e037883a 	mov	sp,fp
    afc4:	df000017 	ldw	fp,0(sp)
    afc8:	dec00104 	addi	sp,sp,4
    afcc:	f800283a 	ret

0000afd0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    afd0:	defffd04 	addi	sp,sp,-12
    afd4:	df000215 	stw	fp,8(sp)
    afd8:	df000204 	addi	fp,sp,8
    afdc:	e13ffe15 	stw	r4,-8(fp)
    afe0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    afe4:	00000506 	br	affc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    afe8:	e0bfff17 	ldw	r2,-4(fp)
    afec:	1090000c 	andi	r2,r2,16384
    aff0:	10000226 	beq	r2,zero,affc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    aff4:	00bffd44 	movi	r2,-11
    aff8:	00000b06 	br	b028 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    affc:	e0bffe17 	ldw	r2,-8(fp)
    b000:	10c00d17 	ldw	r3,52(r2)
    b004:	e0bffe17 	ldw	r2,-8(fp)
    b008:	10800c17 	ldw	r2,48(r2)
    b00c:	18800526 	beq	r3,r2,b024 <altera_avalon_jtag_uart_close+0x54>
    b010:	e0bffe17 	ldw	r2,-8(fp)
    b014:	10c00917 	ldw	r3,36(r2)
    b018:	e0bffe17 	ldw	r2,-8(fp)
    b01c:	10800117 	ldw	r2,4(r2)
    b020:	18bff136 	bltu	r3,r2,afe8 <_gp+0xffff5028>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b024:	0005883a 	mov	r2,zero
}
    b028:	e037883a 	mov	sp,fp
    b02c:	df000017 	ldw	fp,0(sp)
    b030:	dec00104 	addi	sp,sp,4
    b034:	f800283a 	ret

0000b038 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b038:	defffa04 	addi	sp,sp,-24
    b03c:	df000515 	stw	fp,20(sp)
    b040:	df000504 	addi	fp,sp,20
    b044:	e13ffd15 	stw	r4,-12(fp)
    b048:	e17ffe15 	stw	r5,-8(fp)
    b04c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b050:	00bff9c4 	movi	r2,-25
    b054:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b058:	e0bffe17 	ldw	r2,-8(fp)
    b05c:	10da8060 	cmpeqi	r3,r2,27137
    b060:	1800031e 	bne	r3,zero,b070 <altera_avalon_jtag_uart_ioctl+0x38>
    b064:	109a80a0 	cmpeqi	r2,r2,27138
    b068:	1000181e 	bne	r2,zero,b0cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    b06c:	00002906 	br	b114 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10c00117 	ldw	r3,4(r2)
    b078:	00a00034 	movhi	r2,32768
    b07c:	10bfffc4 	addi	r2,r2,-1
    b080:	18802126 	beq	r3,r2,b108 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    b084:	e0bfff17 	ldw	r2,-4(fp)
    b088:	10800017 	ldw	r2,0(r2)
    b08c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b090:	e0bffc17 	ldw	r2,-16(fp)
    b094:	10800090 	cmplti	r2,r2,2
    b098:	1000061e 	bne	r2,zero,b0b4 <altera_avalon_jtag_uart_ioctl+0x7c>
    b09c:	e0fffc17 	ldw	r3,-16(fp)
    b0a0:	00a00034 	movhi	r2,32768
    b0a4:	10bfffc4 	addi	r2,r2,-1
    b0a8:	18800226 	beq	r3,r2,b0b4 <altera_avalon_jtag_uart_ioctl+0x7c>
    b0ac:	e0bffc17 	ldw	r2,-16(fp)
    b0b0:	00000206 	br	b0bc <altera_avalon_jtag_uart_ioctl+0x84>
    b0b4:	00a00034 	movhi	r2,32768
    b0b8:	10bfff84 	addi	r2,r2,-2
    b0bc:	e0fffd17 	ldw	r3,-12(fp)
    b0c0:	18800115 	stw	r2,4(r3)
      rc = 0;
    b0c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b0c8:	00000f06 	br	b108 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b0cc:	e0bffd17 	ldw	r2,-12(fp)
    b0d0:	10c00117 	ldw	r3,4(r2)
    b0d4:	00a00034 	movhi	r2,32768
    b0d8:	10bfffc4 	addi	r2,r2,-1
    b0dc:	18800c26 	beq	r3,r2,b110 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b0e0:	e0bffd17 	ldw	r2,-12(fp)
    b0e4:	10c00917 	ldw	r3,36(r2)
    b0e8:	e0bffd17 	ldw	r2,-12(fp)
    b0ec:	10800117 	ldw	r2,4(r2)
    b0f0:	1885803a 	cmpltu	r2,r3,r2
    b0f4:	10c03fcc 	andi	r3,r2,255
    b0f8:	e0bfff17 	ldw	r2,-4(fp)
    b0fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b100:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b104:	00000206 	br	b110 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b108:	0001883a 	nop
    b10c:	00000106 	br	b114 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b110:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b114:	e0bffb17 	ldw	r2,-20(fp)
}
    b118:	e037883a 	mov	sp,fp
    b11c:	df000017 	ldw	fp,0(sp)
    b120:	dec00104 	addi	sp,sp,4
    b124:	f800283a 	ret

0000b128 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b128:	defff304 	addi	sp,sp,-52
    b12c:	dfc00c15 	stw	ra,48(sp)
    b130:	df000b15 	stw	fp,44(sp)
    b134:	df000b04 	addi	fp,sp,44
    b138:	e13ffc15 	stw	r4,-16(fp)
    b13c:	e17ffd15 	stw	r5,-12(fp)
    b140:	e1bffe15 	stw	r6,-8(fp)
    b144:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b148:	e0bffd17 	ldw	r2,-12(fp)
    b14c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b150:	00004706 	br	b270 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b154:	e0bffc17 	ldw	r2,-16(fp)
    b158:	10800a17 	ldw	r2,40(r2)
    b15c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b160:	e0bffc17 	ldw	r2,-16(fp)
    b164:	10800b17 	ldw	r2,44(r2)
    b168:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    b16c:	e0fff717 	ldw	r3,-36(fp)
    b170:	e0bff817 	ldw	r2,-32(fp)
    b174:	18800536 	bltu	r3,r2,b18c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b178:	e0fff717 	ldw	r3,-36(fp)
    b17c:	e0bff817 	ldw	r2,-32(fp)
    b180:	1885c83a 	sub	r2,r3,r2
    b184:	e0bff615 	stw	r2,-40(fp)
    b188:	00000406 	br	b19c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b18c:	00c20004 	movi	r3,2048
    b190:	e0bff817 	ldw	r2,-32(fp)
    b194:	1885c83a 	sub	r2,r3,r2
    b198:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b19c:	e0bff617 	ldw	r2,-40(fp)
    b1a0:	10001e26 	beq	r2,zero,b21c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    b1a4:	e0fffe17 	ldw	r3,-8(fp)
    b1a8:	e0bff617 	ldw	r2,-40(fp)
    b1ac:	1880022e 	bgeu	r3,r2,b1b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    b1b0:	e0bffe17 	ldw	r2,-8(fp)
    b1b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b1b8:	e0bffc17 	ldw	r2,-16(fp)
    b1bc:	10c00e04 	addi	r3,r2,56
    b1c0:	e0bff817 	ldw	r2,-32(fp)
    b1c4:	1885883a 	add	r2,r3,r2
    b1c8:	e1bff617 	ldw	r6,-40(fp)
    b1cc:	100b883a 	mov	r5,r2
    b1d0:	e13ff517 	ldw	r4,-44(fp)
    b1d4:	000c3a40 	call	c3a4 <memcpy>
      ptr   += n;
    b1d8:	e0fff517 	ldw	r3,-44(fp)
    b1dc:	e0bff617 	ldw	r2,-40(fp)
    b1e0:	1885883a 	add	r2,r3,r2
    b1e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    b1e8:	e0fffe17 	ldw	r3,-8(fp)
    b1ec:	e0bff617 	ldw	r2,-40(fp)
    b1f0:	1885c83a 	sub	r2,r3,r2
    b1f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b1f8:	e0fff817 	ldw	r3,-32(fp)
    b1fc:	e0bff617 	ldw	r2,-40(fp)
    b200:	1885883a 	add	r2,r3,r2
    b204:	10c1ffcc 	andi	r3,r2,2047
    b208:	e0bffc17 	ldw	r2,-16(fp)
    b20c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b210:	e0bffe17 	ldw	r2,-8(fp)
    b214:	00bfcf16 	blt	zero,r2,b154 <_gp+0xffff5194>
    b218:	00000106 	br	b220 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b21c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b220:	e0fff517 	ldw	r3,-44(fp)
    b224:	e0bffd17 	ldw	r2,-12(fp)
    b228:	1880141e 	bne	r3,r2,b27c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b22c:	e0bfff17 	ldw	r2,-4(fp)
    b230:	1090000c 	andi	r2,r2,16384
    b234:	1000131e 	bne	r2,zero,b284 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b238:	0001883a 	nop
    b23c:	e0bffc17 	ldw	r2,-16(fp)
    b240:	10c00a17 	ldw	r3,40(r2)
    b244:	e0bff717 	ldw	r2,-36(fp)
    b248:	1880051e 	bne	r3,r2,b260 <altera_avalon_jtag_uart_read+0x138>
    b24c:	e0bffc17 	ldw	r2,-16(fp)
    b250:	10c00917 	ldw	r3,36(r2)
    b254:	e0bffc17 	ldw	r2,-16(fp)
    b258:	10800117 	ldw	r2,4(r2)
    b25c:	18bff736 	bltu	r3,r2,b23c <_gp+0xffff527c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b260:	e0bffc17 	ldw	r2,-16(fp)
    b264:	10c00a17 	ldw	r3,40(r2)
    b268:	e0bff717 	ldw	r2,-36(fp)
    b26c:	18800726 	beq	r3,r2,b28c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b270:	e0bffe17 	ldw	r2,-8(fp)
    b274:	00bfb716 	blt	zero,r2,b154 <_gp+0xffff5194>
    b278:	00000506 	br	b290 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b27c:	0001883a 	nop
    b280:	00000306 	br	b290 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b284:	0001883a 	nop
    b288:	00000106 	br	b290 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b28c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b290:	e0fff517 	ldw	r3,-44(fp)
    b294:	e0bffd17 	ldw	r2,-12(fp)
    b298:	18801826 	beq	r3,r2,b2fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b29c:	0005303a 	rdctl	r2,status
    b2a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2a4:	e0fffb17 	ldw	r3,-20(fp)
    b2a8:	00bfff84 	movi	r2,-2
    b2ac:	1884703a 	and	r2,r3,r2
    b2b0:	1001703a 	wrctl	status,r2
  
  return context;
    b2b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b2b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b2bc:	e0bffc17 	ldw	r2,-16(fp)
    b2c0:	10800817 	ldw	r2,32(r2)
    b2c4:	10c00054 	ori	r3,r2,1
    b2c8:	e0bffc17 	ldw	r2,-16(fp)
    b2cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b2d0:	e0bffc17 	ldw	r2,-16(fp)
    b2d4:	10800017 	ldw	r2,0(r2)
    b2d8:	10800104 	addi	r2,r2,4
    b2dc:	1007883a 	mov	r3,r2
    b2e0:	e0bffc17 	ldw	r2,-16(fp)
    b2e4:	10800817 	ldw	r2,32(r2)
    b2e8:	18800035 	stwio	r2,0(r3)
    b2ec:	e0bffa17 	ldw	r2,-24(fp)
    b2f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2f4:	e0bff917 	ldw	r2,-28(fp)
    b2f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b2fc:	e0fff517 	ldw	r3,-44(fp)
    b300:	e0bffd17 	ldw	r2,-12(fp)
    b304:	18800426 	beq	r3,r2,b318 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    b308:	e0fff517 	ldw	r3,-44(fp)
    b30c:	e0bffd17 	ldw	r2,-12(fp)
    b310:	1885c83a 	sub	r2,r3,r2
    b314:	00000606 	br	b330 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    b318:	e0bfff17 	ldw	r2,-4(fp)
    b31c:	1090000c 	andi	r2,r2,16384
    b320:	10000226 	beq	r2,zero,b32c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b324:	00bffd44 	movi	r2,-11
    b328:	00000106 	br	b330 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    b32c:	00bffec4 	movi	r2,-5
}
    b330:	e037883a 	mov	sp,fp
    b334:	dfc00117 	ldw	ra,4(sp)
    b338:	df000017 	ldw	fp,0(sp)
    b33c:	dec00204 	addi	sp,sp,8
    b340:	f800283a 	ret

0000b344 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b344:	defff304 	addi	sp,sp,-52
    b348:	dfc00c15 	stw	ra,48(sp)
    b34c:	df000b15 	stw	fp,44(sp)
    b350:	df000b04 	addi	fp,sp,44
    b354:	e13ffc15 	stw	r4,-16(fp)
    b358:	e17ffd15 	stw	r5,-12(fp)
    b35c:	e1bffe15 	stw	r6,-8(fp)
    b360:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b364:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b368:	e0bffd17 	ldw	r2,-12(fp)
    b36c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b370:	00003706 	br	b450 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b374:	e0bffc17 	ldw	r2,-16(fp)
    b378:	10800c17 	ldw	r2,48(r2)
    b37c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    b380:	e0bffc17 	ldw	r2,-16(fp)
    b384:	10800d17 	ldw	r2,52(r2)
    b388:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    b38c:	e0fff917 	ldw	r3,-28(fp)
    b390:	e0bff517 	ldw	r2,-44(fp)
    b394:	1880062e 	bgeu	r3,r2,b3b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b398:	e0fff517 	ldw	r3,-44(fp)
    b39c:	e0bff917 	ldw	r2,-28(fp)
    b3a0:	1885c83a 	sub	r2,r3,r2
    b3a4:	10bfffc4 	addi	r2,r2,-1
    b3a8:	e0bff615 	stw	r2,-40(fp)
    b3ac:	00000b06 	br	b3dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    b3b0:	e0bff517 	ldw	r2,-44(fp)
    b3b4:	10000526 	beq	r2,zero,b3cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b3b8:	00c20004 	movi	r3,2048
    b3bc:	e0bff917 	ldw	r2,-28(fp)
    b3c0:	1885c83a 	sub	r2,r3,r2
    b3c4:	e0bff615 	stw	r2,-40(fp)
    b3c8:	00000406 	br	b3dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b3cc:	00c1ffc4 	movi	r3,2047
    b3d0:	e0bff917 	ldw	r2,-28(fp)
    b3d4:	1885c83a 	sub	r2,r3,r2
    b3d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b3dc:	e0bff617 	ldw	r2,-40(fp)
    b3e0:	10001e26 	beq	r2,zero,b45c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    b3e4:	e0fffe17 	ldw	r3,-8(fp)
    b3e8:	e0bff617 	ldw	r2,-40(fp)
    b3ec:	1880022e 	bgeu	r3,r2,b3f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    b3f0:	e0bffe17 	ldw	r2,-8(fp)
    b3f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b3f8:	e0bffc17 	ldw	r2,-16(fp)
    b3fc:	10c20e04 	addi	r3,r2,2104
    b400:	e0bff917 	ldw	r2,-28(fp)
    b404:	1885883a 	add	r2,r3,r2
    b408:	e1bff617 	ldw	r6,-40(fp)
    b40c:	e17ffd17 	ldw	r5,-12(fp)
    b410:	1009883a 	mov	r4,r2
    b414:	000c3a40 	call	c3a4 <memcpy>
      ptr   += n;
    b418:	e0fffd17 	ldw	r3,-12(fp)
    b41c:	e0bff617 	ldw	r2,-40(fp)
    b420:	1885883a 	add	r2,r3,r2
    b424:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b428:	e0fffe17 	ldw	r3,-8(fp)
    b42c:	e0bff617 	ldw	r2,-40(fp)
    b430:	1885c83a 	sub	r2,r3,r2
    b434:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b438:	e0fff917 	ldw	r3,-28(fp)
    b43c:	e0bff617 	ldw	r2,-40(fp)
    b440:	1885883a 	add	r2,r3,r2
    b444:	10c1ffcc 	andi	r3,r2,2047
    b448:	e0bffc17 	ldw	r2,-16(fp)
    b44c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b450:	e0bffe17 	ldw	r2,-8(fp)
    b454:	00bfc716 	blt	zero,r2,b374 <_gp+0xffff53b4>
    b458:	00000106 	br	b460 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b45c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b460:	0005303a 	rdctl	r2,status
    b464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b468:	e0fffb17 	ldw	r3,-20(fp)
    b46c:	00bfff84 	movi	r2,-2
    b470:	1884703a 	and	r2,r3,r2
    b474:	1001703a 	wrctl	status,r2
  
  return context;
    b478:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b47c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b480:	e0bffc17 	ldw	r2,-16(fp)
    b484:	10800817 	ldw	r2,32(r2)
    b488:	10c00094 	ori	r3,r2,2
    b48c:	e0bffc17 	ldw	r2,-16(fp)
    b490:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b494:	e0bffc17 	ldw	r2,-16(fp)
    b498:	10800017 	ldw	r2,0(r2)
    b49c:	10800104 	addi	r2,r2,4
    b4a0:	1007883a 	mov	r3,r2
    b4a4:	e0bffc17 	ldw	r2,-16(fp)
    b4a8:	10800817 	ldw	r2,32(r2)
    b4ac:	18800035 	stwio	r2,0(r3)
    b4b0:	e0bffa17 	ldw	r2,-24(fp)
    b4b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4b8:	e0bff817 	ldw	r2,-32(fp)
    b4bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b4c0:	e0bffe17 	ldw	r2,-8(fp)
    b4c4:	0080100e 	bge	zero,r2,b508 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    b4c8:	e0bfff17 	ldw	r2,-4(fp)
    b4cc:	1090000c 	andi	r2,r2,16384
    b4d0:	1000101e 	bne	r2,zero,b514 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b4d4:	0001883a 	nop
    b4d8:	e0bffc17 	ldw	r2,-16(fp)
    b4dc:	10c00d17 	ldw	r3,52(r2)
    b4e0:	e0bff517 	ldw	r2,-44(fp)
    b4e4:	1880051e 	bne	r3,r2,b4fc <altera_avalon_jtag_uart_write+0x1b8>
    b4e8:	e0bffc17 	ldw	r2,-16(fp)
    b4ec:	10c00917 	ldw	r3,36(r2)
    b4f0:	e0bffc17 	ldw	r2,-16(fp)
    b4f4:	10800117 	ldw	r2,4(r2)
    b4f8:	18bff736 	bltu	r3,r2,b4d8 <_gp+0xffff5518>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b4fc:	e0bffc17 	ldw	r2,-16(fp)
    b500:	10800917 	ldw	r2,36(r2)
    b504:	1000051e 	bne	r2,zero,b51c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    b508:	e0bffe17 	ldw	r2,-8(fp)
    b50c:	00bfd016 	blt	zero,r2,b450 <_gp+0xffff5490>
    b510:	00000306 	br	b520 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b514:	0001883a 	nop
    b518:	00000106 	br	b520 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    b51c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b520:	e0fffd17 	ldw	r3,-12(fp)
    b524:	e0bff717 	ldw	r2,-36(fp)
    b528:	18800426 	beq	r3,r2,b53c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    b52c:	e0fffd17 	ldw	r3,-12(fp)
    b530:	e0bff717 	ldw	r2,-36(fp)
    b534:	1885c83a 	sub	r2,r3,r2
    b538:	00000606 	br	b554 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    b53c:	e0bfff17 	ldw	r2,-4(fp)
    b540:	1090000c 	andi	r2,r2,16384
    b544:	10000226 	beq	r2,zero,b550 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    b548:	00bffd44 	movi	r2,-11
    b54c:	00000106 	br	b554 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b550:	00bffec4 	movi	r2,-5
}
    b554:	e037883a 	mov	sp,fp
    b558:	dfc00117 	ldw	ra,4(sp)
    b55c:	df000017 	ldw	fp,0(sp)
    b560:	dec00204 	addi	sp,sp,8
    b564:	f800283a 	ret

0000b568 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b568:	defff504 	addi	sp,sp,-44
    b56c:	df000a15 	stw	fp,40(sp)
    b570:	df000a04 	addi	fp,sp,40
    b574:	e13ffc15 	stw	r4,-16(fp)
    b578:	e17ffd15 	stw	r5,-12(fp)
    b57c:	e1bffe15 	stw	r6,-8(fp)
    b580:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b584:	e03ff615 	stw	zero,-40(fp)
    b588:	d0a5c317 	ldw	r2,-26868(gp)
  
  if (alt_ticks_per_second ())
    b58c:	10003c26 	beq	r2,zero,b680 <alt_alarm_start+0x118>
  {
    if (alarm)
    b590:	e0bffc17 	ldw	r2,-16(fp)
    b594:	10003826 	beq	r2,zero,b678 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b598:	e0bffc17 	ldw	r2,-16(fp)
    b59c:	e0fffe17 	ldw	r3,-8(fp)
    b5a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b5a4:	e0bffc17 	ldw	r2,-16(fp)
    b5a8:	e0ffff17 	ldw	r3,-4(fp)
    b5ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5b0:	0005303a 	rdctl	r2,status
    b5b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5b8:	e0fff917 	ldw	r3,-28(fp)
    b5bc:	00bfff84 	movi	r2,-2
    b5c0:	1884703a 	and	r2,r3,r2
    b5c4:	1001703a 	wrctl	status,r2
  
  return context;
    b5c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b5cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b5d0:	d0a5c417 	ldw	r2,-26864(gp)
      
      current_nticks = alt_nticks();
    b5d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b5d8:	e0fffd17 	ldw	r3,-12(fp)
    b5dc:	e0bff617 	ldw	r2,-40(fp)
    b5e0:	1885883a 	add	r2,r3,r2
    b5e4:	10c00044 	addi	r3,r2,1
    b5e8:	e0bffc17 	ldw	r2,-16(fp)
    b5ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b5f0:	e0bffc17 	ldw	r2,-16(fp)
    b5f4:	10c00217 	ldw	r3,8(r2)
    b5f8:	e0bff617 	ldw	r2,-40(fp)
    b5fc:	1880042e 	bgeu	r3,r2,b610 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b600:	e0bffc17 	ldw	r2,-16(fp)
    b604:	00c00044 	movi	r3,1
    b608:	10c00405 	stb	r3,16(r2)
    b60c:	00000206 	br	b618 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b610:	e0bffc17 	ldw	r2,-16(fp)
    b614:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b618:	e0bffc17 	ldw	r2,-16(fp)
    b61c:	d0e01304 	addi	r3,gp,-32692
    b620:	e0fffa15 	stw	r3,-24(fp)
    b624:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b628:	e0bffb17 	ldw	r2,-20(fp)
    b62c:	e0fffa17 	ldw	r3,-24(fp)
    b630:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b634:	e0bffa17 	ldw	r2,-24(fp)
    b638:	10c00017 	ldw	r3,0(r2)
    b63c:	e0bffb17 	ldw	r2,-20(fp)
    b640:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b644:	e0bffa17 	ldw	r2,-24(fp)
    b648:	10800017 	ldw	r2,0(r2)
    b64c:	e0fffb17 	ldw	r3,-20(fp)
    b650:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b654:	e0bffa17 	ldw	r2,-24(fp)
    b658:	e0fffb17 	ldw	r3,-20(fp)
    b65c:	10c00015 	stw	r3,0(r2)
    b660:	e0bff817 	ldw	r2,-32(fp)
    b664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b668:	e0bff717 	ldw	r2,-36(fp)
    b66c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b670:	0005883a 	mov	r2,zero
    b674:	00000306 	br	b684 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b678:	00bffa84 	movi	r2,-22
    b67c:	00000106 	br	b684 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b680:	00bfde84 	movi	r2,-134
  }
}
    b684:	e037883a 	mov	sp,fp
    b688:	df000017 	ldw	fp,0(sp)
    b68c:	dec00104 	addi	sp,sp,4
    b690:	f800283a 	ret

0000b694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b694:	defffe04 	addi	sp,sp,-8
    b698:	dfc00115 	stw	ra,4(sp)
    b69c:	df000015 	stw	fp,0(sp)
    b6a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6a4:	d0a01217 	ldw	r2,-32696(gp)
    b6a8:	10000326 	beq	r2,zero,b6b8 <alt_get_errno+0x24>
    b6ac:	d0a01217 	ldw	r2,-32696(gp)
    b6b0:	103ee83a 	callr	r2
    b6b4:	00000106 	br	b6bc <alt_get_errno+0x28>
    b6b8:	d0a5c504 	addi	r2,gp,-26860
}
    b6bc:	e037883a 	mov	sp,fp
    b6c0:	dfc00117 	ldw	ra,4(sp)
    b6c4:	df000017 	ldw	fp,0(sp)
    b6c8:	dec00204 	addi	sp,sp,8
    b6cc:	f800283a 	ret

0000b6d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b6d0:	defffb04 	addi	sp,sp,-20
    b6d4:	dfc00415 	stw	ra,16(sp)
    b6d8:	df000315 	stw	fp,12(sp)
    b6dc:	df000304 	addi	fp,sp,12
    b6e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b6e4:	e0bfff17 	ldw	r2,-4(fp)
    b6e8:	10000816 	blt	r2,zero,b70c <close+0x3c>
    b6ec:	01400304 	movi	r5,12
    b6f0:	e13fff17 	ldw	r4,-4(fp)
    b6f4:	00088c00 	call	88c0 <__mulsi3>
    b6f8:	1007883a 	mov	r3,r2
    b6fc:	00800074 	movhi	r2,1
    b700:	10b68704 	addi	r2,r2,-9700
    b704:	1885883a 	add	r2,r3,r2
    b708:	00000106 	br	b710 <close+0x40>
    b70c:	0005883a 	mov	r2,zero
    b710:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b714:	e0bffd17 	ldw	r2,-12(fp)
    b718:	10001926 	beq	r2,zero,b780 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b71c:	e0bffd17 	ldw	r2,-12(fp)
    b720:	10800017 	ldw	r2,0(r2)
    b724:	10800417 	ldw	r2,16(r2)
    b728:	10000626 	beq	r2,zero,b744 <close+0x74>
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	10800017 	ldw	r2,0(r2)
    b734:	10800417 	ldw	r2,16(r2)
    b738:	e13ffd17 	ldw	r4,-12(fp)
    b73c:	103ee83a 	callr	r2
    b740:	00000106 	br	b748 <close+0x78>
    b744:	0005883a 	mov	r2,zero
    b748:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b74c:	e13fff17 	ldw	r4,-4(fp)
    b750:	000be340 	call	be34 <alt_release_fd>
    if (rval < 0)
    b754:	e0bffe17 	ldw	r2,-8(fp)
    b758:	1000070e 	bge	r2,zero,b778 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b75c:	000b6940 	call	b694 <alt_get_errno>
    b760:	1007883a 	mov	r3,r2
    b764:	e0bffe17 	ldw	r2,-8(fp)
    b768:	0085c83a 	sub	r2,zero,r2
    b76c:	18800015 	stw	r2,0(r3)
      return -1;
    b770:	00bfffc4 	movi	r2,-1
    b774:	00000706 	br	b794 <close+0xc4>
    }
    return 0;
    b778:	0005883a 	mov	r2,zero
    b77c:	00000506 	br	b794 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b780:	000b6940 	call	b694 <alt_get_errno>
    b784:	1007883a 	mov	r3,r2
    b788:	00801444 	movi	r2,81
    b78c:	18800015 	stw	r2,0(r3)
    return -1;
    b790:	00bfffc4 	movi	r2,-1
  }
}
    b794:	e037883a 	mov	sp,fp
    b798:	dfc00117 	ldw	ra,4(sp)
    b79c:	df000017 	ldw	fp,0(sp)
    b7a0:	dec00204 	addi	sp,sp,8
    b7a4:	f800283a 	ret

0000b7a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b7a8:	deffff04 	addi	sp,sp,-4
    b7ac:	df000015 	stw	fp,0(sp)
    b7b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b7b4:	0001883a 	nop
    b7b8:	e037883a 	mov	sp,fp
    b7bc:	df000017 	ldw	fp,0(sp)
    b7c0:	dec00104 	addi	sp,sp,4
    b7c4:	f800283a 	ret

0000b7c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b7c8:	defffc04 	addi	sp,sp,-16
    b7cc:	df000315 	stw	fp,12(sp)
    b7d0:	df000304 	addi	fp,sp,12
    b7d4:	e13ffd15 	stw	r4,-12(fp)
    b7d8:	e17ffe15 	stw	r5,-8(fp)
    b7dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
}
    b7e4:	e037883a 	mov	sp,fp
    b7e8:	df000017 	ldw	fp,0(sp)
    b7ec:	dec00104 	addi	sp,sp,4
    b7f0:	f800283a 	ret

0000b7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b7f4:	defffe04 	addi	sp,sp,-8
    b7f8:	dfc00115 	stw	ra,4(sp)
    b7fc:	df000015 	stw	fp,0(sp)
    b800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b804:	d0a01217 	ldw	r2,-32696(gp)
    b808:	10000326 	beq	r2,zero,b818 <alt_get_errno+0x24>
    b80c:	d0a01217 	ldw	r2,-32696(gp)
    b810:	103ee83a 	callr	r2
    b814:	00000106 	br	b81c <alt_get_errno+0x28>
    b818:	d0a5c504 	addi	r2,gp,-26860
}
    b81c:	e037883a 	mov	sp,fp
    b820:	dfc00117 	ldw	ra,4(sp)
    b824:	df000017 	ldw	fp,0(sp)
    b828:	dec00204 	addi	sp,sp,8
    b82c:	f800283a 	ret

0000b830 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b830:	defffa04 	addi	sp,sp,-24
    b834:	dfc00515 	stw	ra,20(sp)
    b838:	df000415 	stw	fp,16(sp)
    b83c:	df000404 	addi	fp,sp,16
    b840:	e13ffe15 	stw	r4,-8(fp)
    b844:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b848:	e0bffe17 	ldw	r2,-8(fp)
    b84c:	10000326 	beq	r2,zero,b85c <alt_dev_llist_insert+0x2c>
    b850:	e0bffe17 	ldw	r2,-8(fp)
    b854:	10800217 	ldw	r2,8(r2)
    b858:	1000061e 	bne	r2,zero,b874 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    b85c:	000b7f40 	call	b7f4 <alt_get_errno>
    b860:	1007883a 	mov	r3,r2
    b864:	00800584 	movi	r2,22
    b868:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b86c:	00bffa84 	movi	r2,-22
    b870:	00001306 	br	b8c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b874:	e0bffe17 	ldw	r2,-8(fp)
    b878:	e0ffff17 	ldw	r3,-4(fp)
    b87c:	e0fffc15 	stw	r3,-16(fp)
    b880:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b884:	e0bffd17 	ldw	r2,-12(fp)
    b888:	e0fffc17 	ldw	r3,-16(fp)
    b88c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b890:	e0bffc17 	ldw	r2,-16(fp)
    b894:	10c00017 	ldw	r3,0(r2)
    b898:	e0bffd17 	ldw	r2,-12(fp)
    b89c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b8a0:	e0bffc17 	ldw	r2,-16(fp)
    b8a4:	10800017 	ldw	r2,0(r2)
    b8a8:	e0fffd17 	ldw	r3,-12(fp)
    b8ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b8b0:	e0bffc17 	ldw	r2,-16(fp)
    b8b4:	e0fffd17 	ldw	r3,-12(fp)
    b8b8:	10c00015 	stw	r3,0(r2)

  return 0;  
    b8bc:	0005883a 	mov	r2,zero
}
    b8c0:	e037883a 	mov	sp,fp
    b8c4:	dfc00117 	ldw	ra,4(sp)
    b8c8:	df000017 	ldw	fp,0(sp)
    b8cc:	dec00204 	addi	sp,sp,8
    b8d0:	f800283a 	ret

0000b8d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b8d4:	defffd04 	addi	sp,sp,-12
    b8d8:	dfc00215 	stw	ra,8(sp)
    b8dc:	df000115 	stw	fp,4(sp)
    b8e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b8e4:	00800074 	movhi	r2,1
    b8e8:	10b21304 	addi	r2,r2,-14260
    b8ec:	e0bfff15 	stw	r2,-4(fp)
    b8f0:	00000606 	br	b90c <_do_ctors+0x38>
        (*ctor) (); 
    b8f4:	e0bfff17 	ldw	r2,-4(fp)
    b8f8:	10800017 	ldw	r2,0(r2)
    b8fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b900:	e0bfff17 	ldw	r2,-4(fp)
    b904:	10bfff04 	addi	r2,r2,-4
    b908:	e0bfff15 	stw	r2,-4(fp)
    b90c:	e0ffff17 	ldw	r3,-4(fp)
    b910:	00800074 	movhi	r2,1
    b914:	10b21404 	addi	r2,r2,-14256
    b918:	18bff62e 	bgeu	r3,r2,b8f4 <_gp+0xffff5934>
        (*ctor) (); 
}
    b91c:	0001883a 	nop
    b920:	e037883a 	mov	sp,fp
    b924:	dfc00117 	ldw	ra,4(sp)
    b928:	df000017 	ldw	fp,0(sp)
    b92c:	dec00204 	addi	sp,sp,8
    b930:	f800283a 	ret

0000b934 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b934:	defffd04 	addi	sp,sp,-12
    b938:	dfc00215 	stw	ra,8(sp)
    b93c:	df000115 	stw	fp,4(sp)
    b940:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b944:	00800074 	movhi	r2,1
    b948:	10b21304 	addi	r2,r2,-14260
    b94c:	e0bfff15 	stw	r2,-4(fp)
    b950:	00000606 	br	b96c <_do_dtors+0x38>
        (*dtor) (); 
    b954:	e0bfff17 	ldw	r2,-4(fp)
    b958:	10800017 	ldw	r2,0(r2)
    b95c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b960:	e0bfff17 	ldw	r2,-4(fp)
    b964:	10bfff04 	addi	r2,r2,-4
    b968:	e0bfff15 	stw	r2,-4(fp)
    b96c:	e0ffff17 	ldw	r3,-4(fp)
    b970:	00800074 	movhi	r2,1
    b974:	10b21404 	addi	r2,r2,-14256
    b978:	18bff62e 	bgeu	r3,r2,b954 <_gp+0xffff5994>
        (*dtor) (); 
}
    b97c:	0001883a 	nop
    b980:	e037883a 	mov	sp,fp
    b984:	dfc00117 	ldw	ra,4(sp)
    b988:	df000017 	ldw	fp,0(sp)
    b98c:	dec00204 	addi	sp,sp,8
    b990:	f800283a 	ret

0000b994 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b994:	deffff04 	addi	sp,sp,-4
    b998:	df000015 	stw	fp,0(sp)
    b99c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b9a0:	0001883a 	nop
    b9a4:	e037883a 	mov	sp,fp
    b9a8:	df000017 	ldw	fp,0(sp)
    b9ac:	dec00104 	addi	sp,sp,4
    b9b0:	f800283a 	ret

0000b9b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    b9b4:	defffe04 	addi	sp,sp,-8
    b9b8:	df000115 	stw	fp,4(sp)
    b9bc:	df000104 	addi	fp,sp,4
    b9c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    b9c4:	e0bfff17 	ldw	r2,-4(fp)
    b9c8:	10bffe84 	addi	r2,r2,-6
    b9cc:	10c00428 	cmpgeui	r3,r2,16
    b9d0:	18001a1e 	bne	r3,zero,ba3c <alt_exception_cause_generated_bad_addr+0x88>
    b9d4:	100690ba 	slli	r3,r2,2
    b9d8:	00800074 	movhi	r2,1
    b9dc:	10ae7b04 	addi	r2,r2,-17940
    b9e0:	1885883a 	add	r2,r3,r2
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	1000683a 	jmp	r2
    b9ec:	0000ba2c 	andhi	zero,zero,744
    b9f0:	0000ba2c 	andhi	zero,zero,744
    b9f4:	0000ba3c 	xorhi	zero,zero,744
    b9f8:	0000ba3c 	xorhi	zero,zero,744
    b9fc:	0000ba3c 	xorhi	zero,zero,744
    ba00:	0000ba2c 	andhi	zero,zero,744
    ba04:	0000ba34 	movhi	zero,744
    ba08:	0000ba3c 	xorhi	zero,zero,744
    ba0c:	0000ba2c 	andhi	zero,zero,744
    ba10:	0000ba2c 	andhi	zero,zero,744
    ba14:	0000ba3c 	xorhi	zero,zero,744
    ba18:	0000ba2c 	andhi	zero,zero,744
    ba1c:	0000ba34 	movhi	zero,744
    ba20:	0000ba3c 	xorhi	zero,zero,744
    ba24:	0000ba3c 	xorhi	zero,zero,744
    ba28:	0000ba2c 	andhi	zero,zero,744
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    ba2c:	00800044 	movi	r2,1
    ba30:	00000306 	br	ba40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    ba34:	0005883a 	mov	r2,zero
    ba38:	00000106 	br	ba40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    ba3c:	0005883a 	mov	r2,zero
  }
}
    ba40:	e037883a 	mov	sp,fp
    ba44:	df000017 	ldw	fp,0(sp)
    ba48:	dec00104 	addi	sp,sp,4
    ba4c:	f800283a 	ret

0000ba50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ba50:	defff804 	addi	sp,sp,-32
    ba54:	dfc00715 	stw	ra,28(sp)
    ba58:	df000615 	stw	fp,24(sp)
    ba5c:	dc000515 	stw	r16,20(sp)
    ba60:	df000604 	addi	fp,sp,24
    ba64:	e13ffb15 	stw	r4,-20(fp)
    ba68:	e17ffc15 	stw	r5,-16(fp)
    ba6c:	e1bffd15 	stw	r6,-12(fp)
    ba70:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    ba74:	e1bffe17 	ldw	r6,-8(fp)
    ba78:	e17ffd17 	ldw	r5,-12(fp)
    ba7c:	e13ffc17 	ldw	r4,-16(fp)
    ba80:	000bcd80 	call	bcd8 <open>
    ba84:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    ba88:	e0bffa17 	ldw	r2,-24(fp)
    ba8c:	10002216 	blt	r2,zero,bb18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    ba90:	04000074 	movhi	r16,1
    ba94:	84368704 	addi	r16,r16,-9700
    ba98:	e0bffa17 	ldw	r2,-24(fp)
    ba9c:	01400304 	movi	r5,12
    baa0:	1009883a 	mov	r4,r2
    baa4:	00088c00 	call	88c0 <__mulsi3>
    baa8:	8085883a 	add	r2,r16,r2
    baac:	10c00017 	ldw	r3,0(r2)
    bab0:	e0bffb17 	ldw	r2,-20(fp)
    bab4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bab8:	04000074 	movhi	r16,1
    babc:	84368704 	addi	r16,r16,-9700
    bac0:	e0bffa17 	ldw	r2,-24(fp)
    bac4:	01400304 	movi	r5,12
    bac8:	1009883a 	mov	r4,r2
    bacc:	00088c00 	call	88c0 <__mulsi3>
    bad0:	8085883a 	add	r2,r16,r2
    bad4:	10800104 	addi	r2,r2,4
    bad8:	10c00017 	ldw	r3,0(r2)
    badc:	e0bffb17 	ldw	r2,-20(fp)
    bae0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bae4:	04000074 	movhi	r16,1
    bae8:	84368704 	addi	r16,r16,-9700
    baec:	e0bffa17 	ldw	r2,-24(fp)
    baf0:	01400304 	movi	r5,12
    baf4:	1009883a 	mov	r4,r2
    baf8:	00088c00 	call	88c0 <__mulsi3>
    bafc:	8085883a 	add	r2,r16,r2
    bb00:	10800204 	addi	r2,r2,8
    bb04:	10c00017 	ldw	r3,0(r2)
    bb08:	e0bffb17 	ldw	r2,-20(fp)
    bb0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bb10:	e13ffa17 	ldw	r4,-24(fp)
    bb14:	000be340 	call	be34 <alt_release_fd>
  }
} 
    bb18:	0001883a 	nop
    bb1c:	e6ffff04 	addi	sp,fp,-4
    bb20:	dfc00217 	ldw	ra,8(sp)
    bb24:	df000117 	ldw	fp,4(sp)
    bb28:	dc000017 	ldw	r16,0(sp)
    bb2c:	dec00304 	addi	sp,sp,12
    bb30:	f800283a 	ret

0000bb34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bb34:	defffb04 	addi	sp,sp,-20
    bb38:	dfc00415 	stw	ra,16(sp)
    bb3c:	df000315 	stw	fp,12(sp)
    bb40:	df000304 	addi	fp,sp,12
    bb44:	e13ffd15 	stw	r4,-12(fp)
    bb48:	e17ffe15 	stw	r5,-8(fp)
    bb4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bb50:	01c07fc4 	movi	r7,511
    bb54:	01800044 	movi	r6,1
    bb58:	e17ffd17 	ldw	r5,-12(fp)
    bb5c:	01000074 	movhi	r4,1
    bb60:	21368a04 	addi	r4,r4,-9688
    bb64:	000ba500 	call	ba50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bb68:	01c07fc4 	movi	r7,511
    bb6c:	000d883a 	mov	r6,zero
    bb70:	e17ffe17 	ldw	r5,-8(fp)
    bb74:	01000074 	movhi	r4,1
    bb78:	21368704 	addi	r4,r4,-9700
    bb7c:	000ba500 	call	ba50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bb80:	01c07fc4 	movi	r7,511
    bb84:	01800044 	movi	r6,1
    bb88:	e17fff17 	ldw	r5,-4(fp)
    bb8c:	01000074 	movhi	r4,1
    bb90:	21368d04 	addi	r4,r4,-9676
    bb94:	000ba500 	call	ba50 <alt_open_fd>
}  
    bb98:	0001883a 	nop
    bb9c:	e037883a 	mov	sp,fp
    bba0:	dfc00117 	ldw	ra,4(sp)
    bba4:	df000017 	ldw	fp,0(sp)
    bba8:	dec00204 	addi	sp,sp,8
    bbac:	f800283a 	ret

0000bbb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbb0:	defffe04 	addi	sp,sp,-8
    bbb4:	dfc00115 	stw	ra,4(sp)
    bbb8:	df000015 	stw	fp,0(sp)
    bbbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bbc0:	d0a01217 	ldw	r2,-32696(gp)
    bbc4:	10000326 	beq	r2,zero,bbd4 <alt_get_errno+0x24>
    bbc8:	d0a01217 	ldw	r2,-32696(gp)
    bbcc:	103ee83a 	callr	r2
    bbd0:	00000106 	br	bbd8 <alt_get_errno+0x28>
    bbd4:	d0a5c504 	addi	r2,gp,-26860
}
    bbd8:	e037883a 	mov	sp,fp
    bbdc:	dfc00117 	ldw	ra,4(sp)
    bbe0:	df000017 	ldw	fp,0(sp)
    bbe4:	dec00204 	addi	sp,sp,8
    bbe8:	f800283a 	ret

0000bbec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bbec:	defffb04 	addi	sp,sp,-20
    bbf0:	dfc00415 	stw	ra,16(sp)
    bbf4:	df000315 	stw	fp,12(sp)
    bbf8:	dc000215 	stw	r16,8(sp)
    bbfc:	df000304 	addi	fp,sp,12
    bc00:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc04:	e0bffe17 	ldw	r2,-8(fp)
    bc08:	10800217 	ldw	r2,8(r2)
    bc0c:	10d00034 	orhi	r3,r2,16384
    bc10:	e0bffe17 	ldw	r2,-8(fp)
    bc14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc18:	e03ffd15 	stw	zero,-12(fp)
    bc1c:	00002306 	br	bcac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc20:	04000074 	movhi	r16,1
    bc24:	84368704 	addi	r16,r16,-9700
    bc28:	e0bffd17 	ldw	r2,-12(fp)
    bc2c:	01400304 	movi	r5,12
    bc30:	1009883a 	mov	r4,r2
    bc34:	00088c00 	call	88c0 <__mulsi3>
    bc38:	8085883a 	add	r2,r16,r2
    bc3c:	10c00017 	ldw	r3,0(r2)
    bc40:	e0bffe17 	ldw	r2,-8(fp)
    bc44:	10800017 	ldw	r2,0(r2)
    bc48:	1880151e 	bne	r3,r2,bca0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bc4c:	04000074 	movhi	r16,1
    bc50:	84368704 	addi	r16,r16,-9700
    bc54:	e0bffd17 	ldw	r2,-12(fp)
    bc58:	01400304 	movi	r5,12
    bc5c:	1009883a 	mov	r4,r2
    bc60:	00088c00 	call	88c0 <__mulsi3>
    bc64:	8085883a 	add	r2,r16,r2
    bc68:	10800204 	addi	r2,r2,8
    bc6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc70:	10000b0e 	bge	r2,zero,bca0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bc74:	01400304 	movi	r5,12
    bc78:	e13ffd17 	ldw	r4,-12(fp)
    bc7c:	00088c00 	call	88c0 <__mulsi3>
    bc80:	1007883a 	mov	r3,r2
    bc84:	00800074 	movhi	r2,1
    bc88:	10b68704 	addi	r2,r2,-9700
    bc8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bc90:	e0bffe17 	ldw	r2,-8(fp)
    bc94:	18800226 	beq	r3,r2,bca0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bc98:	00bffcc4 	movi	r2,-13
    bc9c:	00000806 	br	bcc0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bca0:	e0bffd17 	ldw	r2,-12(fp)
    bca4:	10800044 	addi	r2,r2,1
    bca8:	e0bffd15 	stw	r2,-12(fp)
    bcac:	d0a01117 	ldw	r2,-32700(gp)
    bcb0:	1007883a 	mov	r3,r2
    bcb4:	e0bffd17 	ldw	r2,-12(fp)
    bcb8:	18bfd92e 	bgeu	r3,r2,bc20 <_gp+0xffff5c60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bcbc:	0005883a 	mov	r2,zero
}
    bcc0:	e6ffff04 	addi	sp,fp,-4
    bcc4:	dfc00217 	ldw	ra,8(sp)
    bcc8:	df000117 	ldw	fp,4(sp)
    bccc:	dc000017 	ldw	r16,0(sp)
    bcd0:	dec00304 	addi	sp,sp,12
    bcd4:	f800283a 	ret

0000bcd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bcd8:	defff604 	addi	sp,sp,-40
    bcdc:	dfc00915 	stw	ra,36(sp)
    bce0:	df000815 	stw	fp,32(sp)
    bce4:	df000804 	addi	fp,sp,32
    bce8:	e13ffd15 	stw	r4,-12(fp)
    bcec:	e17ffe15 	stw	r5,-8(fp)
    bcf0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bcf4:	00bfffc4 	movi	r2,-1
    bcf8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    bcfc:	00bffb44 	movi	r2,-19
    bd00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    bd04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd08:	d1600f04 	addi	r5,gp,-32708
    bd0c:	e13ffd17 	ldw	r4,-12(fp)
    bd10:	000c0800 	call	c080 <alt_find_dev>
    bd14:	e0bff815 	stw	r2,-32(fp)
    bd18:	e0bff817 	ldw	r2,-32(fp)
    bd1c:	1000051e 	bne	r2,zero,bd34 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd20:	e13ffd17 	ldw	r4,-12(fp)
    bd24:	000c1100 	call	c110 <alt_find_file>
    bd28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    bd2c:	00800044 	movi	r2,1
    bd30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bd34:	e0bff817 	ldw	r2,-32(fp)
    bd38:	10002b26 	beq	r2,zero,bde8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bd3c:	e13ff817 	ldw	r4,-32(fp)
    bd40:	000c2180 	call	c218 <alt_get_fd>
    bd44:	e0bff915 	stw	r2,-28(fp)
    bd48:	e0bff917 	ldw	r2,-28(fp)
    bd4c:	1000030e 	bge	r2,zero,bd5c <open+0x84>
    {
      status = index;
    bd50:	e0bff917 	ldw	r2,-28(fp)
    bd54:	e0bffa15 	stw	r2,-24(fp)
    bd58:	00002506 	br	bdf0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    bd5c:	01400304 	movi	r5,12
    bd60:	e13ff917 	ldw	r4,-28(fp)
    bd64:	00088c00 	call	88c0 <__mulsi3>
    bd68:	1007883a 	mov	r3,r2
    bd6c:	00800074 	movhi	r2,1
    bd70:	10b68704 	addi	r2,r2,-9700
    bd74:	1885883a 	add	r2,r3,r2
    bd78:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bd7c:	e0fffe17 	ldw	r3,-8(fp)
    bd80:	00900034 	movhi	r2,16384
    bd84:	10bfffc4 	addi	r2,r2,-1
    bd88:	1886703a 	and	r3,r3,r2
    bd8c:	e0bffc17 	ldw	r2,-16(fp)
    bd90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bd94:	e0bffb17 	ldw	r2,-20(fp)
    bd98:	1000051e 	bne	r2,zero,bdb0 <open+0xd8>
    bd9c:	e13ffc17 	ldw	r4,-16(fp)
    bda0:	000bbec0 	call	bbec <alt_file_locked>
    bda4:	e0bffa15 	stw	r2,-24(fp)
    bda8:	e0bffa17 	ldw	r2,-24(fp)
    bdac:	10001016 	blt	r2,zero,bdf0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bdb0:	e0bff817 	ldw	r2,-32(fp)
    bdb4:	10800317 	ldw	r2,12(r2)
    bdb8:	10000826 	beq	r2,zero,bddc <open+0x104>
    bdbc:	e0bff817 	ldw	r2,-32(fp)
    bdc0:	10800317 	ldw	r2,12(r2)
    bdc4:	e1ffff17 	ldw	r7,-4(fp)
    bdc8:	e1bffe17 	ldw	r6,-8(fp)
    bdcc:	e17ffd17 	ldw	r5,-12(fp)
    bdd0:	e13ffc17 	ldw	r4,-16(fp)
    bdd4:	103ee83a 	callr	r2
    bdd8:	00000106 	br	bde0 <open+0x108>
    bddc:	0005883a 	mov	r2,zero
    bde0:	e0bffa15 	stw	r2,-24(fp)
    bde4:	00000206 	br	bdf0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bde8:	00bffb44 	movi	r2,-19
    bdec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bdf0:	e0bffa17 	ldw	r2,-24(fp)
    bdf4:	1000090e 	bge	r2,zero,be1c <open+0x144>
  {
    alt_release_fd (index);  
    bdf8:	e13ff917 	ldw	r4,-28(fp)
    bdfc:	000be340 	call	be34 <alt_release_fd>
    ALT_ERRNO = -status;
    be00:	000bbb00 	call	bbb0 <alt_get_errno>
    be04:	1007883a 	mov	r3,r2
    be08:	e0bffa17 	ldw	r2,-24(fp)
    be0c:	0085c83a 	sub	r2,zero,r2
    be10:	18800015 	stw	r2,0(r3)
    return -1;
    be14:	00bfffc4 	movi	r2,-1
    be18:	00000106 	br	be20 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    be1c:	e0bff917 	ldw	r2,-28(fp)
}
    be20:	e037883a 	mov	sp,fp
    be24:	dfc00117 	ldw	ra,4(sp)
    be28:	df000017 	ldw	fp,0(sp)
    be2c:	dec00204 	addi	sp,sp,8
    be30:	f800283a 	ret

0000be34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    be34:	defffc04 	addi	sp,sp,-16
    be38:	dfc00315 	stw	ra,12(sp)
    be3c:	df000215 	stw	fp,8(sp)
    be40:	dc000115 	stw	r16,4(sp)
    be44:	df000204 	addi	fp,sp,8
    be48:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	108000d0 	cmplti	r2,r2,3
    be54:	1000111e 	bne	r2,zero,be9c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    be58:	04000074 	movhi	r16,1
    be5c:	84368704 	addi	r16,r16,-9700
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	01400304 	movi	r5,12
    be68:	1009883a 	mov	r4,r2
    be6c:	00088c00 	call	88c0 <__mulsi3>
    be70:	8085883a 	add	r2,r16,r2
    be74:	10800204 	addi	r2,r2,8
    be78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    be7c:	04000074 	movhi	r16,1
    be80:	84368704 	addi	r16,r16,-9700
    be84:	e0bffe17 	ldw	r2,-8(fp)
    be88:	01400304 	movi	r5,12
    be8c:	1009883a 	mov	r4,r2
    be90:	00088c00 	call	88c0 <__mulsi3>
    be94:	8085883a 	add	r2,r16,r2
    be98:	10000015 	stw	zero,0(r2)
  }
}
    be9c:	0001883a 	nop
    bea0:	e6ffff04 	addi	sp,fp,-4
    bea4:	dfc00217 	ldw	ra,8(sp)
    bea8:	df000117 	ldw	fp,4(sp)
    beac:	dc000017 	ldw	r16,0(sp)
    beb0:	dec00304 	addi	sp,sp,12
    beb4:	f800283a 	ret

0000beb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    beb8:	defffa04 	addi	sp,sp,-24
    bebc:	df000515 	stw	fp,20(sp)
    bec0:	df000504 	addi	fp,sp,20
    bec4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bec8:	0005303a 	rdctl	r2,status
    becc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bed0:	e0fffc17 	ldw	r3,-16(fp)
    bed4:	00bfff84 	movi	r2,-2
    bed8:	1884703a 	and	r2,r3,r2
    bedc:	1001703a 	wrctl	status,r2
  
  return context;
    bee0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bee4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    bee8:	e0bfff17 	ldw	r2,-4(fp)
    beec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bef0:	e0bffd17 	ldw	r2,-12(fp)
    bef4:	10800017 	ldw	r2,0(r2)
    bef8:	e0fffd17 	ldw	r3,-12(fp)
    befc:	18c00117 	ldw	r3,4(r3)
    bf00:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bf04:	e0bffd17 	ldw	r2,-12(fp)
    bf08:	10800117 	ldw	r2,4(r2)
    bf0c:	e0fffd17 	ldw	r3,-12(fp)
    bf10:	18c00017 	ldw	r3,0(r3)
    bf14:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf18:	e0bffd17 	ldw	r2,-12(fp)
    bf1c:	e0fffd17 	ldw	r3,-12(fp)
    bf20:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bf24:	e0bffd17 	ldw	r2,-12(fp)
    bf28:	e0fffd17 	ldw	r3,-12(fp)
    bf2c:	10c00015 	stw	r3,0(r2)
    bf30:	e0bffb17 	ldw	r2,-20(fp)
    bf34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf38:	e0bffe17 	ldw	r2,-8(fp)
    bf3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bf40:	0001883a 	nop
    bf44:	e037883a 	mov	sp,fp
    bf48:	df000017 	ldw	fp,0(sp)
    bf4c:	dec00104 	addi	sp,sp,4
    bf50:	f800283a 	ret

0000bf54 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bf54:	defffb04 	addi	sp,sp,-20
    bf58:	dfc00415 	stw	ra,16(sp)
    bf5c:	df000315 	stw	fp,12(sp)
    bf60:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bf64:	d0a01317 	ldw	r2,-32692(gp)
    bf68:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bf6c:	d0a5c417 	ldw	r2,-26864(gp)
    bf70:	10800044 	addi	r2,r2,1
    bf74:	d0a5c415 	stw	r2,-26864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bf78:	00002e06 	br	c034 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    bf7c:	e0bffd17 	ldw	r2,-12(fp)
    bf80:	10800017 	ldw	r2,0(r2)
    bf84:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bf88:	e0bffd17 	ldw	r2,-12(fp)
    bf8c:	10800403 	ldbu	r2,16(r2)
    bf90:	10803fcc 	andi	r2,r2,255
    bf94:	10000426 	beq	r2,zero,bfa8 <alt_tick+0x54>
    bf98:	d0a5c417 	ldw	r2,-26864(gp)
    bf9c:	1000021e 	bne	r2,zero,bfa8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bfa8:	e0bffd17 	ldw	r2,-12(fp)
    bfac:	10800217 	ldw	r2,8(r2)
    bfb0:	d0e5c417 	ldw	r3,-26864(gp)
    bfb4:	18801d36 	bltu	r3,r2,c02c <alt_tick+0xd8>
    bfb8:	e0bffd17 	ldw	r2,-12(fp)
    bfbc:	10800403 	ldbu	r2,16(r2)
    bfc0:	10803fcc 	andi	r2,r2,255
    bfc4:	1000191e 	bne	r2,zero,c02c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    bfc8:	e0bffd17 	ldw	r2,-12(fp)
    bfcc:	10800317 	ldw	r2,12(r2)
    bfd0:	e0fffd17 	ldw	r3,-12(fp)
    bfd4:	18c00517 	ldw	r3,20(r3)
    bfd8:	1809883a 	mov	r4,r3
    bfdc:	103ee83a 	callr	r2
    bfe0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bfe4:	e0bfff17 	ldw	r2,-4(fp)
    bfe8:	1000031e 	bne	r2,zero,bff8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    bfec:	e13ffd17 	ldw	r4,-12(fp)
    bff0:	000beb80 	call	beb8 <alt_alarm_stop>
    bff4:	00000d06 	br	c02c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    bff8:	e0bffd17 	ldw	r2,-12(fp)
    bffc:	10c00217 	ldw	r3,8(r2)
    c000:	e0bfff17 	ldw	r2,-4(fp)
    c004:	1887883a 	add	r3,r3,r2
    c008:	e0bffd17 	ldw	r2,-12(fp)
    c00c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c010:	e0bffd17 	ldw	r2,-12(fp)
    c014:	10c00217 	ldw	r3,8(r2)
    c018:	d0a5c417 	ldw	r2,-26864(gp)
    c01c:	1880032e 	bgeu	r3,r2,c02c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c020:	e0bffd17 	ldw	r2,-12(fp)
    c024:	00c00044 	movi	r3,1
    c028:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c02c:	e0bffe17 	ldw	r2,-8(fp)
    c030:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c034:	e0fffd17 	ldw	r3,-12(fp)
    c038:	d0a01304 	addi	r2,gp,-32692
    c03c:	18bfcf1e 	bne	r3,r2,bf7c <_gp+0xffff5fbc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c040:	0001883a 	nop
}
    c044:	0001883a 	nop
    c048:	e037883a 	mov	sp,fp
    c04c:	dfc00117 	ldw	ra,4(sp)
    c050:	df000017 	ldw	fp,0(sp)
    c054:	dec00204 	addi	sp,sp,8
    c058:	f800283a 	ret

0000c05c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c05c:	deffff04 	addi	sp,sp,-4
    c060:	df000015 	stw	fp,0(sp)
    c064:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c068:	000170fa 	wrctl	ienable,zero
}
    c06c:	0001883a 	nop
    c070:	e037883a 	mov	sp,fp
    c074:	df000017 	ldw	fp,0(sp)
    c078:	dec00104 	addi	sp,sp,4
    c07c:	f800283a 	ret

0000c080 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c080:	defffa04 	addi	sp,sp,-24
    c084:	dfc00515 	stw	ra,20(sp)
    c088:	df000415 	stw	fp,16(sp)
    c08c:	df000404 	addi	fp,sp,16
    c090:	e13ffe15 	stw	r4,-8(fp)
    c094:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c098:	e0bfff17 	ldw	r2,-4(fp)
    c09c:	10800017 	ldw	r2,0(r2)
    c0a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c0a4:	e13ffe17 	ldw	r4,-8(fp)
    c0a8:	000c4ec0 	call	c4ec <strlen>
    c0ac:	10800044 	addi	r2,r2,1
    c0b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c0b4:	00000d06 	br	c0ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c0b8:	e0bffc17 	ldw	r2,-16(fp)
    c0bc:	10800217 	ldw	r2,8(r2)
    c0c0:	e0fffd17 	ldw	r3,-12(fp)
    c0c4:	180d883a 	mov	r6,r3
    c0c8:	e17ffe17 	ldw	r5,-8(fp)
    c0cc:	1009883a 	mov	r4,r2
    c0d0:	000c3280 	call	c328 <memcmp>
    c0d4:	1000021e 	bne	r2,zero,c0e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c0d8:	e0bffc17 	ldw	r2,-16(fp)
    c0dc:	00000706 	br	c0fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c0e0:	e0bffc17 	ldw	r2,-16(fp)
    c0e4:	10800017 	ldw	r2,0(r2)
    c0e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c0ec:	e0fffc17 	ldw	r3,-16(fp)
    c0f0:	e0bfff17 	ldw	r2,-4(fp)
    c0f4:	18bff01e 	bne	r3,r2,c0b8 <_gp+0xffff60f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c0f8:	0005883a 	mov	r2,zero
}
    c0fc:	e037883a 	mov	sp,fp
    c100:	dfc00117 	ldw	ra,4(sp)
    c104:	df000017 	ldw	fp,0(sp)
    c108:	dec00204 	addi	sp,sp,8
    c10c:	f800283a 	ret

0000c110 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c110:	defffb04 	addi	sp,sp,-20
    c114:	dfc00415 	stw	ra,16(sp)
    c118:	df000315 	stw	fp,12(sp)
    c11c:	df000304 	addi	fp,sp,12
    c120:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c124:	d0a00d17 	ldw	r2,-32716(gp)
    c128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c12c:	00003106 	br	c1f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c130:	e0bffd17 	ldw	r2,-12(fp)
    c134:	10800217 	ldw	r2,8(r2)
    c138:	1009883a 	mov	r4,r2
    c13c:	000c4ec0 	call	c4ec <strlen>
    c140:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c144:	e0bffd17 	ldw	r2,-12(fp)
    c148:	10c00217 	ldw	r3,8(r2)
    c14c:	e0bffe17 	ldw	r2,-8(fp)
    c150:	10bfffc4 	addi	r2,r2,-1
    c154:	1885883a 	add	r2,r3,r2
    c158:	10800003 	ldbu	r2,0(r2)
    c15c:	10803fcc 	andi	r2,r2,255
    c160:	1080201c 	xori	r2,r2,128
    c164:	10bfe004 	addi	r2,r2,-128
    c168:	10800bd8 	cmpnei	r2,r2,47
    c16c:	1000031e 	bne	r2,zero,c17c <alt_find_file+0x6c>
    {
      len -= 1;
    c170:	e0bffe17 	ldw	r2,-8(fp)
    c174:	10bfffc4 	addi	r2,r2,-1
    c178:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c17c:	e0bffe17 	ldw	r2,-8(fp)
    c180:	e0ffff17 	ldw	r3,-4(fp)
    c184:	1885883a 	add	r2,r3,r2
    c188:	10800003 	ldbu	r2,0(r2)
    c18c:	10803fcc 	andi	r2,r2,255
    c190:	1080201c 	xori	r2,r2,128
    c194:	10bfe004 	addi	r2,r2,-128
    c198:	10800be0 	cmpeqi	r2,r2,47
    c19c:	1000081e 	bne	r2,zero,c1c0 <alt_find_file+0xb0>
    c1a0:	e0bffe17 	ldw	r2,-8(fp)
    c1a4:	e0ffff17 	ldw	r3,-4(fp)
    c1a8:	1885883a 	add	r2,r3,r2
    c1ac:	10800003 	ldbu	r2,0(r2)
    c1b0:	10803fcc 	andi	r2,r2,255
    c1b4:	1080201c 	xori	r2,r2,128
    c1b8:	10bfe004 	addi	r2,r2,-128
    c1bc:	10000a1e 	bne	r2,zero,c1e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c1c0:	e0bffd17 	ldw	r2,-12(fp)
    c1c4:	10800217 	ldw	r2,8(r2)
    c1c8:	e0fffe17 	ldw	r3,-8(fp)
    c1cc:	180d883a 	mov	r6,r3
    c1d0:	e17fff17 	ldw	r5,-4(fp)
    c1d4:	1009883a 	mov	r4,r2
    c1d8:	000c3280 	call	c328 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1dc:	1000021e 	bne	r2,zero,c1e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	00000706 	br	c204 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c1e8:	e0bffd17 	ldw	r2,-12(fp)
    c1ec:	10800017 	ldw	r2,0(r2)
    c1f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c1f4:	e0fffd17 	ldw	r3,-12(fp)
    c1f8:	d0a00d04 	addi	r2,gp,-32716
    c1fc:	18bfcc1e 	bne	r3,r2,c130 <_gp+0xffff6170>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c200:	0005883a 	mov	r2,zero
}
    c204:	e037883a 	mov	sp,fp
    c208:	dfc00117 	ldw	ra,4(sp)
    c20c:	df000017 	ldw	fp,0(sp)
    c210:	dec00204 	addi	sp,sp,8
    c214:	f800283a 	ret

0000c218 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c218:	defffa04 	addi	sp,sp,-24
    c21c:	dfc00515 	stw	ra,20(sp)
    c220:	df000415 	stw	fp,16(sp)
    c224:	dc000315 	stw	r16,12(sp)
    c228:	df000404 	addi	fp,sp,16
    c22c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c230:	00bffa04 	movi	r2,-24
    c234:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c238:	e03ffc15 	stw	zero,-16(fp)
    c23c:	00001d06 	br	c2b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c240:	04000074 	movhi	r16,1
    c244:	84368704 	addi	r16,r16,-9700
    c248:	e0bffc17 	ldw	r2,-16(fp)
    c24c:	01400304 	movi	r5,12
    c250:	1009883a 	mov	r4,r2
    c254:	00088c00 	call	88c0 <__mulsi3>
    c258:	8085883a 	add	r2,r16,r2
    c25c:	10800017 	ldw	r2,0(r2)
    c260:	1000111e 	bne	r2,zero,c2a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c264:	04000074 	movhi	r16,1
    c268:	84368704 	addi	r16,r16,-9700
    c26c:	e0bffc17 	ldw	r2,-16(fp)
    c270:	01400304 	movi	r5,12
    c274:	1009883a 	mov	r4,r2
    c278:	00088c00 	call	88c0 <__mulsi3>
    c27c:	8085883a 	add	r2,r16,r2
    c280:	e0fffe17 	ldw	r3,-8(fp)
    c284:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c288:	d0e01117 	ldw	r3,-32700(gp)
    c28c:	e0bffc17 	ldw	r2,-16(fp)
    c290:	1880020e 	bge	r3,r2,c29c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
    c29c:	e0bffc17 	ldw	r2,-16(fp)
    c2a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c2a4:	00000606 	br	c2c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2a8:	e0bffc17 	ldw	r2,-16(fp)
    c2ac:	10800044 	addi	r2,r2,1
    c2b0:	e0bffc15 	stw	r2,-16(fp)
    c2b4:	e0bffc17 	ldw	r2,-16(fp)
    c2b8:	10800810 	cmplti	r2,r2,32
    c2bc:	103fe01e 	bne	r2,zero,c240 <_gp+0xffff6280>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c2c0:	e0bffd17 	ldw	r2,-12(fp)
}
    c2c4:	e6ffff04 	addi	sp,fp,-4
    c2c8:	dfc00217 	ldw	ra,8(sp)
    c2cc:	df000117 	ldw	fp,4(sp)
    c2d0:	dc000017 	ldw	r16,0(sp)
    c2d4:	dec00304 	addi	sp,sp,12
    c2d8:	f800283a 	ret

0000c2dc <atexit>:
    c2dc:	200b883a 	mov	r5,r4
    c2e0:	000f883a 	mov	r7,zero
    c2e4:	000d883a 	mov	r6,zero
    c2e8:	0009883a 	mov	r4,zero
    c2ec:	000c5841 	jmpi	c584 <__register_exitproc>

0000c2f0 <exit>:
    c2f0:	defffe04 	addi	sp,sp,-8
    c2f4:	000b883a 	mov	r5,zero
    c2f8:	dc000015 	stw	r16,0(sp)
    c2fc:	dfc00115 	stw	ra,4(sp)
    c300:	2021883a 	mov	r16,r4
    c304:	000c69c0 	call	c69c <__call_exitprocs>
    c308:	00800074 	movhi	r2,1
    c30c:	10b80504 	addi	r2,r2,-8172
    c310:	11000017 	ldw	r4,0(r2)
    c314:	20800f17 	ldw	r2,60(r4)
    c318:	10000126 	beq	r2,zero,c320 <exit+0x30>
    c31c:	103ee83a 	callr	r2
    c320:	8009883a 	mov	r4,r16
    c324:	000c81c0 	call	c81c <_exit>

0000c328 <memcmp>:
    c328:	01c000c4 	movi	r7,3
    c32c:	3980192e 	bgeu	r7,r6,c394 <memcmp+0x6c>
    c330:	2144b03a 	or	r2,r4,r5
    c334:	11c4703a 	and	r2,r2,r7
    c338:	10000f26 	beq	r2,zero,c378 <memcmp+0x50>
    c33c:	20800003 	ldbu	r2,0(r4)
    c340:	28c00003 	ldbu	r3,0(r5)
    c344:	10c0151e 	bne	r2,r3,c39c <memcmp+0x74>
    c348:	31bfff84 	addi	r6,r6,-2
    c34c:	01ffffc4 	movi	r7,-1
    c350:	00000406 	br	c364 <memcmp+0x3c>
    c354:	20800003 	ldbu	r2,0(r4)
    c358:	28c00003 	ldbu	r3,0(r5)
    c35c:	31bfffc4 	addi	r6,r6,-1
    c360:	10c00e1e 	bne	r2,r3,c39c <memcmp+0x74>
    c364:	21000044 	addi	r4,r4,1
    c368:	29400044 	addi	r5,r5,1
    c36c:	31fff91e 	bne	r6,r7,c354 <_gp+0xffff6394>
    c370:	0005883a 	mov	r2,zero
    c374:	f800283a 	ret
    c378:	20c00017 	ldw	r3,0(r4)
    c37c:	28800017 	ldw	r2,0(r5)
    c380:	18bfee1e 	bne	r3,r2,c33c <_gp+0xffff637c>
    c384:	31bfff04 	addi	r6,r6,-4
    c388:	21000104 	addi	r4,r4,4
    c38c:	29400104 	addi	r5,r5,4
    c390:	39bff936 	bltu	r7,r6,c378 <_gp+0xffff63b8>
    c394:	303fe91e 	bne	r6,zero,c33c <_gp+0xffff637c>
    c398:	003ff506 	br	c370 <_gp+0xffff63b0>
    c39c:	10c5c83a 	sub	r2,r2,r3
    c3a0:	f800283a 	ret

0000c3a4 <memcpy>:
    c3a4:	defffd04 	addi	sp,sp,-12
    c3a8:	dfc00215 	stw	ra,8(sp)
    c3ac:	dc400115 	stw	r17,4(sp)
    c3b0:	dc000015 	stw	r16,0(sp)
    c3b4:	00c003c4 	movi	r3,15
    c3b8:	2005883a 	mov	r2,r4
    c3bc:	1980452e 	bgeu	r3,r6,c4d4 <memcpy+0x130>
    c3c0:	2906b03a 	or	r3,r5,r4
    c3c4:	18c000cc 	andi	r3,r3,3
    c3c8:	1800441e 	bne	r3,zero,c4dc <memcpy+0x138>
    c3cc:	347ffc04 	addi	r17,r6,-16
    c3d0:	8822d13a 	srli	r17,r17,4
    c3d4:	28c00104 	addi	r3,r5,4
    c3d8:	23400104 	addi	r13,r4,4
    c3dc:	8820913a 	slli	r16,r17,4
    c3e0:	2b000204 	addi	r12,r5,8
    c3e4:	22c00204 	addi	r11,r4,8
    c3e8:	84000504 	addi	r16,r16,20
    c3ec:	2a800304 	addi	r10,r5,12
    c3f0:	22400304 	addi	r9,r4,12
    c3f4:	2c21883a 	add	r16,r5,r16
    c3f8:	2811883a 	mov	r8,r5
    c3fc:	200f883a 	mov	r7,r4
    c400:	41000017 	ldw	r4,0(r8)
    c404:	1fc00017 	ldw	ra,0(r3)
    c408:	63c00017 	ldw	r15,0(r12)
    c40c:	39000015 	stw	r4,0(r7)
    c410:	53800017 	ldw	r14,0(r10)
    c414:	6fc00015 	stw	ra,0(r13)
    c418:	5bc00015 	stw	r15,0(r11)
    c41c:	4b800015 	stw	r14,0(r9)
    c420:	18c00404 	addi	r3,r3,16
    c424:	39c00404 	addi	r7,r7,16
    c428:	42000404 	addi	r8,r8,16
    c42c:	6b400404 	addi	r13,r13,16
    c430:	63000404 	addi	r12,r12,16
    c434:	5ac00404 	addi	r11,r11,16
    c438:	52800404 	addi	r10,r10,16
    c43c:	4a400404 	addi	r9,r9,16
    c440:	1c3fef1e 	bne	r3,r16,c400 <_gp+0xffff6440>
    c444:	89c00044 	addi	r7,r17,1
    c448:	380e913a 	slli	r7,r7,4
    c44c:	310003cc 	andi	r4,r6,15
    c450:	02c000c4 	movi	r11,3
    c454:	11c7883a 	add	r3,r2,r7
    c458:	29cb883a 	add	r5,r5,r7
    c45c:	5900212e 	bgeu	r11,r4,c4e4 <memcpy+0x140>
    c460:	1813883a 	mov	r9,r3
    c464:	2811883a 	mov	r8,r5
    c468:	200f883a 	mov	r7,r4
    c46c:	42800017 	ldw	r10,0(r8)
    c470:	4a400104 	addi	r9,r9,4
    c474:	39ffff04 	addi	r7,r7,-4
    c478:	4abfff15 	stw	r10,-4(r9)
    c47c:	42000104 	addi	r8,r8,4
    c480:	59fffa36 	bltu	r11,r7,c46c <_gp+0xffff64ac>
    c484:	213fff04 	addi	r4,r4,-4
    c488:	2008d0ba 	srli	r4,r4,2
    c48c:	318000cc 	andi	r6,r6,3
    c490:	21000044 	addi	r4,r4,1
    c494:	2109883a 	add	r4,r4,r4
    c498:	2109883a 	add	r4,r4,r4
    c49c:	1907883a 	add	r3,r3,r4
    c4a0:	290b883a 	add	r5,r5,r4
    c4a4:	30000626 	beq	r6,zero,c4c0 <memcpy+0x11c>
    c4a8:	198d883a 	add	r6,r3,r6
    c4ac:	29c00003 	ldbu	r7,0(r5)
    c4b0:	18c00044 	addi	r3,r3,1
    c4b4:	29400044 	addi	r5,r5,1
    c4b8:	19ffffc5 	stb	r7,-1(r3)
    c4bc:	19bffb1e 	bne	r3,r6,c4ac <_gp+0xffff64ec>
    c4c0:	dfc00217 	ldw	ra,8(sp)
    c4c4:	dc400117 	ldw	r17,4(sp)
    c4c8:	dc000017 	ldw	r16,0(sp)
    c4cc:	dec00304 	addi	sp,sp,12
    c4d0:	f800283a 	ret
    c4d4:	2007883a 	mov	r3,r4
    c4d8:	003ff206 	br	c4a4 <_gp+0xffff64e4>
    c4dc:	2007883a 	mov	r3,r4
    c4e0:	003ff106 	br	c4a8 <_gp+0xffff64e8>
    c4e4:	200d883a 	mov	r6,r4
    c4e8:	003fee06 	br	c4a4 <_gp+0xffff64e4>

0000c4ec <strlen>:
    c4ec:	208000cc 	andi	r2,r4,3
    c4f0:	10002026 	beq	r2,zero,c574 <strlen+0x88>
    c4f4:	20800007 	ldb	r2,0(r4)
    c4f8:	10002026 	beq	r2,zero,c57c <strlen+0x90>
    c4fc:	2005883a 	mov	r2,r4
    c500:	00000206 	br	c50c <strlen+0x20>
    c504:	10c00007 	ldb	r3,0(r2)
    c508:	18001826 	beq	r3,zero,c56c <strlen+0x80>
    c50c:	10800044 	addi	r2,r2,1
    c510:	10c000cc 	andi	r3,r2,3
    c514:	183ffb1e 	bne	r3,zero,c504 <_gp+0xffff6544>
    c518:	10c00017 	ldw	r3,0(r2)
    c51c:	01ffbff4 	movhi	r7,65279
    c520:	39ffbfc4 	addi	r7,r7,-257
    c524:	00ca303a 	nor	r5,zero,r3
    c528:	01a02074 	movhi	r6,32897
    c52c:	19c7883a 	add	r3,r3,r7
    c530:	31a02004 	addi	r6,r6,-32640
    c534:	1946703a 	and	r3,r3,r5
    c538:	1986703a 	and	r3,r3,r6
    c53c:	1800091e 	bne	r3,zero,c564 <strlen+0x78>
    c540:	10800104 	addi	r2,r2,4
    c544:	10c00017 	ldw	r3,0(r2)
    c548:	19cb883a 	add	r5,r3,r7
    c54c:	00c6303a 	nor	r3,zero,r3
    c550:	28c6703a 	and	r3,r5,r3
    c554:	1986703a 	and	r3,r3,r6
    c558:	183ff926 	beq	r3,zero,c540 <_gp+0xffff6580>
    c55c:	00000106 	br	c564 <strlen+0x78>
    c560:	10800044 	addi	r2,r2,1
    c564:	10c00007 	ldb	r3,0(r2)
    c568:	183ffd1e 	bne	r3,zero,c560 <_gp+0xffff65a0>
    c56c:	1105c83a 	sub	r2,r2,r4
    c570:	f800283a 	ret
    c574:	2005883a 	mov	r2,r4
    c578:	003fe706 	br	c518 <_gp+0xffff6558>
    c57c:	0005883a 	mov	r2,zero
    c580:	f800283a 	ret

0000c584 <__register_exitproc>:
    c584:	defffa04 	addi	sp,sp,-24
    c588:	dc000315 	stw	r16,12(sp)
    c58c:	04000074 	movhi	r16,1
    c590:	84380504 	addi	r16,r16,-8172
    c594:	80c00017 	ldw	r3,0(r16)
    c598:	dc400415 	stw	r17,16(sp)
    c59c:	dfc00515 	stw	ra,20(sp)
    c5a0:	18805217 	ldw	r2,328(r3)
    c5a4:	2023883a 	mov	r17,r4
    c5a8:	10003726 	beq	r2,zero,c688 <__register_exitproc+0x104>
    c5ac:	10c00117 	ldw	r3,4(r2)
    c5b0:	010007c4 	movi	r4,31
    c5b4:	20c00e16 	blt	r4,r3,c5f0 <__register_exitproc+0x6c>
    c5b8:	1a000044 	addi	r8,r3,1
    c5bc:	8800221e 	bne	r17,zero,c648 <__register_exitproc+0xc4>
    c5c0:	18c00084 	addi	r3,r3,2
    c5c4:	18c7883a 	add	r3,r3,r3
    c5c8:	18c7883a 	add	r3,r3,r3
    c5cc:	12000115 	stw	r8,4(r2)
    c5d0:	10c7883a 	add	r3,r2,r3
    c5d4:	19400015 	stw	r5,0(r3)
    c5d8:	0005883a 	mov	r2,zero
    c5dc:	dfc00517 	ldw	ra,20(sp)
    c5e0:	dc400417 	ldw	r17,16(sp)
    c5e4:	dc000317 	ldw	r16,12(sp)
    c5e8:	dec00604 	addi	sp,sp,24
    c5ec:	f800283a 	ret
    c5f0:	00800034 	movhi	r2,0
    c5f4:	10800004 	addi	r2,r2,0
    c5f8:	10002626 	beq	r2,zero,c694 <__register_exitproc+0x110>
    c5fc:	01006404 	movi	r4,400
    c600:	d9400015 	stw	r5,0(sp)
    c604:	d9800115 	stw	r6,4(sp)
    c608:	d9c00215 	stw	r7,8(sp)
    c60c:	00000000 	call	0 <__reset-0x8000>
    c610:	d9400017 	ldw	r5,0(sp)
    c614:	d9800117 	ldw	r6,4(sp)
    c618:	d9c00217 	ldw	r7,8(sp)
    c61c:	10001d26 	beq	r2,zero,c694 <__register_exitproc+0x110>
    c620:	81000017 	ldw	r4,0(r16)
    c624:	10000115 	stw	zero,4(r2)
    c628:	02000044 	movi	r8,1
    c62c:	22405217 	ldw	r9,328(r4)
    c630:	0007883a 	mov	r3,zero
    c634:	12400015 	stw	r9,0(r2)
    c638:	20805215 	stw	r2,328(r4)
    c63c:	10006215 	stw	zero,392(r2)
    c640:	10006315 	stw	zero,396(r2)
    c644:	883fde26 	beq	r17,zero,c5c0 <_gp+0xffff6600>
    c648:	18c9883a 	add	r4,r3,r3
    c64c:	2109883a 	add	r4,r4,r4
    c650:	1109883a 	add	r4,r2,r4
    c654:	21802215 	stw	r6,136(r4)
    c658:	01800044 	movi	r6,1
    c65c:	12406217 	ldw	r9,392(r2)
    c660:	30cc983a 	sll	r6,r6,r3
    c664:	4992b03a 	or	r9,r9,r6
    c668:	12406215 	stw	r9,392(r2)
    c66c:	21c04215 	stw	r7,264(r4)
    c670:	01000084 	movi	r4,2
    c674:	893fd21e 	bne	r17,r4,c5c0 <_gp+0xffff6600>
    c678:	11006317 	ldw	r4,396(r2)
    c67c:	218cb03a 	or	r6,r4,r6
    c680:	11806315 	stw	r6,396(r2)
    c684:	003fce06 	br	c5c0 <_gp+0xffff6600>
    c688:	18805304 	addi	r2,r3,332
    c68c:	18805215 	stw	r2,328(r3)
    c690:	003fc606 	br	c5ac <_gp+0xffff65ec>
    c694:	00bfffc4 	movi	r2,-1
    c698:	003fd006 	br	c5dc <_gp+0xffff661c>

0000c69c <__call_exitprocs>:
    c69c:	defff504 	addi	sp,sp,-44
    c6a0:	df000915 	stw	fp,36(sp)
    c6a4:	dd400615 	stw	r21,24(sp)
    c6a8:	dc800315 	stw	r18,12(sp)
    c6ac:	dfc00a15 	stw	ra,40(sp)
    c6b0:	ddc00815 	stw	r23,32(sp)
    c6b4:	dd800715 	stw	r22,28(sp)
    c6b8:	dd000515 	stw	r20,20(sp)
    c6bc:	dcc00415 	stw	r19,16(sp)
    c6c0:	dc400215 	stw	r17,8(sp)
    c6c4:	dc000115 	stw	r16,4(sp)
    c6c8:	d9000015 	stw	r4,0(sp)
    c6cc:	2839883a 	mov	fp,r5
    c6d0:	04800044 	movi	r18,1
    c6d4:	057fffc4 	movi	r21,-1
    c6d8:	00800074 	movhi	r2,1
    c6dc:	10b80504 	addi	r2,r2,-8172
    c6e0:	12000017 	ldw	r8,0(r2)
    c6e4:	45005217 	ldw	r20,328(r8)
    c6e8:	44c05204 	addi	r19,r8,328
    c6ec:	a0001c26 	beq	r20,zero,c760 <__call_exitprocs+0xc4>
    c6f0:	a0800117 	ldw	r2,4(r20)
    c6f4:	15ffffc4 	addi	r23,r2,-1
    c6f8:	b8000d16 	blt	r23,zero,c730 <__call_exitprocs+0x94>
    c6fc:	14000044 	addi	r16,r2,1
    c700:	8421883a 	add	r16,r16,r16
    c704:	8421883a 	add	r16,r16,r16
    c708:	84402004 	addi	r17,r16,128
    c70c:	a463883a 	add	r17,r20,r17
    c710:	a421883a 	add	r16,r20,r16
    c714:	e0001e26 	beq	fp,zero,c790 <__call_exitprocs+0xf4>
    c718:	80804017 	ldw	r2,256(r16)
    c71c:	e0801c26 	beq	fp,r2,c790 <__call_exitprocs+0xf4>
    c720:	bdffffc4 	addi	r23,r23,-1
    c724:	843fff04 	addi	r16,r16,-4
    c728:	8c7fff04 	addi	r17,r17,-4
    c72c:	bd7ff91e 	bne	r23,r21,c714 <_gp+0xffff6754>
    c730:	00800034 	movhi	r2,0
    c734:	10800004 	addi	r2,r2,0
    c738:	10000926 	beq	r2,zero,c760 <__call_exitprocs+0xc4>
    c73c:	a0800117 	ldw	r2,4(r20)
    c740:	1000301e 	bne	r2,zero,c804 <__call_exitprocs+0x168>
    c744:	a0800017 	ldw	r2,0(r20)
    c748:	10003226 	beq	r2,zero,c814 <__call_exitprocs+0x178>
    c74c:	a009883a 	mov	r4,r20
    c750:	98800015 	stw	r2,0(r19)
    c754:	00000000 	call	0 <__reset-0x8000>
    c758:	9d000017 	ldw	r20,0(r19)
    c75c:	a03fe41e 	bne	r20,zero,c6f0 <_gp+0xffff6730>
    c760:	dfc00a17 	ldw	ra,40(sp)
    c764:	df000917 	ldw	fp,36(sp)
    c768:	ddc00817 	ldw	r23,32(sp)
    c76c:	dd800717 	ldw	r22,28(sp)
    c770:	dd400617 	ldw	r21,24(sp)
    c774:	dd000517 	ldw	r20,20(sp)
    c778:	dcc00417 	ldw	r19,16(sp)
    c77c:	dc800317 	ldw	r18,12(sp)
    c780:	dc400217 	ldw	r17,8(sp)
    c784:	dc000117 	ldw	r16,4(sp)
    c788:	dec00b04 	addi	sp,sp,44
    c78c:	f800283a 	ret
    c790:	a0800117 	ldw	r2,4(r20)
    c794:	80c00017 	ldw	r3,0(r16)
    c798:	10bfffc4 	addi	r2,r2,-1
    c79c:	15c01426 	beq	r2,r23,c7f0 <__call_exitprocs+0x154>
    c7a0:	80000015 	stw	zero,0(r16)
    c7a4:	183fde26 	beq	r3,zero,c720 <_gp+0xffff6760>
    c7a8:	95c8983a 	sll	r4,r18,r23
    c7ac:	a0806217 	ldw	r2,392(r20)
    c7b0:	a5800117 	ldw	r22,4(r20)
    c7b4:	2084703a 	and	r2,r4,r2
    c7b8:	10000b26 	beq	r2,zero,c7e8 <__call_exitprocs+0x14c>
    c7bc:	a0806317 	ldw	r2,396(r20)
    c7c0:	2088703a 	and	r4,r4,r2
    c7c4:	20000c1e 	bne	r4,zero,c7f8 <__call_exitprocs+0x15c>
    c7c8:	89400017 	ldw	r5,0(r17)
    c7cc:	d9000017 	ldw	r4,0(sp)
    c7d0:	183ee83a 	callr	r3
    c7d4:	a0800117 	ldw	r2,4(r20)
    c7d8:	15bfbf1e 	bne	r2,r22,c6d8 <_gp+0xffff6718>
    c7dc:	98800017 	ldw	r2,0(r19)
    c7e0:	153fcf26 	beq	r2,r20,c720 <_gp+0xffff6760>
    c7e4:	003fbc06 	br	c6d8 <_gp+0xffff6718>
    c7e8:	183ee83a 	callr	r3
    c7ec:	003ff906 	br	c7d4 <_gp+0xffff6814>
    c7f0:	a5c00115 	stw	r23,4(r20)
    c7f4:	003feb06 	br	c7a4 <_gp+0xffff67e4>
    c7f8:	89000017 	ldw	r4,0(r17)
    c7fc:	183ee83a 	callr	r3
    c800:	003ff406 	br	c7d4 <_gp+0xffff6814>
    c804:	a0800017 	ldw	r2,0(r20)
    c808:	a027883a 	mov	r19,r20
    c80c:	1029883a 	mov	r20,r2
    c810:	003fb606 	br	c6ec <_gp+0xffff672c>
    c814:	0005883a 	mov	r2,zero
    c818:	003ffb06 	br	c808 <_gp+0xffff6848>

0000c81c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c81c:	defffd04 	addi	sp,sp,-12
    c820:	df000215 	stw	fp,8(sp)
    c824:	df000204 	addi	fp,sp,8
    c828:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c82c:	0001883a 	nop
    c830:	e0bfff17 	ldw	r2,-4(fp)
    c834:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c838:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c83c:	10000226 	beq	r2,zero,c848 <_exit+0x2c>
    ALT_SIM_FAIL();
    c840:	002af070 	cmpltui	zero,zero,43969
    c844:	00000106 	br	c84c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c848:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c84c:	003fff06 	br	c84c <_gp+0xffff688c>
